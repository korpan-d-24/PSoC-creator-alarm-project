C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CAPSENSE
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\CapSense.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.4\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\CapSense.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEBUG) 
                    -WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/CapSense.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\CapSense.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CapSense.c
   3          * Version 3.50
   4          *
   5          * Description:
   6          *  This file provides the source code of scanning APIs for the CapSense CSD 
   7          *  component.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "CapSense.h"
  19          #include "cyapicallbacks.h"
  20          
  21          
  22          static uint8 CapSense_initVar = 0u;
  23                      
  24          /* Global software variables */
  25          volatile uint8 CapSense_csv;            /* CapSense CSD status, control variable */
  26          volatile uint8 CapSense_sensorIndex;    /* Index of scannig sensor */
  27          
  28          /* AutoTunning start */
  29          #if (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)
                  uint8 CapSense_lowLevelTuningDone = 1u;
              #endif /* (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
  32          
  33          #if (CapSense_CURRENT_SOURCE == CapSense_EXTERNAL_RB)
                  uint8  CapSense_extRbCh0Cur = CapSense_RBLEED1;
                  #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                      uint8  CapSense_extRbCh1Cur = (CapSense_RBLEED1 + CapSense_TOTAL_RB_NUMBER__CH0);
                  #endif /* (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)*/ 
              #endif /* (CapSense_CURRENT_SOURCE == CapSense_EXTERNAL_RB) */ 
  39                  
  40          /* Global array of Raw Counts */
  41          uint16 CapSense_sensorRaw[CapSense_TOTAL_SENSOR_COUNT]; 
  42          
  43          uint8 CapSense_sensorEnableMask[(((CapSense_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)] = {
  44          0x7Fu, };
  45          
  46          uint8 CYXDATA * const CYCODE CapSense_pcTable[] = {
  47              (uint8 CYXDATA *)CapSense_PortCH0__LinearSlider0_e0__LS__PC, 
  48              (uint8 CYXDATA *)CapSense_PortCH0__LinearSlider0_e1__LS__PC, 
  49              (uint8 CYXDATA *)CapSense_PortCH0__LinearSlider0_e2__LS__PC, 
  50              (uint8 CYXDATA *)CapSense_PortCH0__LinearSlider0_e3__LS__PC, 
  51              (uint8 CYXDATA *)CapSense_PortCH0__LinearSlider0_e4__LS__PC, 
  52              (uint8 CYXDATA *)CapSense_PortCH0__Button0__BTN__PC, 
  53              (uint8 CYXDATA *)CapSense_PortCH0__Button1__BTN__PC, 
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 2   

  54          };
  55          
  56          const uint8 CYCODE CapSense_portTable[] = {
  57              CapSense_PortCH0__LinearSlider0_e0__LS__PORT, 
  58              CapSense_PortCH0__LinearSlider0_e1__LS__PORT, 
  59              CapSense_PortCH0__LinearSlider0_e2__LS__PORT, 
  60              CapSense_PortCH0__LinearSlider0_e3__LS__PORT, 
  61              CapSense_PortCH0__LinearSlider0_e4__LS__PORT, 
  62              CapSense_PortCH0__Button0__BTN__PORT, 
  63              CapSense_PortCH0__Button1__BTN__PORT, 
  64          };
  65          
  66          const uint8 CYCODE CapSense_maskTable[] = {
  67              CapSense_PortCH0__LinearSlider0_e0__LS__MASK,
  68              CapSense_PortCH0__LinearSlider0_e1__LS__MASK,
  69              CapSense_PortCH0__LinearSlider0_e2__LS__MASK,
  70              CapSense_PortCH0__LinearSlider0_e3__LS__MASK,
  71              CapSense_PortCH0__LinearSlider0_e4__LS__MASK,
  72              CapSense_PortCH0__Button0__BTN__MASK,
  73              CapSense_PortCH0__Button1__BTN__MASK,
  74          };
  75          
  76          uint8 CYXDATA * const CYCODE CapSense_csTable[] = {
  77              (uint8 CYXDATA *)CYREG_PRT0_CAPS_SEL, (uint8 CYXDATA *)CYREG_PRT1_CAPS_SEL, (uint8 CYXDATA *)CYREG_PRT
             -2_CAPS_SEL,
  78              (uint8 CYXDATA *)CYREG_PRT3_CAPS_SEL, (uint8 CYXDATA *)CYREG_PRT4_CAPS_SEL, (uint8 CYXDATA *)CYREG_PRT
             -5_CAPS_SEL,
  79              (uint8 CYXDATA *)CYREG_PRT6_CAPS_SEL, (uint8 CYXDATA *)CYREG_PRT15_CAPS_SEL,
  80          };
  81          
  82          const uint8 CYCODE CapSense_idacSettings[] = {
  83              200u,200u,200u,200u,200u,200u,200u,
  84          };
  85          
  86          const uint8 CYCODE CapSense_widgetResolution[] = {
  87              CapSense_PWM_RESOLUTION_14_BITS,
  88              CapSense_PWM_RESOLUTION_14_BITS,
  89              CapSense_PWM_RESOLUTION_13_BITS,
  90          };
  91          
  92          uint8 CapSense_analogSwitchDivider[CapSense_TOTAL_SCANSLOT_COUNT] = {
  93              11u, 11u, 11u, 11u, 11u, 11u, 11u, 
  94          };
  95          
  96          const uint8 CYCODE CapSense_widgetNumber[] = {
  97              0u, 0u, 0u, 0u, 0u, /* LinearSlider0__LS */
  98              1u, /* Button0__BTN */
  99              2u, /* Button1__BTN */
 100              
 101          };
 102          
 103          
 104          
 105          
 106          /*******************************************************************************
 107          * Function Name: CapSense_Init
 108          ********************************************************************************
 109          *
 110          * Summary:
 111          *  Inits default CapSense configuration provided with customizer that defines 
 112          *  mode of component operations and resets all sensors to an inactive state.
 113          *
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 3   

 114          * Parameters:
 115          *  None
 116          *
 117          * Return:
 118          *  None
 119          *
 120          *******************************************************************************/
 121          void CapSense_Init(void) 
 122          {
 123   1          #if ( (CapSense_PRS_OPTIONS) || \
 124   1                (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_UDB) || \
 125   1                ( (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) && \
 126   1                  (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_UDB)) )
 127   1              
 128   1              uint8 enableInterrupts;
 129   1          #endif /* ( (CapSense_PRS_OPTIONS) || \
 130   1                 * (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_UDB) || \
 131   1                 * ( (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) && \
 132   1                 * (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_UDB)) ) 
 133   1                 */
 134   1          
 135   1          /* Clear all sensors */
 136   1          CapSense_ClearSensors();
 137   1      
 138   1          /* Set Prescaler */
 139   1          #if (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB)
 140   1              /* Do nothing = config without prescaler */
 141   1          #elif (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_FF)
                      CapSense_PRESCALER_CONTROL_REG   = (CapSense_PRESCALER_CTRL_ENABLE |
                                                                  CapSense_PRESCALER_CTRL_MODE_CMP);
                                                             
                      CapSense_PRESCALER_CONTROL2_REG |= CapSense_PRESCALER_CTRL_CMP_LESS_EQ;
                  #else
                      /* Do nothing = config without prescaler */
                  #endif  /* (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB) */
 149   1      
 150   1          /* Set PRS */
 151   1          #if (CapSense_PRS_OPTIONS)
 152   1              CapSense_SetAnalogSwitchesSource(CapSense_ANALOG_SWITCHES_SRC_PRS);
 153   1          #endif /* (CapSense_PRS_OPTIONS) */
 154   1      
 155   1          #if (CapSense_PRS_OPTIONS == CapSense_PRS_8BITS)
                      /* Aux control set FIFO as REG */
                      enableInterrupts = CyEnterCriticalSection();
                      CapSense_AUX_CONTROL_A_REG |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
                      CyExitCriticalSection(enableInterrupts);
                      
                      /* Write polynomial */
                      CapSense_POLYNOM_REG   = CapSense_PRS8_DEFAULT_POLYNOM;
                      /* Write FIFO with seed */
                      CapSense_SEED_COPY_REG = CapSense_MEASURE_FULL_RANGE_LOW;
                      
                  #elif (CapSense_PRS_OPTIONS == CapSense_PRS_16BITS)
 167   1              /* Aux control set FIFO as REG */ 
 168   1              enableInterrupts = CyEnterCriticalSection();  
 169   1              CapSense_AUX_CONTROL_A_REG |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
 170   1              CapSense_AUX_CONTROL_B_REG |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
 171   1              CyExitCriticalSection(enableInterrupts);
 172   1              
 173   1              /* Write polynomial */
 174   1              CY_SET_REG16(CapSense_POLYNOM_PTR, CapSense_PRS16_DEFAULT_POLYNOM);
 175   1              /* Write FIFO with seed */
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 4   

 176   1              CY_SET_REG16(CapSense_SEED_COPY_PTR, CapSense_MEASURE_FULL_RANGE);
 177   1                      
 178   1          #elif (CapSense_PRS_OPTIONS == CapSense_PRS_16BITS_4X)
                      /* Aux control set FIFO as REG */
                      enableInterrupts = CyEnterCriticalSection();
                      CapSense_AUX_CONTROL_A_REG  |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
                      CyExitCriticalSection(enableInterrupts);
                      
                      /* Write polynomial */
                      CapSense_POLYNOM_A__D1_REG   = HI8(CapSense_PRS16_DEFAULT_POLYNOM);
                      CapSense_POLYNOM_A__D0_REG   = LO8(CapSense_PRS16_DEFAULT_POLYNOM);
                      /* Write FIFO with seed */
                      CapSense_SEED_COPY_A__F1_REG = CapSense_MEASURE_FULL_RANGE_LOW;
                      CapSense_SEED_COPY_A__F0_REG = CapSense_MEASURE_FULL_RANGE_LOW; 
                      
                  #else
                      /* Do nothing = config without PRS */
                  #endif  /* (CapSense_PRS_OPTIONS == CapSense_PRS_8BITS) */ 
 194   1          
 195   1          /* Set ScanSpeed */
 196   1          CapSense_SCANSPEED_PERIOD_REG = CapSense_SCANSPEED_VALUE;
 197   1          
 198   1          /* Set the Measure */
 199   1          #if (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)
                      /* Window PWM */
                      CapSense_PWM_CH0_CONTROL_REG      = CapSense_MEASURE_CTRL_ENABLE;
                      CapSense_PWM_CH0_CONTROL2_REG    |= CapSense_MEASURE_CTRL_PULSEWIDTH;
                      CY_SET_REG16(CapSense_PWM_CH0_COUNTER_PTR, CapSense_MEASURE_FULL_RANGE);
                      
                      /* Raw Counter */
                      CapSense_RAW_CH0_CONTROL_REG      = CapSense_MEASURE_CTRL_ENABLE;
                      CapSense_RAW_CH0_CONTROL2_REG    |= CapSense_MEASURE_CTRL_PULSEWIDTH;
                      CY_SET_REG16(CapSense_RAW_CH0_PERIOD_PTR, CapSense_MEASURE_FULL_RANGE);
                  
                  #else
 211   1              /*Window PWM and Raw Counter AUX set */
 212   1              enableInterrupts = CyEnterCriticalSection();
 213   1              CapSense_PWM_CH0_AUX_CONTROL_REG |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
 214   1              CapSense_RAW_CH0_AUX_CONTROL_REG |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
 215   1              CyExitCriticalSection(enableInterrupts);
 216   1              
 217   1              /* Window PWM */
 218   1              CapSense_PWM_CH0_ADD_VALUE_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
 219   1              CapSense_PWM_CH0_PERIOD_LO_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
 220   1              CapSense_PWM_CH0_COUNTER_LO_REG   = CapSense_MEASURE_FULL_RANGE_LOW;
 221   1              
 222   1              /* Raw Counter */
 223   1              CapSense_RAW_CH0_ADD_VALUE_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
 224   1              CapSense_RAW_CH0_PERIOD_HI_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
 225   1              CapSense_RAW_CH0_PERIOD_LO_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
 226   1              
 227   1          #endif  /* (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF) */ 
 228   1          
 229   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                      #if (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF)
                          /* Window PWM */
                          CapSense_PWM_CH1_CONTROL_REG      = CapSense_MEASURE_CTRL_ENABLE;
                          CapSense_PWM_CH1_CONTROL2_REG    |= CapSense_MEASURE_CTRL_PULSEWIDTH;
                          CY_SET_REG16(CapSense_PWM_CH1_COUNTER_PTR, CapSense_MEASURE_FULL_RANGE);
                          
                          /* Raw Counter */
                          CapSense_RAW_CH1_CONTROL_REG      = CapSense_MEASURE_CTRL_ENABLE;
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 5   

                          CapSense_RAW_CH1_CONTROL2_REG    |= CapSense_MEASURE_CTRL_PULSEWIDTH;
                          CY_SET_REG16(CapSense_RAW_CH1_PERIOD_PTR, CapSense_MEASURE_FULL_RANGE);
                         
                      #else
                          /*Window PWM and Raw Counter AUX set */
                          enableInterrupts = CyEnterCriticalSection();
                          CapSense_PWM_CH1_AUX_CONTROL_REG |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
                          CapSense_RAW_CH1_AUX_CONTROL_REG |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
                          CyExitCriticalSection(enableInterrupts);
                          
                          /* Window PWM */
                          CapSense_PWM_CH1_ADD_VALUE_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
                          CapSense_PWM_CH1_PERIOD_LO_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
                          CapSense_PWM_CH1_COUNTER_LO_REG   = CapSense_MEASURE_FULL_RANGE_LOW;
                          
                          /* Raw Counter */
                          
                          CapSense_RAW_CH1_ADD_VALUE_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
                          CapSense_RAW_CH1_PERIOD_HI_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
                          CapSense_RAW_CH1_PERIOD_LO_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
                          
                      #endif  /* (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF) */
                  
                  #endif  /* (CapSense_DESIGN_TYPE == TWO_CHANNELS_DESIGN) */
 262   1          
 263   1          /* Setup ISR */
 264   1          CyIntDisable(CapSense_IsrCH0_ISR_NUMBER);
 265   1          (void)CyIntSetVector(CapSense_IsrCH0_ISR_NUMBER, &CapSense_IsrCH0_ISR);
 266   1          CyIntSetPriority(CapSense_IsrCH0_ISR_NUMBER, CapSense_IsrCH0_ISR_PRIORITY);
 267   1          
 268   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                      CyIntDisable(CapSense_IsrCH1_ISR_NUMBER);
                      CyIntSetVector(CapSense_IsrCH1_ISR_NUMBER, CapSense_IsrCH1_ISR);
                      CyIntSetPriority(CapSense_IsrCH1_ISR_NUMBER, CapSense_IsrCH1_ISR_PRIORITY);
                  #endif  /* CapSense_DESIGN_TYPE */
 273   1          
 274   1          /* Setup AMux Bus: Connect Cmod, Cmp, Idac */
 275   1          CapSense_AMuxCH0_Init();
 276   1          CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_CMOD_CHANNEL);
 277   1          CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_CMP_VP_CHANNEL);
 278   1          #if (CapSense_CURRENT_SOURCE)
 279   1              CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_IDAC_CHANNEL);
 280   1          #endif  /* CapSense_CURRENT_SOURCE */
 281   1          
 282   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) 
                      CapSense_AMuxCH1_Init();
                      CapSense_AMuxCH1_Connect(CapSense_AMuxCH1_CMOD_CHANNEL);
                      CapSense_AMuxCH1_Connect(CapSense_AMuxCH1_CMP_VP_CHANNEL);
                      #if (CapSense_CURRENT_SOURCE)
                          CapSense_AMuxCH1_Connect(CapSense_AMuxCH1_IDAC_CHANNEL);
                      #endif  /* CapSense_CURRENT_SOURCE */
                  #endif  /* CapSense_DESIGN_TYPE */
 290   1          
 291   1          /* Int Rb */
 292   1          #if (CapSense_CURRENT_SOURCE == CapSense_EXTERNAL_RB)
                      CapSense_InitRb();
                  #endif /* (CapSense_CURRENT_SOURCE == CapSense_EXTERNAL_RB) */
 295   1          
 296   1          /* Enable window generation */
 297   1          CapSense_CONTROL_REG |= CapSense_CTRL_WINDOW_EN__CH0;
 298   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                      CapSense_CONTROL_REG |= CapSense_CTRL_WINDOW_EN__CH1;
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 6   

                  #endif  /* CapSense_DESIGN_TYPE */
 301   1          
 302   1          /* Initialize Cmp and Idac */
 303   1          CapSense_CompCH0_Init();
 304   1          #if (CapSense_CURRENT_SOURCE)
 305   1              CapSense_IdacCH0_Init();
 306   1              CapSense_IdacCH0_SetPolarity(CapSense_IdacCH0_IDIR);
 307   1              CapSense_IdacCH0_SetRange(CapSense_IDAC_RANGE_VALUE);
 308   1              CapSense_IdacCH0_SetValue(CapSense_TURN_OFF_IDAC);
 309   1          #endif  /* CapSense_CURRENT_SOURCE */
 310   1          
 311   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) 
                      CapSense_CompCH1_Init();
                      #if (CapSense_CURRENT_SOURCE)
                          CapSense_IdacCH1_Init();
                          CapSense_IdacCH1_SetPolarity(CapSense_IdacCH1_IDIR);
                          CapSense_IdacCH1_SetRange(CapSense_IDAC_RANGE_VALUE);
                          CapSense_IdacCH1_SetValue(CapSense_TURN_OFF_IDAC);
                      #endif  /* CapSense_CURRENT_SOURCE */
                  #endif  /* CapSense_DESIGN_TYPE */
 320   1          
 321   1          /* Initialize Vref if as VDAC */
 322   1          #if (CapSense_VREF_OPTIONS == CapSense_VREF_VDAC)
                      CapSense_VdacRefCH0_Init();
                      #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          CapSense_VdacRefCH1_Init();
                      #endif  /* CapSense_DESIGN_TYPE */
                  #endif  /* CapSense_VREF_OPTIONS */
 328   1      }
 329          
 330          
 331          /*******************************************************************************
 332          * Function Name: CapSense_Enable
 333          ********************************************************************************
 334          *
 335          * Summary:
 336          *  Enables active mode power template bits for number of component used within 
 337          *  CapSense.
 338          *
 339          * Parameters:
 340          *  None
 341          *
 342          * Return:
 343          *  None
 344          *
 345          *******************************************************************************/
 346          void CapSense_Enable(void) 
 347          {
 348   1          uint8 enableInterrupts;
 349   1          
 350   1          enableInterrupts = CyEnterCriticalSection();
 351   1          
 352   1          /* Enable Prescaler */
 353   1          #if (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB)
 354   1              /* Do nothing  for UDB */
 355   1          #elif (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_FF)
                      CapSense_PRESCALER_ACT_PWRMGR_REG  |= CapSense_PRESCALER_ACT_PWR_EN;
                      CapSense_PRESCALER_STBY_PWRMGR_REG |= CapSense_PRESCALER_STBY_PWR_EN;
                      
                  #else
                      /* Do nothing = config without prescaler */
                  #endif  /* (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB) */
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 7   

 362   1          
 363   1          /* Enable ScanSpeed */
 364   1          CapSense_SCANSPEED_AUX_CONTROL_REG |= CapSense_SCANSPEED_CTRL_ENABLE;
 365   1          
 366   1          /* Enable Measure CH0 */
 367   1          #if (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)
                      /* Window PWM */
                      CapSense_PWM_CH0_ACT_PWRMGR_REG  |= CapSense_PWM_CH0_ACT_PWR_EN;
                      CapSense_PWM_CH0_STBY_PWRMGR_REG |= CapSense_PWM_CH0_STBY_PWR_EN;
                      
                      /* Raw Counter */
                      CapSense_RAW_CH0_ACT_PWRMGR_REG  |= CapSense_RAW_CH0_ACT_PWR_EN;
                      CapSense_RAW_CH0_STBY_PWRMGR_REG |= CapSense_RAW_CH0_STBY_PWR_EN;
                      
                  #else
 377   1              /* Window PWM -  Do nothing */
 378   1              /* Raw Counter - Do nothing */
 379   1              
 380   1          #endif  /* (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF) */ 
 381   1          
 382   1          /* Enable Measure CH1*/
 383   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                      #if (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF)
                          /* Window PWM */
                          CapSense_PWM_CH1_ACT_PWRMGR_REG  |= CapSense_PWM_CH1_ACT_PWR_EN;
                          CapSense_PWM_CH1_STBY_PWRMGR_REG |= CapSense_PWM_CH1_STBY_PWR_EN;
                          
                          /* Raw Counter */
                          CapSense_RAW_CH1_ACT_PWRMGR_REG  |= CapSense_RAW_CH1_ACT_PWR_EN;
                          CapSense_RAW_CH1_STBY_PWRMGR_REG |= CapSense_RAW_CH1_STBY_PWR_EN;
                         
                      #else
                      /* Window PWM -  Do nothing */
                      /* Raw Counter - Do nothing */
                      
                      #endif  /* (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF) */
                  
                  #endif  /* (CapSense_DESIGN_TYPE == TWO_CHANNELS_DESIGN)*/
 400   1          
 401   1          /* Enable the Clock */
 402   1          #if (CapSense_CLOCK_SOURCE == CapSense_INTERNAL_CLOCK)
 403   1             CapSense_IntClock_Enable();
 404   1          #endif  /* CapSense_CLOCK_SOURCE */
 405   1          
 406   1          /* Setup Cmp and Idac */
 407   1          CapSense_CompCH0_Enable();
 408   1          #if (CapSense_CURRENT_SOURCE)
 409   1              CapSense_IdacCH0_Enable();
 410   1          #endif  /* CapSense_CURRENT_SOURCE */
 411   1          
 412   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) 
                      CapSense_CompCH1_Enable();
                      #if (CapSense_CURRENT_SOURCE)
                          CapSense_IdacCH1_Enable();
                      #endif  /* CapSense_CURRENT_SOURCE */
                  #endif  /* CapSense_DESIGN_TYPE */
 418   1          
 419   1          /* Enable Vref */
 420   1          #if (CapSense_VREF_OPTIONS == CapSense_VREF_VDAC)
                      CapSense_VdacRefCH0_Enable();
                      CapSense_VdacRefCH0_SetValue(CapSense_VdacRefCH0_DEFAULT_DATA);
                      #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 8   

                          CapSense_VdacRefCH1_Enable();
                          CapSense_VdacRefCH1_SetValue(CapSense_VdacRefCH1_DEFAULT_DATA);
                      #endif  /* (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) */
                  #else
 428   1              /* Enable CapSense Buf */
 429   1              CapSense_BufCH0_STBY_PWRMGR_REG |= CapSense_BufCH0_STBY_PWR_EN;
 430   1              CapSense_BufCH0_ACT_PWRMGR_REG  |= CapSense_BufCH0_ACT_PWR_EN;
 431   1              
 432   1              #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          CapSense_BufCH1_STBY_PWRMGR_REG |= CapSense_BufCH1_STBY_PWR_EN;
                          CapSense_BufCH1_ACT_PWRMGR_REG  |= CapSense_BufCH1_ACT_PWR_EN;
                      #endif  /* (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) */
 436   1          #endif  /* (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS) */
 437   1          
 438   1          /* Set reference on AMux Bus */
 439   1          #if (CapSense_VREF_OPTIONS == CapSense_VREF_VDAC)
                      /* Connect Vdac to AMux Bus */
                      CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_VREF_CHANNEL);
                      #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          CapSense_AMuxCH1_Connect(CapSense_AMuxCH1_VREF_CHANNEL);
                      #endif  /* (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) */
                      
                  #else
 447   1              /* Enable CapSense Buf */
 448   1              CapSense_BufCH0_CAPS_CFG0_REG |= CapSense_CSBUF_ENABLE;
 449   1              
 450   1              #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          CapSense_BufCH1_CAPS_CFG0_REG |= CapSense_CSBUF_ENABLE;
                      #endif  /* (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) */
 453   1          #endif  /* (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS)*/
 454   1          
 455   1          CyExitCriticalSection(enableInterrupts);
 456   1          
 457   1          /* Enable interrupt */
 458   1          CyIntEnable(CapSense_IsrCH0_ISR_NUMBER);
 459   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) 
                      CyIntEnable(CapSense_IsrCH1_ISR_NUMBER);
                  #endif  /* CapSense_DESIGN_TYPE */
 462   1          
 463   1          /* Set CapSense Enable state */
 464   1          CapSense_CONTROL_REG |= CapSense_CTRL_CAPSENSE_EN;
 465   1      }
 466          
 467          
 468          /*******************************************************************************
 469          * Function Name: CapSense_Start
 470          ********************************************************************************
 471          *
 472          * Summary:
 473          *  Initializes registers and starts the CSD method of CapSense component. Reset 
 474          *  all sensors to an inactive state. Enables interrupts for sensors scanning.
 475          *  When Auto Tuning (SmartSense) mode is selected the tuning procedure is 
 476          *  applied for all sensors.
 477          *
 478          * Parameters:
 479          *  None
 480          *
 481          * Return:
 482          *  None
 483          *
 484          * Global Variables:
 485          *  CapSense_initVar - used to check initial configuration, modified on 
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 9   

 486          *  first function call.
 487          *  CapSense_lowLevelTuningDone - used to notify the Tuner GUI that 
 488          *  tuning of scanning parameters are done.
 489          *
 490          * Reentrant:
 491          *  No
 492          *
 493          * Note:
 494          *  All widgets are enabled by default except proximity widgets. Proximity widgets 
 495          *  must be manually enabled as their long scan time is incompatible 
 496          *  with the fast response required of other widget types. 
 497          *
 498          *******************************************************************************/
 499          void CapSense_Start(void)  
 500          {
 501   1          if (CapSense_initVar == 0u)
 502   1          {
 503   2              CapSense_Init();
 504   2              CapSense_initVar = 1u;
 505   2          }
 506   1          CapSense_Enable();
 507   1          
 508   1          /* AutoTunning start */
 509   1          #if (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)
                      /* AutoTune by sensor or pair of sensor basis */
                      CapSense_AutoTune();
                      CapSense_lowLevelTuningDone = 1u;
                  #endif /* (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
 514   1      }
 515          
 516          
 517          /*******************************************************************************
 518          * Function Name: CapSense_Stop
 519          ********************************************************************************
 520          *
 521          * Summary:
 522          *  Stops the sensors scanner, disables internal interrupts, and resets all 
 523          *  sensors to an inactive state. Disables Active mode power template bits for 
 524          *  number of component used within CapSense.
 525          *
 526          * Parameters:
 527          *  None
 528          *
 529          * Return:
 530          *  None
 531          *
 532          * Side Effects:
 533          *  This function should be called after scans will be completed.
 534          *
 535          *******************************************************************************/
 536          void CapSense_Stop(void) 
 537          {
 538   1          /* Stop Capsensing */
 539   1          CapSense_CONTROL_REG &= (uint8)(~CapSense_CTRL_START);
 540   1          
 541   1          /* Disable interrupt */
 542   1          CyIntDisable(CapSense_IsrCH0_ISR_NUMBER);
 543   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) 
                      CyIntDisable(CapSense_IsrCH1_ISR_NUMBER);
                  #endif  /* CapSense_DESIGN_TYPE */
 546   1          
 547   1          /* Clear all sensors */
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 10  

 548   1          CapSense_ClearSensors();
 549   1          
 550   1          /* Disable Prescaler */
 551   1          #if (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB)
 552   1              /* Do nothing  for UDB */
 553   1          #elif (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_FF)        
                      CapSense_PRESCALER_ACT_PWRMGR_REG  &= ~CapSense_PRESCALER_ACT_PWR_EN;
                      CapSense_PRESCALER_STBY_PWRMGR_REG &= ~CapSense_PRESCALER_STBY_PWR_EN;
                      
                  #else
                      /* Do nothing = config without prescaler */
                  #endif  /* (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB) */
 560   1          
 561   1          /* Disable ScanSpeed */
 562   1          CapSense_SCANSPEED_AUX_CONTROL_REG &= (uint8)(~CapSense_SCANSPEED_CTRL_ENABLE);
 563   1          
 564   1          /* Disable Measure CH0 */
 565   1          #if (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)
                      /* Window PWM */
                      CapSense_PWM_CH0_ACT_PWRMGR_REG  &= ~CapSense_PWM_CH0_ACT_PWR_EN;
                      CapSense_PWM_CH0_STBY_PWRMGR_REG &= ~CapSense_PWM_CH0_STBY_PWR_EN;
              
                      /* Raw Counter */
                      CapSense_RAW_CH0_ACT_PWRMGR_REG  &= ~CapSense_RAW_CH0_ACT_PWR_EN;
                      CapSense_RAW_CH0_STBY_PWRMGR_REG &= ~CapSense_RAW_CH0_STBY_PWR_EN;
              
                  #else
 575   1              /* Window PWM -  Do nothing */
 576   1              /* Raw Counter - Do nothing */
 577   1              
 578   1          #endif  /* (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF) */ 
 579   1          
 580   1          /* Disable Measure CH1 */
 581   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                      #if (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF)
                          /* Window PWM */
                          CapSense_PWM_CH1_ACT_PWRMGR_REG  &= ~CapSense_PWM_CH1_ACT_PWR_EN;
                          CapSense_PWM_CH1_STBY_PWRMGR_REG &= ~CapSense_PWM_CH1_STBY_PWR_EN;
                  
                          /* Raw Counter */
                          CapSense_RAW_CH1_ACT_PWRMGR_REG  &= ~CapSense_RAW_CH1_ACT_PWR_EN;
                          CapSense_RAW_CH1_STBY_PWRMGR_REG &= ~CapSense_RAW_CH1_STBY_PWR_EN;
                         
                      #else
                      /* Window PWM -  Do nothing */
                      /* Raw Counter - Do nothing */
                      
                      #endif  /* (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF) */
                  
                  #endif  /* (CapSense_DESIGN_TYPE == TWO_CHANNELS_DESIGN)*/
 598   1          
 599   1          /* Disable the Clock */
 600   1          #if (CapSense_CLOCK_SOURCE == CapSense_INTERNAL_CLOCK)
 601   1             CapSense_IntClock_Stop();
 602   1          #endif  /* CapSense_CLOCK_SOURCE */
 603   1          
 604   1          /* Disable power from Cmp and Idac */
 605   1          CapSense_CompCH0_Stop();
 606   1          #if (CapSense_CURRENT_SOURCE)
 607   1              CapSense_IdacCH0_Stop();
 608   1          #endif  /* CapSense_CURRENT_SOURCE */
 609   1          
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 11  

 610   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) 
                      CapSense_CompCH1_Stop();
                      #if (CapSense_CURRENT_SOURCE)
                          CapSense_IdacCH1_Stop();
                      #endif  /* CapSense_CURRENT_SOURCE */
                  #endif  /* CapSense_DESIGN_TYPE */    
 616   1          
 617   1          /* Disable Vref if as VDAC */
 618   1          #if (CapSense_VREF_OPTIONS == CapSense_VREF_VDAC)
                      CapSense_VdacRefCH0_Stop();
                      #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          CapSense_VdacRefCH1_Stop();
                      #endif  /* CapSense_DESIGN_TYPE */
                  #endif  /* CapSense_VREF_OPTIONS */
 624   1      
 625   1          #if (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS)
                      /* The Idac turn off before */
                  #else
 628   1              /* Enable CapSense Buf */
 629   1              CapSense_BufCH0_CAPS_CFG0_REG &= (uint8)(~CapSense_CSBUF_ENABLE);
 630   1              CapSense_BufCH0_ACT_PWRMGR_REG &= (uint8)(~CapSense_BufCH0_ACT_PWR_EN);
 631   1              CapSense_BufCH0_STBY_PWRMGR_REG &= (uint8)(~CapSense_BufCH0_STBY_PWR_EN);
 632   1              
 633   1              #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          CapSense_BufCH1_CAPS_CFG0_REG &= (uint8)(~CapSense_CSBUF_ENABLE);
                          CapSense_BufCH1_ACT_PWRMGR_REG &= (uint8)(~CapSense_BufCH1_ACT_PWR_EN);
                          CapSense_BufCH1_STBY_PWRMGR_REG &= (uint8)(~CapSense_BufCH1_STBY_PWR_EN);
                      #endif  /*(CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) */
 638   1          #endif  /* (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS) */
 639   1          
 640   1          /* Set CapSense Disable state */
 641   1          CapSense_CONTROL_REG &= (uint8)(~CapSense_CTRL_CAPSENSE_EN);
 642   1      }
 643          
 644          
 645          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
 646              /*******************************************************************************
 647              * Function Name: CapSense_FindNextSensor
 648              ********************************************************************************
 649              *
 650              * Summary:
 651              *  Finds next sensor to scan. 
 652              *
 653              * Parameters:
 654              *  snsIndex:  Current index of sensor.
 655              *
 656              * Return:
 657              *  Returns the next sensor index to scan.
 658              *
 659              * Global Variables:
 660              *  CapSense_sensorEnableMask[ ] - used to store bit masks of enabled 
 661              *  sensors.
 662              *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 0
 663              *  through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 664              *  CapSense_sensorEnableMask[1] contains the masked bits for sensors 
 665              *  8 through 15 (if needed), and so on.
 666              *    0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 667              *    1 - sensor scans by CapSense_ScanEnabledWidgets().
 668              *
 669              * Note: 
 670              *  This function has effect on current scanning scanning and should not
 671              *  be used outisde of component.
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 12  

 672              *
 673              *******************************************************************************/
 674              uint8 CapSense_FindNextSensor(uint8 snsIndex) CYREENTRANT
 675              {
 676   1              uint8 pos;
 677   1              uint8 enMask;
 678   1              
 679   1              /* Check if sensor enabled */
 680   1              do
 681   1              {
 682   2                  /* Proceed with the next sensor */
 683   2                  snsIndex++;
 684   2                  if(snsIndex == CapSense_TOTAL_SENSOR_COUNT)
 685   2                  {
 686   3                      break;
 687   3                  }
 688   2                  pos = (snsIndex >> 3u);
 689   2                  enMask = 0x01u << (snsIndex & 0x07u);
 690   2              }    
 691   1              while((CapSense_sensorEnableMask[pos] & enMask) == 0u);
 692   1              
 693   1              return snsIndex;
 694   1          }
 695           #endif  /* CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN */
 696           
 697           
 698          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                  /*******************************************************************************
                  * Function Name: CapSense_FindNextPair
                  ********************************************************************************
                  *
                  * Summary:
                  *  Finds next pair or sensor to scan. Sets condition bits to skip scanning.
                  *  
                  * Parameters:
                  *  snsIndex:  Current index pair of sensors.
                  *
                  * Return:
                  *  Returns the next pair of sensors index to scan.
                  *
                  * Global Variables:
                  *  CapSense_sensorEnableMask[ ] - used to store bit masks of enabled 
                  *  sensors.
                  *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 0
                  *  through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
                  *  CapSense_sensorEnableMask[1] contains the masked bits for sensors 
                  *  8 through 15 (if needed), and so on.
                  *    0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
                  *    1 - sensor scans by CapSense_ScanEnabledWidgets().
                  *
                  * Note: 
                  *  This function has effect on control signals set for scanning and should not
                  *  be used outisde of component.
                  *
                  *******************************************************************************/
                  uint8 CapSense_FindNextPair(uint8 snsIndex) CYREENTRANT
                  {
                      uint8 posCh;
                      uint8 enMaskCh;
                      uint8 newRegValue;
                      uint8 indexCh0 = snsIndex;
                      uint8 indexCh1 = snsIndex + CapSense_TOTAL_SENSOR_COUNT__CH0;
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 13  

                      
                      /* Find enabled sensor on channel 0 */
                      do
                      {
                          /* Procced the scanning */
                          indexCh0++;
                          if (indexCh0 >= CapSense_TOTAL_SENSOR_COUNT__CH0)
                          {
                              /* Lets hadle now all from CH1 */
                              indexCh0 = CapSense_END_OF_SCAN__CH0;
                              break;
                          }
                          
                          posCh = (indexCh0 >> 3u);
                          enMaskCh = 0x01u << (indexCh0 & 0x07u);
                      }
                      while((CapSense_sensorEnableMask[posCh] & enMaskCh) == 0u);
                      
                      /* Find enabled sensor on channel 1 */
                      do
                      {
                          /* Procced the scanning */
                          indexCh1++;        
                          if (indexCh1 >= CapSense_TOTAL_SENSOR_COUNT)
                          {
                              /* Lets hadle now all from CH0 */
                              indexCh1 = CapSense_END_OF_SCAN__CH1;
                              break;
                          }
                          
                          posCh = (indexCh1 >> 3u);
                          enMaskCh = 0x01u << (indexCh1 & 0x07u);
                      } 
                      while((CapSense_sensorEnableMask[posCh] & enMaskCh) == 0u);
                      
                      indexCh1 -= CapSense_TOTAL_SENSOR_COUNT__CH0;
                      
                      /* Find the pair to scan */
                      if(indexCh0 == indexCh1)
                      {
                          /* Scans TWO Channels */
                          snsIndex = indexCh0;
                          
                          CapSense_CONTROL_REG |= (CapSense_CTRL_WINDOW_EN__CH0 | 
                                                           CapSense_CTRL_WINDOW_EN__CH1);
                      }
                      else if(indexCh0 < indexCh1)
                      {
                         /* Scans Channel ONE only */
                         snsIndex = indexCh0;
                         
                          newRegValue = CapSense_CONTROL_REG;
                          newRegValue |= CapSense_CTRL_WINDOW_EN__CH0;
                          newRegValue &= ~CapSense_CTRL_WINDOW_EN__CH1;
                          CapSense_CONTROL_REG = newRegValue;
                      }
                      else
                      {
                          /* Scans Channel TWO only */
                          snsIndex = indexCh1;
                          
                          newRegValue = CapSense_CONTROL_REG;
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 14  

                          newRegValue |= CapSense_CTRL_WINDOW_EN__CH1;
                          newRegValue &= ~CapSense_CTRL_WINDOW_EN__CH0;
                          CapSense_CONTROL_REG = newRegValue;
                      }
                      
                      return (snsIndex);
                  }
              #endif  /* CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN */
 804          
 805          
 806          /*******************************************************************************
 807          * Function Name: CapSense_SetScanSlotSettings
 808          ********************************************************************************
 809          *
 810          * Summary:
 811          *  Sets the scan settings of the selected scan slot (sensor or pair of sensors). 
 812          *  The scan settings incorporate IDAC value (for IDAC configurations) for every 
 813          *  sensor and resolution. The resolution is the same for all sensors within 
 814          *  widget.
 815          *
 816          * Parameters:
 817          *  slot:  Scan slot number (sensor or pair of sensors).
 818          *
 819          * Return:
 820          *  None
 821          *
 822          * Global Variables:
 823          *  CapSense_idacSettings[] - used to store idac value for every sensor.
 824          *  CapSense_widgetResolution[] - used to store scan resolution of every 
 825          *  widget.
 826          *
 827          *******************************************************************************/
 828          void CapSense_SetScanSlotSettings(uint8 slot) CYREENTRANT
 829          {
 830   1          uint8 widget;
 831   1          
 832   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
 833   1              /* Define widget sensor belongs to */
 834   1              widget = CapSense_widgetNumber[slot];
 835   1              
 836   1              /* Set Idac Value */
 837   1              #if (CapSense_CURRENT_SOURCE)
 838   1                  CapSense_IdacCH0_SetValue(CapSense_idacSettings[slot]);
 839   1              #endif  /* CapSense_CURRENT_SOURCE */
 840   1              
 841   1              /* Window PWM */
 842   1              #if (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)
                          CY_SET_REG16(CapSense_PWM_CH0_PERIOD_PTR,
                              ((uint16) CapSense_widgetResolution[widget] << 8u) | CapSense_MEASURE_FULL_RANGE_LOW);
                      #else
 846   1                  CapSense_PWM_CH0_PERIOD_HI_REG = CapSense_widgetResolution[widget];
 847   1              #endif  /* (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF) */ 
 848   1      
 849   1              #if ( (CapSense_MULTIPLE_PRESCALER_ENABLED) || \
 850   1                    (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) )
 851   1                  CapSense_SetPrescaler(CapSense_analogSwitchDivider[slot]);
 852   1              #elif (CapSense_PRESCALER_OPTIONS)
                          CapSense_SetPrescaler(CapSense_analogSwitchDivider);
                      #endif /* ((CapSense_MULTIPLE_PRESCALER_ENABLED) || \
                             *   (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING))
                             */
 857   1      
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 15  

 858   1          #else
                      if(slot < CapSense_TOTAL_SENSOR_COUNT__CH0)
                      {
                          /* Define widget sensor belongs to */
                          widget = CapSense_widgetNumber[slot];
                          
                          /* Set Idac Value */
                          #if (CapSense_CURRENT_SOURCE)
                              CapSense_IdacCH0_SetValue(CapSense_idacSettings[slot]);
                          #endif  /* CapSense_CURRENT_SOURCE */
                          
                          /* Set Pwm Resolution */
                          #if (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)
                              CY_SET_REG16(CapSense_PWM_CH0_PERIOD_PTR,
                                ((uint16) CapSense_widgetResolution[widget] << 8u) | CapSense_MEASURE_FULL_RANGE_LOW);
                          #else
                              CapSense_PWM_CH0_PERIOD_HI_REG = CapSense_widgetResolution[widget];
                          #endif  /* (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)*/ 
                      }
                      
                      if(slot < CapSense_TOTAL_SENSOR_COUNT__CH1)
                      {
                          widget = CapSense_widgetNumber[slot+CapSense_TOTAL_SENSOR_COUNT__CH0];
                      
                          /* Set Idac Value */
                          #if (CapSense_CURRENT_SOURCE)
                              CapSense_IdacCH1_SetValue(CapSense_idacSettings[slot+
                                                                                           CapSense_TOTAL_SENSOR_COUNT__
             -CH0]);
                          #endif  /* CapSense_CURRENT_SOURCE */
                          
                          /* Set Pwm Resolution */
                          #if (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF)
                              CY_SET_REG16(CapSense_PWM_CH1_PERIOD_PTR,
                                ((uint16) CapSense_widgetResolution[widget] << 8u) | CapSense_MEASURE_FULL_RANGE_LOW);
                          #else
                              CapSense_PWM_CH1_PERIOD_HI_REG = CapSense_widgetResolution[widget];
                          #endif  /* (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF)*/ 
                      }
              
                      #if ( (CapSense_MULTIPLE_PRESCALER_ENABLED) || \
                            (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) )
                          CapSense_SetPrescaler(CapSense_analogSwitchDivider[slot]);
                      #elif (CapSense_PRESCALER_OPTIONS)
                          CapSense_SetPrescaler(CapSense_analogSwitchDivider);
                      #endif /* ((CapSense_MULTIPLE_PRESCALER_ENABLED) || \
                             *   (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING))
                             */
              
                  #endif  /* CapSense_DESIGN_TYPE */
 907   1      }
 908          
 909          
 910          /*******************************************************************************
 911          * Function Name: CapSense_ScanSensor
 912          ********************************************************************************
 913          *
 914          * Summary:
 915          *  Sets scan settings and starts scanning a sensor or pair of combined sensors
 916          *  on each channel. If two channels are configured, two sensors may be scanned 
 917          *  at the same time. After scanning is complete the isr copies the measured 
 918          *  sensor raw data to the global array. Use of the isr ensures this function 
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 16  

 919          *  is non-blocking. Each sensor has a unique number within the sensor array. 
 920          *  This number is assigned by the CapSense customizer in sequence.
 921          *
 922          * Parameters:
 923          *  sensor:  Sensor number.
 924          *
 925          * Return:
 926          *  None
 927          *
 928          * Global Variables:
 929          *  CapSense_csv - used to provide status and mode of scanning process. 
 930          *  Sets busy status(scan in progress) and mode of scan as single scan.
 931          *  For two channel design the additional bits are set to define if scan a 
 932          *  pair of sensors or single one.
 933          *  CapSense_sensorIndex - used to store sensor scanning sensor number.
 934          *  Sets to provided sensor argument.
 935          *
 936          * Reentrant:
 937          *  No
 938          *
 939          *******************************************************************************/
 940          void CapSense_ScanSensor(uint8 sensor)  
 941          {
 942   1          /* Clears status/control variable and set sensorIndex */
 943   1          CapSense_csv = 0u;
 944   1          CapSense_sensorIndex = sensor;
 945   1          
 946   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
 947   1              /* Start of sensor scan */
 948   1              CapSense_csv = (CapSense_SW_STS_BUSY | CapSense_SW_CTRL_SINGLE_SCAN);
 949   1              CapSense_PreScan(sensor);
 950   1              
 951   1          #else
                      /* CH0: check end of scan conditions */
                      if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH0)
                      {
                          CapSense_CONTROL_REG |= CapSense_CTRL_WINDOW_EN__CH0;
                      }
                      else
                      {
                          CapSense_CONTROL_REG &= ~CapSense_CTRL_WINDOW_EN__CH0;
                      }
                      
                      /* CH1: check end of scan conditions */
                      if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH1)
                      {
                          CapSense_CONTROL_REG |= CapSense_CTRL_WINDOW_EN__CH1;
                      }
                      else
                      {
                          CapSense_CONTROL_REG &= ~CapSense_CTRL_WINDOW_EN__CH1;
                      }
                      
                      /* Start sensor scan */
                      if( ((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH0) != 0u) || 
                          ((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH1) != 0u) )
                      {
                      
                          CapSense_csv |= (CapSense_SW_STS_BUSY | CapSense_SW_CTRL_SINGLE_SCAN);
                          CapSense_PreScan(sensor);
                      }
                      
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 17  

                  #endif  /* CapSense_DESIGN_TYPE */
 982   1      }
 983          
 984          
 985          /*******************************************************************************
 986          * Function Name: CapSense_ScanEnableWidgets
 987          ********************************************************************************
 988          *
 989          * Summary:
 990          *  Scans all of the enabled widgets. Starts scanning a sensor or pair of sensors 
 991          *  within enabled widget. The isr proceeding scanning next sensor or pair till 
 992          *  all enabled widgets will be scanned. Use of the isr ensures this function is 
 993          *  non-blocking. All widgets are enabled by default except proximity widgets. 
 994          *  Proximity widgets must be manually enabled as their long scan time is 
 995          *  incompatible with fast response desired of other widget types.
 996          *
 997          * Parameters:
 998          *  None
 999          *
1000          * Return:
1001          *  None
1002          *
1003          * Global Variables:
1004          *  CapSense_csv - used to provide status and mode of scanning process. 
1005          *  Sets busy status(scan in progress) and clears single scan mode.
1006          *  For two channel design the additional bits are set to define if scan a 
1007          *  pair of sensors or single one. 
1008          *  CapSense_sensorIndex - used to store sensor scanning sensor number.
1009          *  Sets to 0xFF and provided to function CapSense_FindNextSensor or
1010          *  CapSense_FindNextPair, these functions starts with sensor index
1011          *  increment and overflow of uint8 gives desired index 0.
1012          *
1013          * Reentrant:
1014          *  No
1015          *
1016          *******************************************************************************/
1017          void CapSense_ScanEnabledWidgets(void) 
1018          {
1019   1          /* Clears status/control variable and set sensorIndex */
1020   1          CapSense_csv = 0u;
1021   1          CapSense_sensorIndex = 0xFFu;
1022   1          
1023   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
1024   1              /* Find next sensor */
1025   1              CapSense_sensorIndex = CapSense_FindNextSensor(CapSense_sensorIndex);
1026   1      
1027   1              /* Check end of scan condition */
1028   1              if(CapSense_sensorIndex < CapSense_TOTAL_SENSOR_COUNT)
1029   1              {
1030   2                  CapSense_csv |= CapSense_SW_STS_BUSY;
1031   2                  CapSense_PreScan(CapSense_sensorIndex);
1032   2              }
1033   1              
1034   1          #else
                      /* Find next sensor and set proper control register */
                      CapSense_sensorIndex = CapSense_FindNextPair(CapSense_sensorIndex);
                      
                      /* Start sensor scan */
                      if((CapSense_sensorIndex < CapSense_TOTAL_SENSOR_COUNT__CH0) || 
                         (CapSense_sensorIndex < CapSense_TOTAL_SENSOR_COUNT__CH1))
                      {
                          CapSense_csv |= CapSense_SW_STS_BUSY;
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 18  

                          CapSense_PreScan(CapSense_sensorIndex);
                      }
                      
                  #endif  /* CapSense_DESIGN_TYPE */
1047   1      }
1048          
1049          
1050          /*******************************************************************************
1051          * Function Name: CapSense_IsBusy
1052          ********************************************************************************
1053          *
1054          * Summary:
1055          *  Returns the state of CapSense component. The 1 means that scanning in 
1056          *  progress and 0 means that scanning is complete.
1057          *
1058          * Parameters:
1059          *  None
1060          *
1061          * Return:
1062          *  Returns the state of scanning. 1 - scanning in progress, 0 - scanning 
1063          *  completed.
1064          *
1065          * Global Variables:
1066          *  CapSense_csv - used to provide status and mode of scanning process. 
1067          *  Checks the busy status.
1068          *
1069          *******************************************************************************/
1070          uint8 CapSense_IsBusy(void) 
1071          {
1072   1          return ((0u != (CapSense_csv & CapSense_SW_STS_BUSY)) ? 1u : 0u);
1073   1      }
1074          
1075          
1076          /*******************************************************************************
1077          * Function Name: CapSense_ReadSensorRaw
1078          ********************************************************************************
1079          *
1080          * Summary:
1081          *  Returns scan sensor raw data from the CapSense_sensorRaw[] array. 
1082          *  Each scan sensor has a unique number within the sensor array. This number 
1083          *  is assigned by the CapSense customizer in sequence.
1084          *
1085          * Parameters:
1086          *  sensor:  Sensor number.
1087          *
1088          * Return:
1089          *  Returns current raw data value for defined sensor number.
1090          *
1091          * Global Variables:
1092          *  CapSense_sensorRaw[] - used to store sensors raw data.
1093          *
1094          *******************************************************************************/
1095          uint16 CapSense_ReadSensorRaw(uint8 sensor) 
1096          {
1097   1          return (CapSense_sensorRaw[sensor]);
1098   1      }
1099          
1100          
1101          /*******************************************************************************
1102          * Function Name: CapSense_ClearSensors
1103          ********************************************************************************
1104          *
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 19  

1105          * Summary:
1106          *  Resets all sensors to the non-sampling state by sequentially disconnecting
1107          *  all sensors from Analog MUX Bus and putting them to inactive state.
1108          *
1109          * Parameters:
1110          *  None
1111          *
1112          * Return:
1113          *  None
1114          *
1115          *******************************************************************************/
1116          void CapSense_ClearSensors(void) 
1117          {
1118   1          uint8 i;
1119   1         
1120   1          for (i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
1121   1          {
1122   2              CapSense_DisableScanSlot(i);
1123   2          }
1124   1      }
1125          
1126          
1127          #if (CapSense_IS_COMPLEX_SCANSLOTS)
                  /*******************************************************************************
                  * Function Name: CapSense_EnableScanSlot
                  ********************************************************************************
                  *
                  * Summary:
                  *  Configures the selected slot to measure during the next measurement 
                  *  cycle. The corresponding pin/pins are set to Analog High-Z mode and 
                  *  connected to the Analog Mux Bus. This also enables the comparator function.
                  *
                  * Parameters:
                  *  slot:  Slot number.
                  *
                  * Return:
                  *  None
                  *
                  * Global Constants:
                  *  CapSense_portTable[]  - used to store the port number that pin 
                  *  belongs to for every sensor.
                  *  CapSense_maskTable[]  - used to store the pin within the port for 
                  *  every sensor.
                  *  CapSense_indexTable[] - used to store indexes of complex sensors.
                  *  The offset and position in this array are stored in port and mask table for 
                  *  complex sensors.
                  *  The bit 7 (msb) is used to define the sensor type: single or complex.
                  *
                  *******************************************************************************/
                  void CapSense_EnableScanSlot(uint8 slot) CYREENTRANT
                  {
                      uint8 j;
                      uint8 snsNumber;
                      const uint8 CYCODE *index;
                      /* Read the sensor type: single or complex */
                      uint8 snsType = CapSense_portTable[slot];
                      
                      /* Check if sensor is complex */
                      if ((snsType & CapSense_COMPLEX_SS_FLAG) == 0u)
                      {
                          /* Enable sensor (signle) */
                          CapSense_EnableSensor(slot);
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 20  

                      }
                      else
                      {
                          /* Enable complex sensor */
                          snsType &= ~CapSense_COMPLEX_SS_FLAG;
                          index = &CapSense_indexTable[snsType];
                          snsNumber = CapSense_maskTable[slot];
                                      
                          for (j=0u; j < snsNumber; j++)
                          {
                              CapSense_EnableSensor(index[j]);
                          }
                      } 
                  }
                  
                  
                  /*******************************************************************************
                  * Function Name: CapSense_DisableScanSlot
                  ********************************************************************************
                  *
                  * Summary:
                  *  Disables the selected slot. The corresponding pin/pis is/are disconnected 
                  *  from the Analog Mux Bus and connected to GND, High_Z or Shield electrode.
                  *
                  * Parameters:
                  *  slot:  Slot number.
                  *
                  * Return:
                  *  None
                  *
                  * Global Variables:
                  *  CapSense_portTable[]  - used to store the port number that pin 
                  *  belongs to for every sensor.
                  *  CapSense_maskTable[]  - used to store the pin within the port for 
                  *  every sensor.
                  *  CapSense_indexTable[] - used to store indexes of complex sensors.
                  *  The offset and position in this array are stored in port and mask table for 
                  *  complex sensors.
                  *  The 7bit(msb) is used to define the sensor type: single or complex.
                  *
                  *******************************************************************************/
                  void CapSense_DisableScanSlot(uint8 slot) CYREENTRANT
                  {
                      uint8 j;
                      uint8 snsNumber;
                      const uint8 CYCODE *index;
                      /* Read the sensor type: single or complex */
                      uint8 snsType = CapSense_portTable[slot];
                      
                      /* Check if sensor is complex */
                      if ((snsType & CapSense_COMPLEX_SS_FLAG) == 0u)
                      {
                          /* Disable sensor (signle) */
                          CapSense_DisableSensor(slot);
                      }
                      else
                      {
                          /* Disable complex sensor */
                          snsType &= ~CapSense_COMPLEX_SS_FLAG;
                          index = &CapSense_indexTable[snsType];
                          snsNumber = CapSense_maskTable[slot];
                                      
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 21  

                          for (j=0u; j < snsNumber; j++)
                          {
                              CapSense_DisableSensor(index[j]);
                          }
                      } 
                  }
              #endif  /* CapSense_IS_COMPLEX_SCANSLOTS */
1236          
1237          
1238          /*******************************************************************************
1239          * Function Name: CapSense_EnableSensor
1240          ********************************************************************************
1241          *
1242          * Summary:
1243          *  Configures the selected sensor to measure during the next measurement cycle.
1244          *  The corresponding pins are set to Analog High-Z mode and connected to the
1245          *  Analog Mux Bus. This also enables the comparator function.
1246          *
1247          * Parameters:
1248          *  sensor:  Sensor number.
1249          *
1250          * Return:
1251          *  None
1252          *
1253          * Global Variables:
1254          *  CapSense_portTable[] - used to store the port number that pin 
1255          *  belongs to for every sensor.
1256          *  CapSense_maskTable[] - used to store the pin within the port for 
1257          *  every sensor.
1258          *  CapSense_csTable[]   - used to store the pointers to CAPS_SEL 
1259          *  registers for every port.
1260          *  CapSense_pcTable[]   - used to store the pointers to PC pin 
1261          *  register for every sensor.
1262          *  CapSense_amuxIndex[] - used to store corrected AMUX index when 
1263          *  complex sensors are defeined.
1264          *
1265          *******************************************************************************/
1266          void CapSense_EnableSensor(uint8 sensor) CYREENTRANT
1267          {
1268   1          uint8 port = CapSense_portTable[sensor];
1269   1          uint8 mask = CapSense_maskTable[sensor];
1270   1          
1271   1          #if ((CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) && \
1272   1               (CapSense_IS_COMPLEX_SCANSLOTS))
                      uint8 amuxCh = CapSense_amuxIndex[sensor];
                  #endif  /* ((CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) && \
                          *   (CapSense_IS_COMPLEX_SCANSLOTS))
                          */
1277   1          
1278   1          /* Make sensor High-Z */
1279   1          *CapSense_pcTable[sensor] = CapSense_PRT_PC_HIGHZ;
1280   1          
1281   1          /* Connect to DSI output */
1282   1              if(port == 15u)
1283   1              {
1284   2                      port = 7u;
1285   2              }
1286   1          *CapSense_csTable[port] |= mask;
1287   1          
1288   1          /* Connect to AMUX */
1289   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
1290   1              #if (CapSense_IS_COMPLEX_SCANSLOTS)
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 22  

                          CapSense_AMuxCH0_Connect(CapSense_amuxIndex[sensor]);
                      #else
1293   1                  CapSense_AMuxCH0_Connect(sensor);
1294   1              #endif  /* CapSense_IS_COMPLEX_SCANSLOTS */
1295   1                      
1296   1          #else
                      #if (CapSense_IS_COMPLEX_SCANSLOTS)
                          if ((amuxCh & CapSense_CHANNEL1_FLAG) == 0u)
                          {
                              CapSense_AMuxCH0_Connect(amuxCh);
                          } 
                          else
                          {
                              amuxCh &= ~ CapSense_CHANNEL1_FLAG;
                              CapSense_AMuxCH1_Connect(amuxCh);
                          }
                          
                      #else
                          if (sensor < CapSense_TOTAL_SENSOR_COUNT__CH0) 
                          {
                              CapSense_AMuxCH0_Connect(sensor);
                          } 
                          else
                          {
                              CapSense_AMuxCH1_Connect(sensor - CapSense_TOTAL_SENSOR_COUNT__CH0);
                          }
                          
                      #endif  /* CapSense_IS_COMPLEX_SCANSLOTS */
                      
                  #endif  /* CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN */
1321   1      }
1322          
1323          
1324          /*******************************************************************************
1325          * Function Name: CapSense_DisableSensor
1326          ********************************************************************************
1327          *
1328          * Summary:
1329          *  Disables the selected sensor. The corresponding pin is disconnected from the
1330          *  Analog Mux Bus and connected to GND, High_Z or Shield electrode.
1331          *
1332          * Parameters:
1333          *  sensor:  Sensor number
1334          *
1335          * Return:
1336          *  None
1337          *
1338          * Global Variables:
1339          *  CapSense_portTable[] - used to store the port number that pin 
1340          *  belongs to for every sensor.
1341          *  CapSense_maskTable[] - used to store the pin within the port for 
1342          *  every sensor.
1343          *  CapSense_csTable[]   - used to store the pointers to CAPS_SEL 
1344          *  registers for every port.
1345          *  CapSense_pcTable[]   - used to store the pointers to PC pin 
1346          *  register for every sensor.
1347          *  CapSense_amuxIndex[] - used to store corrected AMUX index when 
1348          *  complex sensors are defeined.
1349          *
1350          *******************************************************************************/
1351          void CapSense_DisableSensor(uint8 sensor) CYREENTRANT
1352          {
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 23  

1353   1          uint8 port = CapSense_portTable[sensor];
1354   1          uint8 mask = CapSense_maskTable[sensor];
1355   1          
1356   1          #if ((CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) && \
1357   1               (CapSense_IS_COMPLEX_SCANSLOTS))
                      uint8 amuxCh = CapSense_amuxIndex[sensor];
                  #endif  /* ((CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) && \
                          *   (CapSense_IS_COMPLEX_SCANSLOTS))
                          */
1362   1          
1363   1          /* Disconnect from AMUX */
1364   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
1365   1              #if (CapSense_IS_COMPLEX_SCANSLOTS)
                          CapSense_AMuxCH0_Disconnect(CapSense_amuxIndex[sensor]);
                      #else
1368   1                  CapSense_AMuxCH0_Disconnect(sensor);
1369   1              #endif  /* CapSense_IS_COMPLEX_SCANSLOTS */
1370   1                      
1371   1          #else
                      #if (CapSense_IS_COMPLEX_SCANSLOTS)
                          if ((amuxCh & CapSense_CHANNEL1_FLAG) == 0u)
                          {
                              CapSense_AMuxCH0_Disconnect(amuxCh);
                          } 
                          else
                          {
                              amuxCh &= ~ CapSense_CHANNEL1_FLAG;
                              CapSense_AMuxCH1_Disconnect(amuxCh);
                          }
                          
                      #else
                          if (sensor < CapSense_TOTAL_SENSOR_COUNT__CH0) 
                          {
                              CapSense_AMuxCH0_Disconnect(sensor);
                          } 
                          else
                          {
                              CapSense_AMuxCH1_Disconnect(sensor - CapSense_TOTAL_SENSOR_COUNT__CH0);
                          }
                          
                      #endif  /* CapSense_IS_COMPLEX_SCANSLOTS */
                      
                  #endif  /* CapSense_DESIGN_TYPE */
1396   1          
1397   1          /* Disconnect from DSI output */
1398   1              if(port == 15u)
1399   1              {
1400   2                      port = 7u;
1401   2              }
1402   1          *CapSense_csTable[port] &= (uint8)~mask;
1403   1          
1404   1          /* Set sensor to inactive state */
1405   1          #if (CapSense_CONNECT_INACTIVE_SNS == CapSense_CIS_GND)
1406   1              *CapSense_pcTable[sensor] = CapSense_PRT_PC_GND;
1407   1          #elif (CapSense_CONNECT_INACTIVE_SNS == CapSense_CIS_HIGHZ)
                      *CapSense_pcTable[sensor] = CapSense_PRT_PC_HIGHZ;
                  #else
                      *CapSense_pcTable[sensor] = CapSense_PRT_PC_SHIELD;
                  #endif  /* (CapSense_CONNECT_INACTIVE_SNS == CapSense_CIS_GND) */
1412   1      }
1413          
1414          
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 24  

1415          /*******************************************************************************
1416          * Function Name: CapSense_PreScan
1417          ********************************************************************************
1418          *
1419          * Summary:
1420          *  Set required settings, enable sensor, remove Vref from AMUX and start the 
1421          *  scanning process of the sensor.
1422          *
1423          * Parameters:
1424          *  sensor:  Sensor number.
1425          *
1426          * Return:
1427          *  None
1428          *
1429          * Global Variables:
1430          *  CapSense_rbTable[] - used to store pointers to PC pin registers for 
1431          *  every bleed resistor (Rb). Only available when Current Source is External 
1432          *  resistor.
1433          *
1434          *******************************************************************************/
1435          void CapSense_PreScan(uint8 sensor) CYREENTRANT
1436          {
1437   1          /* Set Sensor Settings */
1438   1          CapSense_SetScanSlotSettings(sensor);
1439   1          
1440   1          /* Place disable interrupts here to eliminate influence on start of scanning */
1441   1          /* `#START CapSense_PreScan_DisableInt` */
1442   1      
1443   1          /* `#END` */
1444   1          
1445   1          #ifdef CapSense_PRE_SCAN_DISABLE_INT_CALLBACK
                  CapSense_PreScan_DisableInt_Callback();
                  #endif /* CapSense_PRE_SCAN_DISABLE_INT_CALLBACK */
1448   1      
1449   1          /* Resets digital and pre-charge clocks */
1450   1          CapSense_CONTROL_REG |= CapSense_CTRL_SYNC_EN;
1451   1              
1452   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
1453   1              #if (CapSense_CURRENT_SOURCE == CapSense_IDAC_SOURCE)
1454   1                  /* Disable Vref from AMux */
1455   1                  #if (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS)
                              CapSense_AMuxCH0_Disconnect(CapSense_AMuxCH0_VREF_CHANNEL);
                          #else
1458   1                      CapSense_BufCH0_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
1459   1                  #endif  /* (CapSense_VREF_VDAC != CapSense_VREF_OPTIONS) */
1460   1      
1461   1                  /* Enable Sensor */
1462   1                  CapSense_EnableScanSlot(sensor);
1463   1                  
1464   1              #elif (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK)
                          /* Connect IDAC */
                          CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_IDAC_CHANNEL);
                          
                          /* Enable Sensor */
                          CapSense_EnableScanSlot(sensor);
                              
                          /* Disable CapSense Buffer */
                          CapSense_BufCH0_CAPS_CFG0_REG &= (uint8)~CapSense_CSBUF_ENABLE;
                          
                      #else
                          /* Connect DSI output to Rb */
                          *CapSense_rbTable[CapSense_extRbCh0Cur] |= CapSense_BYP_MASK;
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 25  

                          
                          /* Enable Sensor */
                          CapSense_EnableScanSlot(sensor);
                           
                          /* Disable CapSense Buffer */
                          CapSense_BufCH0_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                      
                      #endif  /* (CapSense_CURRENT_SOURCE == CapSense_IDAC_SOURCE) */
1485   1              
1486   1          #else
              
                      if((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH0) != 0u)
                      {
                          #if (CapSense_CURRENT_SOURCE == CapSense_IDAC_SOURCE)
                              /* Disable Vref from AMux */
                              #if (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS)
                                  CapSense_AMuxCH0_Disconnect(CapSense_AMuxCH0_VREF_CHANNEL);
                              #else
                                  CapSense_BufCH0_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                              #endif  /* (CapSense_VREF_VDAC != CapSense_VREF_OPTIONS) */
                              
                              /* Enable Sensor */
                              CapSense_EnableScanSlot(sensor);
                              
                          #elif (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK)
                              /* Connect IDAC */
                              CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_IDAC_CHANNEL);
                              
                              /* Enable Sensor */
                              CapSense_EnableScanSlot(sensor);
                                  
                              /* Disable Vref from AMux */
                              CapSense_BufCH0_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                              
                          #else
                              /* Connect DSI output to Rb */
                              *CapSense_rbTable[CapSense_extRbCh0Cur] |= CapSense_BYP_MASK;
                              
                              /* Enable Sensor */
                              CapSense_EnableScanSlot(sensor);
                                  
                              /* Disable Vref from AMux */
                              CapSense_BufCH0_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                          
                          #endif  /* (CapSense_CURRENT_SOURCE == CapSense_IDAC_SOURCE) */
                          
                      }
                      
                      if((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH1) != 0u)
                      {
                          sensor += CapSense_TOTAL_SENSOR_COUNT__CH0;
                          
                          #if (CapSense_CURRENT_SOURCE == CapSense_IDAC_SOURCE)
                              /* Disable Vref from AMux */
                              #if (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS)
                                 CapSense_AMuxCH1_Disconnect(CapSense_AMuxCH1_VREF_CHANNEL);
                              #else 
                                  CapSense_BufCH1_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                              #endif  /* (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS) */
                              
                              /* Enable Sensor */
                              CapSense_EnableScanSlot(sensor);
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 26  

                              
                          #elif (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK)
                              /* Connect IDAC */
                              CapSense_AMuxCH1_Connect(CapSense_AMuxCH1_IDAC_CHANNEL);
                              
                              /* Enable Sensor */
                              CapSense_EnableScanSlot(sensor);
                                  
                              /* Disable Vref from AMux */
                              CapSense_BufCH1_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                              
                          #else
                              /* Connect DSI output to Rb */
                              *CapSense_rbTable[CapSense_extRbCh1Cur] |= CapSense_BYP_MASK;
                              
                              /* Enable Sensor */
                              CapSense_EnableScanSlot(sensor);
                              
                              /* Disable Vref from AMux */
                              CapSense_BufCH1_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                          
                          #endif  /* (CapSense_CURRENT_SOURCE == CapSense_IDAC_SOURCE) */
                      }
                  
                  #endif  /* (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN) */
1564   1          
1565   1          /* Start measurament, pre-charge clocks are running and PRS as well */
1566   1          CapSense_CONTROL_REG |= CapSense_CTRL_START;
1567   1          
1568   1          /* Place enable interrupts here to eliminate influence on start of scanning */
1569   1          /* `#START CapSense_PreScan_EnableInt` */
1570   1      
1571   1          /* `#END` */
1572   1      
1573   1          #ifdef CapSense_PRE_SCAN_ENABLE_INT_CALLBACK
                      CapSense_PreScan_EnableInt_Callback();
                  #endif /* CapSense_PRE_SCAN_ENABLE_INT_CALLBACK */
1576   1      }
1577          
1578          
1579          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
1580              /*******************************************************************************
1581              * Function Name: CapSense_PostScan
1582              ********************************************************************************
1583              *
1584              * Summary:
1585              *  Store results of measurament in CapSense_SensorResult[] array,
1586              *  sets scan sensor in none sampling state, turn off Idac(Current Source IDAC),
1587              *  disconnect IDAC(Sink mode) or bleed resistor (Rb) and apply Vref on AMUX.
1588              *  Only one channel designs.
1589              *
1590              * Parameters:
1591              *  sensor:  Sensor number.
1592              *
1593              * Return:
1594              *  None
1595              *
1596              * Global Variables:
1597              *  CapSense_sensorRaw[] - used to store sensors raw data.
1598              *
1599              * Reentrant:
1600              *  No
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 27  

1601              *
1602              *******************************************************************************/
1603              void CapSense_PostScan(uint8 sensor) CYREENTRANT
1604              {
1605   1              /* Stop Capsensing and rearm sync */
1606   1              CapSense_CONTROL_REG &= (uint8)~(CapSense_CTRL_START | CapSense_CTRL_SYNC_EN);
1607   1              
1608   1              /* Read SlotResult from Raw Counter */
1609   1              #if (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)
                          CapSense_sensorRaw[sensor]  = CapSense_MEASURE_FULL_RANGE - 
                                                                    CY_GET_REG16(CapSense_RAW_CH0_COUNTER_PTR);
                      #else
1613   1                  CapSense_sensorRaw[sensor]  = ((uint16) CapSense_RAW_CH0_COUNTER_HI_REG << 8u);
1614   1                  CapSense_sensorRaw[sensor] |= (uint16) CapSense_RAW_CH0_COUNTER_LO_REG;
1615   1                  CapSense_sensorRaw[sensor]  = CapSense_MEASURE_FULL_RANGE -
1616   1                                                            CapSense_sensorRaw[sensor];
1617   1              #endif  /* (CapSense_IMPLEMENTATION == CapSense_MEASURE_IMPLEMENTATION_FF) */
1618   1              
1619   1              /* Disable Sensor */
1620   1              CapSense_DisableScanSlot(sensor);
1621   1              
1622   1              #if(CapSense_CURRENT_SOURCE)
1623   1                  /* Turn off IDAC */
1624   1                  CapSense_IdacCH0_SetValue(CapSense_TURN_OFF_IDAC);
1625   1                  #if (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK)
                              /* Disconnect IDAC */
                              CapSense_AMuxCH0_Disconnect(CapSense_AMuxCH0_IDAC_CHANNEL);
                          #endif  /* (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK) */
1629   1              #else
                          /* Disconnect DSI output from Rb */
                          *CapSense_rbTable[CapSense_extRbCh0Cur] &= ~CapSense_BYP_MASK; 
                      #endif  /* (CapSense_CURRENT_SOURCE)*/
1633   1                  
1634   1              /* Enable Vref on AMUX */
1635   1              #if (CapSense_VREF_OPTIONS == CapSense_VREF_VDAC)
                          CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_VREF_CHANNEL);
                      #else
1638   1                  CapSense_BufCH0_CAPS_CFG0_REG |= CapSense_CSBUF_ENABLE;
1639   1              #endif  /* (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS) */
1640   1          }
1641              
1642          #else
              
                  /*******************************************************************************
                  * Function Name: CapSense_PostScan
                  ********************************************************************************
                  *
                  * Summary:
                  *  Store results of measurament in CapSense_SensorResult[] array,
                  *  sets scan sensor in none sampling state, turn off Idac(Current Source IDAC),
                  *  disconnect IDAC(Sink mode) or bleed resistor (Rb) and apply Vref on AMUX.
                  *  Only used for channel 0 in two channes designs.
                  *
                  * Parameters:
                  *  sensor:  Sensor number.
                  *
                  * Return:
                  *  None
                  *
                  * Global Variables:
                  *  CapSense_sensorRaw[] - used to store sensors raw data.
                  *
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 28  

                  * Reentrant:
                  *  No
                  *
                  *******************************************************************************/
                  void CapSense_PostScanCh0(uint8 sensor) CYREENTRANT
                  {
                      if (((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH0) == 0u) && 
                          ((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH1) == 0u)) 
                      {
                          /* Stop Capsensing and rearm sync */
                          CapSense_CONTROL_REG &= ~(CapSense_CTRL_START | CapSense_CTRL_SYNC_EN);
                      }
                      
                      /* Read SlotResult from Raw Counter */
                      #if (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)
                          CapSense_sensorRaw[sensor]  = CapSense_MEASURE_FULL_RANGE - 
                                                                    CY_GET_REG16(CapSense_RAW_CH0_COUNTER_PTR);
                      #else
                          CapSense_sensorRaw[sensor]  = ((uint16) CapSense_RAW_CH0_COUNTER_HI_REG << 8u);
                          CapSense_sensorRaw[sensor] |= (uint16) CapSense_RAW_CH0_COUNTER_LO_REG;
                          CapSense_sensorRaw[sensor]  = CapSense_MEASURE_FULL_RANGE - 
                                                                    CapSense_sensorRaw[sensor];
                      #endif  /* (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)*/
                      
                      /* Disable Sensor */
                      CapSense_DisableScanSlot(sensor);
                      
                      #if (CapSense_CURRENT_SOURCE)
                          /* Turn off IDAC */
                          CapSense_IdacCH0_SetValue(CapSense_TURN_OFF_IDAC);
                          #if (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK)
                              /* Disconnect IDAC */
                              CapSense_AMuxCH0_Disconnect(CapSense_AMuxCH0_IDAC_CHANNEL);
                          #endif  /* (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK) */
                      #else
                          /* Disconnect DSI output from Rb */
                          *CapSense_rbTable[CapSense_extRbCh0Cur] &= ~CapSense_BYP_MASK; 
                      #endif  /* (CapSense_CURRENT_SOURCE)*/
                      
                      /* Enable Vref on AMUX */
                      #if (CapSense_VREF_OPTIONS == CapSense_VREF_VDAC)
                          CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_VREF_CHANNEL);
                      #else
                          CapSense_BufCH0_CAPS_CFG0_REG |= CapSense_CSBUF_ENABLE;
                      #endif  /* (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS) */
                  }
                  
                  
                  /*******************************************************************************
                  * Function Name: CapSense_PostScanCh1
                  ********************************************************************************
                  *
                  * Summary:
                  *  Store results of measurament in CapSense_SensorResult[] array,
                  *  sets scan sensor in none sampling state, turn off Idac(Current Source IDAC), 
                  *  disconnect IDAC(Sink mode) or bleed resistor (Rb) and apply Vref on AMUX.
                  *  Only used for channel 1 in two channes designs.
                  *
                  * Parameters:
                  *  sensor:  Sensor number.
                  *
                  * Return:
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 29  

                  *  None
                  *
                  * Global Variables:
                  *  CapSense_sensorRaw[] - used to store sensors raw data.
                  *
                  * Reentrant:
                  *  No
                  *
                  *******************************************************************************/
                  void CapSense_PostScanCh1(uint8 sensor) CYREENTRANT
                  {
                      if (((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH0) == 0u) && 
                          ((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH1) == 0u))
                      {
                          /* Stop Capsensing and rearm sync */
                          CapSense_CONTROL_REG &= ~(CapSense_CTRL_START | CapSense_CTRL_SYNC_EN);
                      }
                      
                      /* Read SlotResult from Raw Counter */
                      #if (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF)
                          CapSense_sensorRaw[sensor]  = CapSense_MEASURE_FULL_RANGE - 
                                                                    CY_GET_REG16(CapSense_RAW_CH1_COUNTER_PTR);
                      #else
                          CapSense_sensorRaw[sensor]  = ((uint16) CapSense_RAW_CH1_COUNTER_HI_REG << 8u);
                          CapSense_sensorRaw[sensor] |= (uint16) CapSense_RAW_CH1_COUNTER_LO_REG;
                          CapSense_sensorRaw[sensor]  = CapSense_MEASURE_FULL_RANGE - 
                                                                    CapSense_sensorRaw[sensor];
                      #endif  /* (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF)*/
                      
                      /* Disable Sensor */
                      CapSense_DisableScanSlot(sensor);
                      
                      #if (CapSense_CURRENT_SOURCE)
                          /* Turn off IDAC */
                          CapSense_IdacCH1_SetValue(CapSense_TURN_OFF_IDAC);
                          #if (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK)
                              /* Disconnect IDAC */
                              CapSense_AMuxCH1_Disconnect(CapSense_AMuxCH1_IDAC_CHANNEL);
                          #endif  /* (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK) */
                      #else
                          /* Disconnect DSI output from Rb */
                          *CapSense_rbTable[CapSense_extRbCh1Cur] &= ~CapSense_BYP_MASK; 
                      #endif  /* (CapSense_CURRENT_SOURCE)*/
              
                      /* Enable Vref on AMUX */
                      #if (CapSense_VREF_OPTIONS == CapSense_VREF_VDAC)
                          CapSense_AMuxCH1_Connect(CapSense_AMuxCH1_VREF_CHANNEL);
                      #else
                          CapSense_BufCH1_CAPS_CFG0_REG |= CapSense_CSBUF_ENABLE;
                      #endif  /* (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS) */
                  }
                  
              #endif  /* CapSense_DESIGN_TYPE */
1778          
1779          
1780          #if (CapSense_CURRENT_SOURCE == CapSense_EXTERNAL_RB)
                  /*******************************************************************************
                  * Function Name:  CapSense_InitRb
                  ********************************************************************************
                  *
                  * Summary:
                  *  Sets all Rbleed resistor to High-Z mode. The first Rbleed resistor is active
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 30  

                  *  while next measure.
                  *  This function is available only if Current Source is External Resistor.
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  None
                  *
                  ********************************************************************************/
                  void CapSense_InitRb(void) 
                  {
                      uint8 i;
                      
                      /* Disable all Rb */
                      for(i = 0u; i < CapSense_TOTAL_RB_NUMBER; i++)
                      {
                          /* Make High-Z */
                          *CapSense_rbTable[i] = CapSense_PRT_PC_HIGHZ;
                      }
                  }
                  
                  
                  /*******************************************************************************
                  * Function Name: CapSense_SetRBleed
                  ********************************************************************************
                  *
                  * Summary:
                  *  Sets the pin to use for the bleed resistor (Rb) connection. This function
                  *  can be called at runtime to select the current Rb pin setting from those 
                  *  defined customizer. The function overwrites the component parameter setting. 
                  *  This function is available only if Current Source is External Resistor.
                  * 
                  * Parameters:
                  *  rbleed:  Ordering number for bleed resistor terminal defined in CapSense
                  *  customizer.
                  *
                  * Return:
                  *  None
                  *
                  * Global Variables:
                  *  CapSense_extRbCh0Cur - used to store current number of active 
                  *  bleed resistor (Rb) of channel 0.
                  *  CapSense_extRbCh1Cur - used to store current number of active 
                  *  bleed resistor (Rb) of channel 1.
                  *  The active bleed resistor (Rb) pin will be used while next measurement  
                  *  cycle.
                  *
                  * Reentrant:
                  *  No
                  *
                  *******************************************************************************/
                  void CapSense_SetRBleed(uint8 rbleed) 
                  {
                      #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
                          CapSense_extRbCh0Cur = rbleed;
                          
                      #else
                          if(rbleed < CapSense_TOTAL_RB_NUMBER__CH0)
                          {
                              CapSense_extRbCh0Cur = rbleed;
                          }
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 31  

                          else
                          {
                              CapSense_extRbCh1Cur = (rbleed - CapSense_TOTAL_RB_NUMBER__CH0);   
                          }
                  
                      #endif  /* CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN */ 
                  }
              #endif /* CapSense_CURRENT_SOURCE == CapSense_EXTERNAL_RB */ 
1857          
1858          #if (CapSense_PRESCALER_OPTIONS)
1859              /*******************************************************************************
1860              * Function Name: CapSense_SetPrescaler
1861              ********************************************************************************
1862              *
1863              * Summary:
1864              *  Sets analog switch divider.
1865              *
1866              * Parameters:
1867              *  prescaler:  Sets prescaler divider values.
1868              *
1869              * Return:
1870              *  None
1871              *
1872              *******************************************************************************/
1873              void CapSense_SetPrescaler(uint8 prescaler) CYREENTRANT
1874              {
1875   1              /* Set Prescaler */
1876   1              #if (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB)
1877   1                  CapSense_PRESCALER_PERIOD_REG = prescaler;
1878   1                  CapSense_PRESCALER_COMPARE_REG = (prescaler >> 1u);
1879   1              #elif (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_FF)
                          CY_SET_REG16(CapSense_PRESCALER_PERIOD_PTR, (uint16) prescaler);
                          CY_SET_REG16(CapSense_PRESCALER_COMPARE_PTR, (uint16) (prescaler >> 1u));
                      #else
                          /* Do nothing = config without prescaler */
                      #endif  /* (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB) */
1885   1          }
1886          
1887          
1888              /*******************************************************************************
1889              * Function Name: CapSense_GetPrescaler
1890              ********************************************************************************
1891              *
1892              * Summary:
1893              *  Gets analog switch divider.
1894              *
1895              * Parameters:
1896              *  None
1897              *
1898              * Return:
1899              *   Returns the prescaler divider value.
1900              *
1901              *******************************************************************************/
1902              uint8 CapSense_GetPrescaler(void) 
1903              {
1904   1              uint8 prescaler = 0u;
1905   1      
1906   1              /* Get Prescaler */
1907   1              #if (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB)
1908   1                  prescaler = CapSense_PRESCALER_PERIOD_REG;
1909   1                  
1910   1              #elif (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_FF)
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 32  

                          prescaler = (uint8) CY_GET_REG16(CapSense_PRESCALER_PERIOD_PTR);
                          
                      #else
                          /* Do nothing = config without prescaler */
                      #endif  /* (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB) */
1916   1              
1917   1              return (prescaler);
1918   1          }
1919          #endif  /* CapSense_PRESCALER_OPTIONS */
1920          
1921          
1922          /*******************************************************************************
1923          * Function Name: CapSense_SetScanSpeed
1924          ********************************************************************************
1925          *
1926          * Summary:
1927          *  Sets ScanSpeed divider.
1928          *
1929          * Parameters:
1930          *  scanspeed:  Sets ScanSpeed divider.
1931          *
1932          * Return:
1933          *  None
1934          *
1935          *******************************************************************************/
1936          void CapSense_SetScanSpeed(uint8 scanSpeed) 
1937          {
1938   1          CapSense_SCANSPEED_PERIOD_REG = scanSpeed; 
1939   1      }
1940          
1941          
1942          #if (CapSense_PRS_OPTIONS)
1943              /*******************************************************************************
1944              * Function Name: CapSense_SetAnalogSwitchesSource
1945              ********************************************************************************
1946              *
1947              * Summary:
1948              *  Selects the Analog switches source between PRS and prescaler. It is useful
1949              *  for sensor capacitance determination for sensors with low self-capacitance.
1950              *  This function is used in auto-tuning procedure.
1951              *
1952              * Parameters:
1953              *  src:  analog switches source:
1954              *           CapSense_ANALOG_SWITCHES_SRC_PRESCALER - selects prescaler
1955              *           CapSense_ANALOG_SWITCHES_SRC_PRS - selects PRS
1956              *
1957              * Return:
1958              *  None
1959              *
1960              * Reentrant:
1961              *  No
1962              *******************************************************************************/
1963              void CapSense_SetAnalogSwitchesSource(uint8 src)
1964                                
1965              {
1966   1              if(src == CapSense_ANALOG_SWITCHES_SRC_PRESCALER)
1967   1              {
1968   2                  CapSense_CONTROL_REG &= (uint8)~0x10u;
1969   2              }
1970   1              else
1971   1              {
1972   2                  CapSense_CONTROL_REG |= 0x10u;
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 33  

1973   2              }
1974   1          }
1975          #endif /* (CapSense_PRS_OPTIONS) */
1976          
1977          /* [] END OF FILE */
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 34  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CapSense_Init (BEGIN)
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 136
0000 120000      R     LCALL   CapSense_ClearSensors
                                           ; SOURCE LINE # 152
0003 7F02              MOV     R7,#02H
0005 120000      R     LCALL   _CapSense_SetAnalogSwitchesSource
                                           ; SOURCE LINE # 168
0008 120000      E     LCALL   CyEnterCriticalSection
000B 900000      R     MOV     DPTR,#enableInterrupts
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
0010 90649A            MOV     DPTR,#0649AH
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 4403              ORL     A,#03H
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
001B 90649B            MOV     DPTR,#0649BH
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 4403              ORL     A,#03H
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
0026 900000      R     MOV     DPTR,#enableInterrupts
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 174
002E 7B02              MOV     R3,#02H
0030 7A64              MOV     R2,#064H
0032 792A              MOV     R1,#02AH
0034 7D00              MOV     R5,#00H
0036 7CB4              MOV     R4,#0B4H
0038 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 176
003B 7B02              MOV     R3,#02H
003D 7A64              MOV     R2,#064H
003F 794A              MOV     R1,#04AH
0041 7DFF              MOV     R5,#0FFH
0043 7CFF              MOV     R4,#0FFH
0045 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 196
0048 90648B            MOV     DPTR,#0648BH
004B 7407              MOV     A,#07H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
004E 120000      E     LCALL   CyEnterCriticalSection
0051 900000      R     MOV     DPTR,#enableInterrupts
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 35  

                                           ; SOURCE LINE # 213
0056 90649C            MOV     DPTR,#0649CH
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C 4403              ORL     A,#03H
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
0061 90649D            MOV     DPTR,#0649DH
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 EF                MOV     A,R7
0067 4403              ORL     A,#03H
0069 FF                MOV     R7,A
006A EF                MOV     A,R7
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
006C 900000      R     MOV     DPTR,#enableInterrupts
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 218
0074 90642C            MOV     DPTR,#0642CH
0077 74FF              MOV     A,#0FFH
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
007A 90644C            MOV     DPTR,#0644CH
007D 74FF              MOV     A,#0FFH
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
0080 90640C            MOV     DPTR,#0640CH
0083 74FF              MOV     A,#0FFH
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 223
0086 90642D            MOV     DPTR,#0642DH
0089 74FF              MOV     A,#0FFH
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 224
008C 90645D            MOV     DPTR,#0645DH
008F 74FF              MOV     A,#0FFH
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 225
0092 90644D            MOV     DPTR,#0644DH
0095 74FF              MOV     A,#0FFH
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
0098 9044C8            MOV     DPTR,#044C8H
009B 7401              MOV     A,#01H
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
009E 7C00        E     MOV     R4,#HIGH CapSense_IsrCH0_ISR
00A0 7D00        E     MOV     R5,#LOW CapSense_IsrCH0_ISR
00A2 7F00              MOV     R7,#00H
00A4 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 266
00A7 7D07              MOV     R5,#07H
00A9 7F00              MOV     R7,#00H
00AB 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 275
00AE 120000      E     LCALL   CapSense_AMuxCH0_Init
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 36  

                                           ; SOURCE LINE # 276
00B1 7F07              MOV     R7,#07H
00B3 120000      E     LCALL   _CapSense_AMuxCH0_Set
                                           ; SOURCE LINE # 277
00B6 7F08              MOV     R7,#08H
00B8 120000      E     LCALL   _CapSense_AMuxCH0_Set
                                           ; SOURCE LINE # 279
00BB 7F09              MOV     R7,#09H
00BD 120000      E     LCALL   _CapSense_AMuxCH0_Set
                                           ; SOURCE LINE # 297
00C0 90647A            MOV     DPTR,#0647AH
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 EF                MOV     A,R7
00C6 4404              ORL     A,#04H
00C8 FF                MOV     R7,A
00C9 EF                MOV     A,R7
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 303
00CB 120000      E     LCALL   CapSense_CompCH0_Init
                                           ; SOURCE LINE # 305
00CE 120000      E     LCALL   CapSense_IdacCH0_Init
                                           ; SOURCE LINE # 306
00D1 7F00              MOV     R7,#00H
00D3 120000      E     LCALL   _CapSense_IdacCH0_SetPolarity
                                           ; SOURCE LINE # 307
00D6 7F04              MOV     R7,#04H
00D8 120000      E     LCALL   _CapSense_IdacCH0_SetRange
                                           ; SOURCE LINE # 308
00DB 7F00              MOV     R7,#00H
00DD 120000      E     LCALL   _CapSense_IdacCH0_SetValue
                                           ; SOURCE LINE # 328
00E0 22                RET     
             ; FUNCTION CapSense_Init (END)

             ; FUNCTION CapSense_Enable (BEGIN)
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 350
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
0008 90649B            MOV     DPTR,#0649BH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4420              ORL     A,#020H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 403
0013 120000      E     LCALL   CapSense_IntClock_Start
                                           ; SOURCE LINE # 407
0016 120000      E     LCALL   CapSense_CompCH0_Enable
                                           ; SOURCE LINE # 409
0019 120000      E     LCALL   CapSense_IdacCH0_Enable
                                           ; SOURCE LINE # 429
001C 9043BB            MOV     DPTR,#043BBH
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 37  

0021 EF                MOV     A,R7
0022 4410              ORL     A,#010H
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
0027 9043AB            MOV     DPTR,#043ABH
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 4410              ORL     A,#010H
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 448
0032 905870            MOV     DPTR,#05870H
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 4401              ORL     A,#01H
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 455
003D 900000      R     MOV     DPTR,#enableInterrupts
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 458
0045 9044C0            MOV     DPTR,#044C0H
0048 7401              MOV     A,#01H
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 464
004B 90647A            MOV     DPTR,#0647AH
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 EF                MOV     A,R7
0051 4480              ORL     A,#080H
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
0056 22                RET     
             ; FUNCTION CapSense_Enable (END)

             ; FUNCTION CapSense_Start (BEGIN)
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 501
0000 900000      R     MOV     DPTR,#CapSense_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 503
0008 120000      R     LCALL   CapSense_Init
                                           ; SOURCE LINE # 504
000B 900000      R     MOV     DPTR,#CapSense_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 505
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 38  

0011         ?C0003:
                                           ; SOURCE LINE # 506
0011 120000      R     LCALL   CapSense_Enable
                                           ; SOURCE LINE # 514
0014 22                RET     
             ; FUNCTION CapSense_Start (END)

             ; FUNCTION CapSense_Stop (BEGIN)
                                           ; SOURCE LINE # 536
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 539
0000 90647A            MOV     DPTR,#0647AH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FD              ANL     A,#0FDH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 542
000B 9044C8            MOV     DPTR,#044C8H
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 548
0011 120000      R     LCALL   CapSense_ClearSensors
                                           ; SOURCE LINE # 562
0014 90649B            MOV     DPTR,#0649BH
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A 54DF              ANL     A,#0DFH
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 601
001F 120000      E     LCALL   CapSense_IntClock_Stop
                                           ; SOURCE LINE # 605
0022 120000      E     LCALL   CapSense_CompCH0_Stop
                                           ; SOURCE LINE # 607
0025 120000      E     LCALL   CapSense_IdacCH0_Stop
                                           ; SOURCE LINE # 629
0028 905870            MOV     DPTR,#05870H
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E 54FE              ANL     A,#0FEH
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 630
0033 9043AB            MOV     DPTR,#043ABH
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 54EF              ANL     A,#0EFH
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 631
003E 9043BB            MOV     DPTR,#043BBH
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 39  

0043 EF                MOV     A,R7
0044 54EF              ANL     A,#0EFH
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 641
0049 90647A            MOV     DPTR,#0647AH
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 547F              ANL     A,#07FH
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 642
0054 22                RET     
             ; FUNCTION CapSense_Stop (END)

             ; FUNCTION _?CapSense_FindNextSensor (BEGIN)
                                           ; SOURCE LINE # 674
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 90FFFE            MOV     DPTR,#0FFFEH
000B 120000      E     LCALL   ?C?ADDXBP
000E         ?C0008:
                                           ; SOURCE LINE # 681
                                           ; SOURCE LINE # 683
000E 850083      E     MOV     DPH,?C_XBP
0011 850082      E     MOV     DPL,?C_XBP+01H
0014 A3                INC     DPTR
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 04                INC     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 684
0019 850083      E     MOV     DPH,?C_XBP
001C 850082      E     MOV     DPL,?C_XBP+01H
001F A3                INC     DPTR
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 6407              XRL     A,#07H
0026 605F              JZ      ?C0007
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 687
0028         ?C0009:
                                           ; SOURCE LINE # 688
0028 850083      E     MOV     DPH,?C_XBP
002B 850082      E     MOV     DPL,?C_XBP+01H
002E A3                INC     DPTR
002F A3                INC     DPTR
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 13                RRC     A
0034 13                RRC     A
0035 13                RRC     A
0036 541F              ANL     A,#01FH
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 40  

0038 FF                MOV     R7,A
0039 850083      E     MOV     DPH,?C_XBP
003C 850082      E     MOV     DPL,?C_XBP+01H
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 689
0041 850083      E     MOV     DPH,?C_XBP
0044 850082      E     MOV     DPL,?C_XBP+01H
0047 A3                INC     DPTR
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C 5407              ANL     A,#07H
004E FF                MOV     R7,A
004F 7401              MOV     A,#01H
0051 A807              MOV     R0,AR7
0053 08                INC     R0
0054 8002              SJMP    ?C0036
0056         ?C0035:
0056 C3                CLR     C
0057 33                RLC     A
0058         ?C0036:
0058 D8FC              DJNZ    R0,?C0035
005A FF                MOV     R7,A
005B 850083      E     MOV     DPH,?C_XBP
005E 850082      E     MOV     DPL,?C_XBP+01H
0061 A3                INC     DPTR
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 690
                                           ; SOURCE LINE # 691
0064 850083      E     MOV     DPH,?C_XBP
0067 850082      E     MOV     DPL,?C_XBP+01H
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
006C 7400        R     MOV     A,#LOW CapSense_sensorEnableMask
006E 2F                ADD     A,R7
006F F582              MOV     DPL,A
0071 E4                CLR     A
0072 3400        R     ADDC    A,#HIGH CapSense_sensorEnableMask
0074 F583              MOV     DPH,A
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 850083      E     MOV     DPH,?C_XBP
007B 850082      E     MOV     DPL,?C_XBP+01H
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 FE                MOV     R6,A
0081 EF                MOV     A,R7
0082 5E                ANL     A,R6
0083 FF                MOV     R7,A
0084 EF                MOV     A,R7
0085 6087              JZ      ?C0008
0087         ?C0007:
                                           ; SOURCE LINE # 693
0087 850083      E     MOV     DPH,?C_XBP
008A 850082      E     MOV     DPL,?C_XBP+01H
008D A3                INC     DPTR
008E A3                INC     DPTR
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 41  

                                           ; SOURCE LINE # 694
0091         ?C0010:
0091 900003            MOV     DPTR,#03H
0094 120000      E     LCALL   ?C?ADDXBP
0097 22                RET     
             ; FUNCTION _?CapSense_FindNextSensor (END)

             ; FUNCTION _?CapSense_SetScanSlotSettings (BEGIN)
                                           ; SOURCE LINE # 828
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 90FFFF            MOV     DPTR,#0FFFFH
000B 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 834
000E 850083      E     MOV     DPH,?C_XBP
0011 850082      E     MOV     DPL,?C_XBP+01H
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 900000      R     MOV     DPTR,#CapSense_widgetNumber
001B 93                MOVC    A,@A+DPTR
001C FF                MOV     R7,A
001D 850083      E     MOV     DPH,?C_XBP
0020 850082      E     MOV     DPL,?C_XBP+01H
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 838
0025 850083      E     MOV     DPH,?C_XBP
0028 850082      E     MOV     DPL,?C_XBP+01H
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F 900000      R     MOV     DPTR,#CapSense_idacSettings
0032 93                MOVC    A,@A+DPTR
0033 FF                MOV     R7,A
0034 120000      E     LCALL   _CapSense_IdacCH0_SetValue
                                           ; SOURCE LINE # 846
0037 850083      E     MOV     DPH,?C_XBP
003A 850082      E     MOV     DPL,?C_XBP+01H
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 900000      R     MOV     DPTR,#CapSense_widgetResolution
0043 93                MOVC    A,@A+DPTR
0044 FF                MOV     R7,A
0045 90645C            MOV     DPTR,#0645CH
0048 EF                MOV     A,R7
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 851
004A 850083      E     MOV     DPH,?C_XBP
004D 850082      E     MOV     DPL,?C_XBP+01H
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 7400        R     MOV     A,#LOW CapSense_analogSwitchDivider
0055 2F                ADD     A,R7
0056 F582              MOV     DPL,A
0058 E4                CLR     A
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 42  

0059 3400        R     ADDC    A,#HIGH CapSense_analogSwitchDivider
005B F583              MOV     DPH,A
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F 120000      R     LCALL   _?CapSense_SetPrescaler
                                           ; SOURCE LINE # 907
0062 900002            MOV     DPTR,#02H
0065 120000      E     LCALL   ?C?ADDXBP
0068 22                RET     
             ; FUNCTION _?CapSense_SetScanSlotSettings (END)

             ; FUNCTION _CapSense_ScanSensor (BEGIN)
                                           ; SOURCE LINE # 940
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 941
                                           ; SOURCE LINE # 943
0005 900000      R     MOV     DPTR,#CapSense_csv
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 944
000A 900000      R     MOV     DPTR,#sensor
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F 900000      R     MOV     DPTR,#CapSense_sensorIndex
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 948
0014 900000      R     MOV     DPTR,#CapSense_csv
0017 7481              MOV     A,#081H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 949
001A 900000      R     MOV     DPTR,#sensor
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 120000      R     LCALL   _?CapSense_PreScan
                                           ; SOURCE LINE # 982
0022 22                RET     
             ; FUNCTION _CapSense_ScanSensor (END)

             ; FUNCTION CapSense_ScanEnabledWidgets (BEGIN)
                                           ; SOURCE LINE # 1017
                                           ; SOURCE LINE # 1018
                                           ; SOURCE LINE # 1020
0000 900000      R     MOV     DPTR,#CapSense_csv
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1021
0005 900000      R     MOV     DPTR,#CapSense_sensorIndex
0008 74FF              MOV     A,#0FFH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1025
000B 900000      R     MOV     DPTR,#CapSense_sensorIndex
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 120000      R     LCALL   _?CapSense_FindNextSensor
0013 900000      R     MOV     DPTR,#CapSense_sensorIndex
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1028
0018 900000      R     MOV     DPTR,#CapSense_sensorIndex
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 43  

001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E C3                CLR     C
001F 9407              SUBB    A,#07H
0021 5016              JNC     ?C0014
                                           ; SOURCE LINE # 1029
                                           ; SOURCE LINE # 1030
0023 900000      R     MOV     DPTR,#CapSense_csv
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 4401              ORL     A,#01H
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#CapSense_csv
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1031
0031 900000      R     MOV     DPTR,#CapSense_sensorIndex
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 120000      R     LCALL   _?CapSense_PreScan
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1047
0039         ?C0014:
0039 22                RET     
             ; FUNCTION CapSense_ScanEnabledWidgets (END)

             ; FUNCTION CapSense_IsBusy (BEGIN)
                                           ; SOURCE LINE # 1070
                                           ; SOURCE LINE # 1071
                                           ; SOURCE LINE # 1072
0000 900000      R     MOV     DPTR,#CapSense_csv
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5401              ANL     A,#01H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 4E                ORL     A,R6
000D 6004              JZ      ?C0015
000F 7F01              MOV     R7,#01H
0011 8002              SJMP    ?C0016
0013         ?C0015:
0013 7F00              MOV     R7,#00H
0015         ?C0016:
                                           ; SOURCE LINE # 1073
0015         ?C0017:
0015 22                RET     
             ; FUNCTION CapSense_IsBusy (END)

             ; FUNCTION _CapSense_ReadSensorRaw (BEGIN)
                                           ; SOURCE LINE # 1095
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1096
                                           ; SOURCE LINE # 1097
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 44  

000A EF                MOV     A,R7
000B 25E0              ADD     A,ACC
000D 2400        R     ADD     A,#LOW CapSense_sensorRaw
000F F582              MOV     DPL,A
0011 E4                CLR     A
0012 3400        R     ADDC    A,#HIGH CapSense_sensorRaw
0014 F583              MOV     DPH,A
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
0018 A3                INC     DPTR
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
                                           ; SOURCE LINE # 1098
001B         ?C0018:
001B 22                RET     
             ; FUNCTION _CapSense_ReadSensorRaw (END)

             ; FUNCTION CapSense_ClearSensors (BEGIN)
                                           ; SOURCE LINE # 1116
                                           ; SOURCE LINE # 1117
                                           ; SOURCE LINE # 1120
0000 900000      R     MOV     DPTR,#i
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005         ?C0019:
0005 900000      R     MOV     DPTR,#i
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9407              SUBB    A,#07H
000E 5010              JNC     ?C0022
                                           ; SOURCE LINE # 1121
                                           ; SOURCE LINE # 1122
0010 900000      R     MOV     DPTR,#i
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 120000      R     LCALL   _?CapSense_DisableSensor
                                           ; SOURCE LINE # 1123
0018 900000      R     MOV     DPTR,#i
001B E0                MOVX    A,@DPTR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
001E 80E5              SJMP    ?C0019
                                           ; SOURCE LINE # 1124
0020         ?C0022:
0020 22                RET     
             ; FUNCTION CapSense_ClearSensors (END)

             ; FUNCTION _?CapSense_EnableSensor (BEGIN)
                                           ; SOURCE LINE # 1266
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 90FFFE            MOV     DPTR,#0FFFEH
000B 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 1268
000E 850083      E     MOV     DPH,?C_XBP
0011 850082      E     MOV     DPL,?C_XBP+01H
0014 A3                INC     DPTR
0015 A3                INC     DPTR
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 45  

0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 900000      R     MOV     DPTR,#CapSense_portTable
001C 93                MOVC    A,@A+DPTR
001D FF                MOV     R7,A
001E 850083      E     MOV     DPH,?C_XBP
0021 850082      E     MOV     DPL,?C_XBP+01H
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1269
0026 850083      E     MOV     DPH,?C_XBP
0029 850082      E     MOV     DPL,?C_XBP+01H
002C A3                INC     DPTR
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 900000      R     MOV     DPTR,#CapSense_maskTable
0034 93                MOVC    A,@A+DPTR
0035 FF                MOV     R7,A
0036 850083      E     MOV     DPH,?C_XBP
0039 850082      E     MOV     DPL,?C_XBP+01H
003C A3                INC     DPTR
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1279
003F 850083      E     MOV     DPH,?C_XBP
0042 850082      E     MOV     DPL,?C_XBP+01H
0045 A3                INC     DPTR
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 EF                MOV     A,R7
004A 25E0              ADD     A,ACC
004C 2400        R     ADD     A,#LOW CapSense_pcTable
004E F582              MOV     DPL,A
0050 E4                CLR     A
0051 3400        R     ADDC    A,#HIGH CapSense_pcTable
0053 F583              MOV     DPH,A
0055 E4                CLR     A
0056 93                MOVC    A,@A+DPTR
0057 FE                MOV     R6,A
0058 7401              MOV     A,#01H
005A 93                MOVC    A,@A+DPTR
005B FF                MOV     R7,A
005C 8F82              MOV     DPL,R7
005E 8E83              MOV     DPH,R6
0060 7409              MOV     A,#09H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1282
0063 850083      E     MOV     DPH,?C_XBP
0066 850082      E     MOV     DPL,?C_XBP+01H
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C B40F09            CJNE    A,#0FH,?C0023
                                           ; SOURCE LINE # 1283
                                           ; SOURCE LINE # 1284
006F 850083      E     MOV     DPH,?C_XBP
0072 850082      E     MOV     DPL,?C_XBP+01H
0075 7407              MOV     A,#07H
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 46  

0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1285
0078         ?C0023:
                                           ; SOURCE LINE # 1286
0078 850083      E     MOV     DPH,?C_XBP
007B 850082      E     MOV     DPL,?C_XBP+01H
007E E0                MOVX    A,@DPTR
007F FF                MOV     R7,A
0080 EF                MOV     A,R7
0081 25E0              ADD     A,ACC
0083 2400        R     ADD     A,#LOW CapSense_csTable
0085 F582              MOV     DPL,A
0087 E4                CLR     A
0088 3400        R     ADDC    A,#HIGH CapSense_csTable
008A F583              MOV     DPH,A
008C E4                CLR     A
008D 93                MOVC    A,@A+DPTR
008E FE                MOV     R6,A
008F 7401              MOV     A,#01H
0091 93                MOVC    A,@A+DPTR
0092 FF                MOV     R7,A
0093 8F82              MOV     DPL,R7
0095 8E83              MOV     DPH,R6
0097 C083              PUSH    DPH
0099 C082              PUSH    DPL
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D 850083      E     MOV     DPH,?C_XBP
00A0 850082      E     MOV     DPL,?C_XBP+01H
00A3 A3                INC     DPTR
00A4 E0                MOVX    A,@DPTR
00A5 FE                MOV     R6,A
00A6 EF                MOV     A,R7
00A7 4E                ORL     A,R6
00A8 FF                MOV     R7,A
00A9 D082              POP     DPL
00AB D083              POP     DPH
00AD EF                MOV     A,R7
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1293
00AF 850083      E     MOV     DPH,?C_XBP
00B2 850082      E     MOV     DPL,?C_XBP+01H
00B5 A3                INC     DPTR
00B6 A3                INC     DPTR
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 120000      E     LCALL   _CapSense_AMuxCH0_Set
                                           ; SOURCE LINE # 1321
00BC 900003            MOV     DPTR,#03H
00BF 120000      E     LCALL   ?C?ADDXBP
00C2 22                RET     
             ; FUNCTION _?CapSense_EnableSensor (END)

             ; FUNCTION _?CapSense_DisableSensor (BEGIN)
                                           ; SOURCE LINE # 1351
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 90FFFE            MOV     DPTR,#0FFFEH
000B 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 1353
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 47  

000E 850083      E     MOV     DPH,?C_XBP
0011 850082      E     MOV     DPL,?C_XBP+01H
0014 A3                INC     DPTR
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 900000      R     MOV     DPTR,#CapSense_portTable
001C 93                MOVC    A,@A+DPTR
001D FF                MOV     R7,A
001E 850083      E     MOV     DPH,?C_XBP
0021 850082      E     MOV     DPL,?C_XBP+01H
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1354
0026 850083      E     MOV     DPH,?C_XBP
0029 850082      E     MOV     DPL,?C_XBP+01H
002C A3                INC     DPTR
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 900000      R     MOV     DPTR,#CapSense_maskTable
0034 93                MOVC    A,@A+DPTR
0035 FF                MOV     R7,A
0036 850083      E     MOV     DPH,?C_XBP
0039 850082      E     MOV     DPL,?C_XBP+01H
003C A3                INC     DPTR
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1368
003F 850083      E     MOV     DPH,?C_XBP
0042 850082      E     MOV     DPL,?C_XBP+01H
0045 A3                INC     DPTR
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 120000      E     LCALL   _CapSense_AMuxCH0_Unset
                                           ; SOURCE LINE # 1398
004C 850083      E     MOV     DPH,?C_XBP
004F 850082      E     MOV     DPL,?C_XBP+01H
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 B40F09            CJNE    A,#0FH,?C0025
                                           ; SOURCE LINE # 1399
                                           ; SOURCE LINE # 1400
0058 850083      E     MOV     DPH,?C_XBP
005B 850082      E     MOV     DPL,?C_XBP+01H
005E 7407              MOV     A,#07H
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1401
0061         ?C0025:
                                           ; SOURCE LINE # 1402
0061 850083      E     MOV     DPH,?C_XBP
0064 850082      E     MOV     DPL,?C_XBP+01H
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 EF                MOV     A,R7
006A 25E0              ADD     A,ACC
006C 2400        R     ADD     A,#LOW CapSense_csTable
006E F582              MOV     DPL,A
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 48  

0070 E4                CLR     A
0071 3400        R     ADDC    A,#HIGH CapSense_csTable
0073 F583              MOV     DPH,A
0075 E4                CLR     A
0076 93                MOVC    A,@A+DPTR
0077 FE                MOV     R6,A
0078 7401              MOV     A,#01H
007A 93                MOVC    A,@A+DPTR
007B FF                MOV     R7,A
007C 8F82              MOV     DPL,R7
007E 8E83              MOV     DPH,R6
0080 C083              PUSH    DPH
0082 C082              PUSH    DPL
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 850083      E     MOV     DPH,?C_XBP
0089 850082      E     MOV     DPL,?C_XBP+01H
008C A3                INC     DPTR
008D E0                MOVX    A,@DPTR
008E FE                MOV     R6,A
008F EE                MOV     A,R6
0090 F4                CPL     A
0091 FE                MOV     R6,A
0092 EF                MOV     A,R7
0093 5E                ANL     A,R6
0094 FF                MOV     R7,A
0095 D082              POP     DPL
0097 D083              POP     DPH
0099 EF                MOV     A,R7
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1406
009B 850083      E     MOV     DPH,?C_XBP
009E 850082      E     MOV     DPL,?C_XBP+01H
00A1 A3                INC     DPTR
00A2 A3                INC     DPTR
00A3 E0                MOVX    A,@DPTR
00A4 FF                MOV     R7,A
00A5 EF                MOV     A,R7
00A6 25E0              ADD     A,ACC
00A8 2400        R     ADD     A,#LOW CapSense_pcTable
00AA F582              MOV     DPL,A
00AC E4                CLR     A
00AD 3400        R     ADDC    A,#HIGH CapSense_pcTable
00AF F583              MOV     DPH,A
00B1 E4                CLR     A
00B2 93                MOVC    A,@A+DPTR
00B3 FE                MOV     R6,A
00B4 7401              MOV     A,#01H
00B6 93                MOVC    A,@A+DPTR
00B7 FF                MOV     R7,A
00B8 8F82              MOV     DPL,R7
00BA 8E83              MOV     DPH,R6
00BC 7408              MOV     A,#08H
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1412
00BF 900003            MOV     DPTR,#03H
00C2 120000      E     LCALL   ?C?ADDXBP
00C5 22                RET     
             ; FUNCTION _?CapSense_DisableSensor (END)

             ; FUNCTION _?CapSense_PreScan (BEGIN)
                                           ; SOURCE LINE # 1435
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 49  

0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1438
0008 850083      E     MOV     DPH,?C_XBP
000B 850082      E     MOV     DPL,?C_XBP+01H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 120000      R     LCALL   _?CapSense_SetScanSlotSettings
                                           ; SOURCE LINE # 1450
0013 90647A            MOV     DPTR,#0647AH
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 4401              ORL     A,#01H
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1458
001E 905870            MOV     DPTR,#05870H
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 54FE              ANL     A,#0FEH
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1462
0029 850083      E     MOV     DPH,?C_XBP
002C 850082      E     MOV     DPL,?C_XBP+01H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 120000      R     LCALL   _?CapSense_EnableSensor
                                           ; SOURCE LINE # 1566
0034 90647A            MOV     DPTR,#0647AH
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A 4402              ORL     A,#02H
003C FF                MOV     R7,A
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1576
003F 900001            MOV     DPTR,#01H
0042 120000      E     LCALL   ?C?ADDXBP
0045 22                RET     
             ; FUNCTION _?CapSense_PreScan (END)

             ; FUNCTION _?CapSense_PostScan (BEGIN)
                                           ; SOURCE LINE # 1603
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1606
0008 90647A            MOV     DPTR,#0647AH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54FC              ANL     A,#0FCH
0010 FF                MOV     R7,A
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 50  

0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1613
0013 90641D            MOV     DPTR,#0641DH
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 7E00              MOV     R6,#00H
001A EF                MOV     A,R7
001B 7F00              MOV     R7,#00H
001D FE                MOV     R6,A
001E 850083      E     MOV     DPH,?C_XBP
0021 850082      E     MOV     DPL,?C_XBP+01H
0024 E0                MOVX    A,@DPTR
0025 FD                MOV     R5,A
0026 ED                MOV     A,R5
0027 25E0              ADD     A,ACC
0029 2400        R     ADD     A,#LOW CapSense_sensorRaw
002B F582              MOV     DPL,A
002D E4                CLR     A
002E 3400        R     ADDC    A,#HIGH CapSense_sensorRaw
0030 F583              MOV     DPH,A
0032 EE                MOV     A,R6
0033 F0                MOVX    @DPTR,A
0034 A3                INC     DPTR
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1614
0037 850083      E     MOV     DPH,?C_XBP
003A 850082      E     MOV     DPL,?C_XBP+01H
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 25E0              ADD     A,ACC
0042 2400        R     ADD     A,#LOW CapSense_sensorRaw
0044 F582              MOV     DPL,A
0046 E4                CLR     A
0047 3400        R     ADDC    A,#HIGH CapSense_sensorRaw
0049 F583              MOV     DPH,A
004B C083              PUSH    DPH
004D C082              PUSH    DPL
004F E0                MOVX    A,@DPTR
0050 FE                MOV     R6,A
0051 A3                INC     DPTR
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 90640D            MOV     DPTR,#0640DH
0057 E0                MOVX    A,@DPTR
0058 FD                MOV     R5,A
0059 7C00              MOV     R4,#00H
005B EE                MOV     A,R6
005C 4C                ORL     A,R4
005D FE                MOV     R6,A
005E EF                MOV     A,R7
005F 4D                ORL     A,R5
0060 FF                MOV     R7,A
0061 D082              POP     DPL
0063 D083              POP     DPH
0065 EE                MOV     A,R6
0066 F0                MOVX    @DPTR,A
0067 A3                INC     DPTR
0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 51  

                                           ; SOURCE LINE # 1615
006A 850083      E     MOV     DPH,?C_XBP
006D 850082      E     MOV     DPL,?C_XBP+01H
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
0072 EF                MOV     A,R7
0073 25E0              ADD     A,ACC
0075 2400        R     ADD     A,#LOW CapSense_sensorRaw
0077 F582              MOV     DPL,A
0079 E4                CLR     A
007A 3400        R     ADDC    A,#HIGH CapSense_sensorRaw
007C F583              MOV     DPH,A
007E E0                MOVX    A,@DPTR
007F FE                MOV     R6,A
0080 A3                INC     DPTR
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 C3                CLR     C
0084 74FF              MOV     A,#0FFH
0086 9F                SUBB    A,R7
0087 FF                MOV     R7,A
0088 74FF              MOV     A,#0FFH
008A 9E                SUBB    A,R6
008B FE                MOV     R6,A
008C 850083      E     MOV     DPH,?C_XBP
008F 850082      E     MOV     DPL,?C_XBP+01H
0092 E0                MOVX    A,@DPTR
0093 FD                MOV     R5,A
0094 ED                MOV     A,R5
0095 25E0              ADD     A,ACC
0097 2400        R     ADD     A,#LOW CapSense_sensorRaw
0099 F582              MOV     DPL,A
009B E4                CLR     A
009C 3400        R     ADDC    A,#HIGH CapSense_sensorRaw
009E F583              MOV     DPH,A
00A0 EE                MOV     A,R6
00A1 F0                MOVX    @DPTR,A
00A2 A3                INC     DPTR
00A3 EF                MOV     A,R7
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1620
00A5 850083      E     MOV     DPH,?C_XBP
00A8 850082      E     MOV     DPL,?C_XBP+01H
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
00AD 120000      R     LCALL   _?CapSense_DisableSensor
                                           ; SOURCE LINE # 1624
00B0 7F00              MOV     R7,#00H
00B2 120000      E     LCALL   _CapSense_IdacCH0_SetValue
                                           ; SOURCE LINE # 1638
00B5 905870            MOV     DPTR,#05870H
00B8 E0                MOVX    A,@DPTR
00B9 FF                MOV     R7,A
00BA EF                MOV     A,R7
00BB 4401              ORL     A,#01H
00BD FF                MOV     R7,A
00BE EF                MOV     A,R7
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1640
00C0 900001            MOV     DPTR,#01H
00C3 120000      E     LCALL   ?C?ADDXBP
00C6 22                RET     
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 52  

             ; FUNCTION _?CapSense_PostScan (END)

             ; FUNCTION _?CapSense_SetPrescaler (BEGIN)
                                           ; SOURCE LINE # 1873
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1877
0008 850083      E     MOV     DPH,?C_XBP
000B 850082      E     MOV     DPL,?C_XBP+01H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 906429            MOV     DPTR,#06429H
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1878
0015 850083      E     MOV     DPH,?C_XBP
0018 850082      E     MOV     DPL,?C_XBP+01H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E C3                CLR     C
001F 13                RRC     A
0020 FF                MOV     R7,A
0021 906439            MOV     DPTR,#06439H
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1885
0026 900001            MOV     DPTR,#01H
0029 120000      E     LCALL   ?C?ADDXBP
002C 22                RET     
             ; FUNCTION _?CapSense_SetPrescaler (END)

             ; FUNCTION CapSense_GetPrescaler (BEGIN)
                                           ; SOURCE LINE # 1902
                                           ; SOURCE LINE # 1903
                                           ; SOURCE LINE # 1904
0000 900000      R     MOV     DPTR,#prescaler
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1908
0005 906429            MOV     DPTR,#06429H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#prescaler
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1917
000F 900000      R     MOV     DPTR,#prescaler
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
                                           ; SOURCE LINE # 1918
0014         ?C0030:
0014 22                RET     
             ; FUNCTION CapSense_GetPrescaler (END)

             ; FUNCTION _CapSense_SetScanSpeed (BEGIN)
                                           ; SOURCE LINE # 1936
0000 900000      R     MOV     DPTR,#scanSpeed
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 53  

                                           ; SOURCE LINE # 1937
                                           ; SOURCE LINE # 1938
0005 900000      R     MOV     DPTR,#scanSpeed
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 90648B            MOV     DPTR,#0648BH
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1939
000F 22                RET     
             ; FUNCTION _CapSense_SetScanSpeed (END)

             ; FUNCTION _CapSense_SetAnalogSwitchesSource (BEGIN)
                                           ; SOURCE LINE # 1963
0000 900000      R     MOV     DPTR,#src
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1965
                                           ; SOURCE LINE # 1966
0005 900000      R     MOV     DPTR,#src
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B B4010C            CJNE    A,#01H,?C0032
                                           ; SOURCE LINE # 1967
                                           ; SOURCE LINE # 1968
000E 90647A            MOV     DPTR,#0647AH
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 54EF              ANL     A,#0EFH
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1969
0019 22                RET     
001A         ?C0032:
                                           ; SOURCE LINE # 1971
                                           ; SOURCE LINE # 1972
001A 90647A            MOV     DPTR,#0647AH
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 4410              ORL     A,#010H
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1973
                                           ; SOURCE LINE # 1974
0025         ?C0034:
0025 22                RET     
             ; FUNCTION _CapSense_SetAnalogSwitchesSource (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1633    ----
   CONSTANT SIZE    =     61    ----
   XDATA SIZE       =     25       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.51   CAPSENSE                                                              11/29/2022 20:10:20 PAGE 54  

   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
