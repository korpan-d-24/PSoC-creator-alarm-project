C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CAPSENSE_CSHL
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\CapSense_CSHL.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.4\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\CapSense_CSHL.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DE
                    -BUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/CapSense_CSHL.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\CapSense
                    -_CSHL.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CapSense_CSHL.c
   3          * Version 3.50
   4          *
   5          * Description:
   6          *  This file provides the source code to the High Level APIs for the CapSesne
   7          *  CSD component.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "CapSense_CSHL.h"
  19          
  20          /* Storage of filters data */
  21          #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
  22                (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
              
                  uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
                  uint16 CapSense_rawFilterData2[CapSense_TOTAL_SENSOR_COUNT];
              
              #elif ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)   | \
                      (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)   | \
                      (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) | \
                      (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)   | \
                      (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER) )
                      
                  uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
              
              #else
  36              /* No Raw filters */
  37          #endif  /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
  38                  *    (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
  39                  */
  40          
  41          uint16 CapSense_sensorBaseline[CapSense_TOTAL_SENSOR_COUNT];
  42          uint8 CapSense_sensorBaselineLow[CapSense_TOTAL_SENSOR_COUNT];
  43          uint8 CapSense_sensorSignal[CapSense_TOTAL_SENSOR_COUNT];
  44          uint8 CapSense_sensorOnMask[(((CapSense_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)];
  45          
  46          uint8 CapSense_lowBaselineResetCnt[CapSense_TOTAL_SENSOR_COUNT];
  47          
  48          const uint8 CYCODE CapSense_fingerThreshold[] = {
  49              84u, 124u, 66u, 
  50          };
  51          
  52          const uint8 CYCODE CapSense_noiseThreshold[] = {
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 2   

  53              42u, 45u, 33u, 
  54          };
  55          
  56          const uint8 CYCODE CapSense_hysteresis[] = {
  57              0u, 18u, 9u, 
  58          };
  59          
  60          const uint8 CYCODE CapSense_debounce[] = {
  61              1u, 5u, 5u, 
  62          };
  63          
  64          uint8 CapSense_debounceCounter[] = {
  65              0u, 0u, 0u, 
  66          };
  67          
  68          const uint8 CYCODE CapSense_rawDataIndex[] = {
  69              0u, /* LinearSlider0__LS */
  70              5u, /* Button0__BTN */
  71              6u, /* Button1__BTN */
  72          
  73          };
  74          
  75          const uint8 CYCODE CapSense_numberOfSensors[] = {
  76              5u, /* LinearSlider0__LS */
  77              1u, /* Button0__BTN */
  78              1u, /* Button1__BTN */
  79          
  80          };
  81          
  82          const uint16 CYCODE CapSense_centroidMult[] = {
  83              6400u, 
  84          };
  85          
  86          
  87          
  88          
  89          /*******************************************************************************
  90          * Function Name: CapSense_BaseInit
  91          ********************************************************************************
  92          *
  93          * Summary:
  94          *  Loads the CapSense_sensorBaseline[sensor] array element with an 
  95          *  initial value which is equal to raw count value. 
  96          *  Resets to zero CapSense_sensorBaselineLow[sensor] and 
  97          *  CapSense_sensorSignal[sensor] array element.
  98          *  Loads CapSense_debounceCounter[sensor] array element with initial 
  99          *  value equal CapSense_debounce[].
 100          *  Loads the CapSense_rawFilterData2[sensor] and 
 101          *  CapSense_rawFilterData2[sensor] array element with an 
 102          *  initial value which is equal raw count value if raw data filter is enabled.
 103          *
 104          * Parameters:
 105          *  sensor:  Sensor number.
 106          *
 107          * Return:
 108          *  None
 109          *
 110          * Global Variables:
 111          *  CapSense_sensorBaseline[]    - used to store baseline value.
 112          *  CapSense_sensorBaselineLow[] - used to store fraction byte of 
 113          *  baseline value.
 114          *  CapSense_sensorSignal[]      - used to store diffence between 
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 3   

 115          *  current value of raw data and previous value of baseline.
 116          *  CapSense_debounceCounter[]   - used to store current debounce 
 117          *  counter of sensor. Widget which has this parameter are buttons, matrix 
 118          *  buttons, proximity, guard. All other widgets haven't debounce parameter
 119          *  and use the last element of this array with value 0 (it means no debounce).
 120          *  CapSense_rawFilterData1[]    - used to store previous sample of 
 121          *  any enabled raw data filter.
 122          *  CapSense_rawFilterData2[]    - used to store before previous sample
 123          *  of enabled raw data filter. Only required for median or average filters.
 124          *
 125          * Reentrant:
 126          *  No
 127          *
 128          *******************************************************************************/
 129          void CapSense_BaseInit(uint8 sensor) 
 130          {
 131   1          #if ((CapSense_TOTAL_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || \
 132   1               (CapSense_TOTAL_GENERICS_COUNT))
 133   1              uint8 widget = CapSense_widgetNumber[sensor];
 134   1          #endif /* ((CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)) */
 135   1          
 136   1          #if (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)
                      uint8 debounceIndex;
                  #endif  /* (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) */
 139   1          
 140   1          #if (CapSense_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      if(widget < CapSense_END_OF_WIDGETS_INDEX)
                      {
                  #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 145   1          
 146   1          /* Initialize Baseline */
 147   1          CapSense_sensorBaseline[sensor] = CapSense_sensorRaw[sensor];
 148   1          CapSense_sensorBaselineLow[sensor] = 0u;
 149   1          CapSense_sensorSignal[sensor] = 0u;
 150   1              
 151   1          if(widget > CapSense_END_OF_TOUCH_PAD_INDEX)
 152   1          {
 153   2              CapSense_debounceCounter[widget - (CapSense_END_OF_TOUCH_PAD_INDEX + 1)] =  CapSense_debounce[widg
             -et];
 154   2          }
 155   1      
 156   1          
 157   1          #if ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) |\
 158   1               (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
              
                      CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
                      CapSense_rawFilterData2[sensor] = CapSense_sensorRaw[sensor];
                  
                  #elif ((CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) |\
                         (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) |\
                         (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) |\
                         (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER) |\
                         (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER))
                          
                      CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
                  
                  #else
 172   1              /* No Raw filters */
 173   1          #endif  /* ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
 174   1                  *   (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
 175   1                  */
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 4   

 176   1          
 177   1          #if (CapSense_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      }
                  #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 181   1      }
 182          
 183          
 184          /*******************************************************************************
 185          * Function Name: CapSense_InitializeSensorBaseline
 186          ********************************************************************************
 187          *
 188          * Summary:
 189          *  Loads the CapSense_sensorBaseline[sensor] array element with an 
 190          *  initial value by scanning the selected sensor (one channel design) or pair 
 191          *  of sensors (two channels designs). The raw count value is copied into the 
 192          *  baseline array for each sensor. The raw data filters are initialized if 
 193          *  enabled.
 194          *
 195          * Parameters:
 196          *  sensor:  Sensor number.
 197          *
 198          * Return:
 199          *  None
 200          *
 201          * Reentrant:
 202          *  No
 203          *
 204          *******************************************************************************/
 205          void CapSense_InitializeSensorBaseline(uint8 sensor)
 206                                    
 207          {
 208   1          /* Scan sensor */
 209   1          CapSense_ScanSensor(sensor);
 210   1          while(CapSense_IsBusy() != 0u)
 211   1          {
 212   2              /* Wait while busy */
 213   2          }
 214   1          
 215   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
 216   1              /* Initialize Baseline, Signal and debounce counters */       
 217   1              CapSense_BaseInit(sensor);
 218   1              
 219   1          #else
                  
                      if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH0)
                      {
                          /* Initialize Baseline, Signal and debounce counters */ 
                          CapSense_BaseInit(sensor);
                      }
                      
                      if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH1)
                      {
                          /* Initialize Baseline, Signal and debounce counters */
                          CapSense_BaseInit(sensor + CapSense_TOTAL_SENSOR_COUNT__CH0);
                      }
                  
                  #endif  /* (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN) */
 234   1      }
 235          
 236          
 237          /*******************************************************************************
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 5   

 238          * Function Name: CapSense_InitializeAllBaselines
 239          ********************************************************************************
 240          *
 241          * Summary:
 242          *  Uses the CapSense_InitializeSensorBaseline function to loads the 
 243          *  CapSense_sensorBaseline[] array with an initial values by scanning 
 244          *  all sensors. The raw count values are copied into the baseline array for 
 245          *  all sensors. The raw data filters are initialized if enabled.
 246          *
 247          * Parameters:
 248          *  None
 249          *
 250          * Return:
 251          *  None
 252          *
 253          * Reentrant:
 254          *  No
 255          *
 256          *******************************************************************************/
 257          void CapSense_InitializeAllBaselines(void)
 258                                    
 259          {
 260   1          uint8 i;
 261   1          
 262   1          /* The baseline initialize by sensor of sensor pair */
 263   1          for(i = 0u; i < CapSense_TOTAL_SCANSLOT_COUNT; i++)
 264   1          {
 265   2              CapSense_InitializeSensorBaseline(i);
 266   2          }
 267   1      }
 268          
 269          
 270          /*******************************************************************************
 271          * Function Name: CapSense_InitializeEnabledBaselines
 272          ********************************************************************************
 273          *
 274          * Summary:
 275          *  Scans all enabled widgets and the raw count values are copied into the 
 276          *  baseline array for all sensors enabled in scanning process. Baselines 
 277          *  initialize with zero values for sensors disabled from scanning process. 
 278          *  The raw data filters are initialized if enabled.
 279          *
 280          * Parameters:
 281          *  None
 282          *
 283          * Return:
 284          *  None
 285          *
 286          * Reentrant:
 287          *  No
 288          *
 289          *******************************************************************************/
 290          void CapSense_InitializeEnabledBaselines(void)
 291                                       
 292          {
 293   1          uint8 i;
 294   1          uint8 pos;
 295   1          uint8 enMask;
 296   1          
 297   1          CapSense_ScanEnabledWidgets();
 298   1          while(CapSense_IsBusy() != 0u)
 299   1          {
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 6   

 300   2              /* Wait while busy */
 301   2          }
 302   1          
 303   1          for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 304   1          {
 305   2              pos = (i >> 3u);
 306   2              enMask = 0x01u << (i & 0x07u);
 307   2              
 308   2              /* Clear raw data if sensor is disabled from scanning process */
 309   2              if((CapSense_sensorEnableMask[pos] & enMask) == 0u)
 310   2              {
 311   3                  CapSense_sensorRaw[i] = 0u;
 312   3              }
 313   2              
 314   2              /* Initialize baselines */
 315   2              CapSense_BaseInit(i);
 316   2          }
 317   1      }  
 318          
 319          
 320          /*******************************************************************************
 321          * Function Name: CapSense_UpdateSensorBaseline
 322          ********************************************************************************
 323          *
 324          * Summary:
 325          *  Updates the CapSense_sensorBaseline[sensor] array element using the 
 326          *  LP filter with k = 256. The signal calculates the difference of count by 
 327          *  subtracting the previous baseline from the current raw count value and stores
 328          *  it in CapSense_SensorSignal[sensor]. 
 329          *  If auto reset option is enabled the baseline updated regards noise threshold. 
 330          *  If auto reset option is disabled the baseline stops updating if signal is 
 331          *  greater that zero and baseline loads with raw count value if signal is less 
 332          *  that noise threshold.
 333          *  Raw data filters are applied to the values if enabled before baseline 
 334          *  calculation.
 335          *
 336          * Parameters:
 337          *  sensor:  Sensor number.
 338          *
 339          * Return:
 340          *  None
 341          *
 342          * Global Variables:
 343          *  CapSense_sensorBaseline[]    - used to store baseline value.
 344          *  CapSense_sensorBaselineLow[] - used to store fraction byte of 
 345          *  baseline value.
 346          *  CapSense_sensorSignal[]      - used to store diffence between 
 347          *  current value of raw data and previous value of baseline.
 348          *  CapSense_rawFilterData1[]    - used to store previous sample of 
 349          *  any enabled raw data filter.
 350          *  CapSense_rawFilterData2[]    - used to store before previous sample
 351          *  of enabled raw data filter. Only required for median or average filters.
 352          *
 353          * Reentrant:
 354          *  No
 355          *
 356          *******************************************************************************/
 357           void CapSense_UpdateSensorBaseline(uint8 sensor)
 358                                           
 359          {
 360   1          uint32 calc;
 361   1          uint16 tempRaw;
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 7   

 362   1          uint16 filteredRawData;
 363   1          uint8 widget = CapSense_widgetNumber[sensor];
 364   1          uint8 noiseThreshold = CapSense_noiseThreshold[widget];
 365   1          
 366   1          #if (CapSense_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      if(widget < CapSense_END_OF_WIDGETS_INDEX)
                      {
                  #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 371   1          
 372   1          filteredRawData = CapSense_sensorRaw[sensor];
 373   1          
 374   1          #if (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)
                      tempRaw = filteredRawData;
                      filteredRawData = CapSense_MedianFilter(filteredRawData, CapSense_rawFilterData1[sensor], 
                                                                      CapSense_rawFilterData2[sensor]);
                      CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
                      CapSense_rawFilterData1[sensor] = tempRaw;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)
                      tempRaw = filteredRawData;
                      filteredRawData = CapSense_AveragingFilter(filteredRawData, CapSense_rawFilterData1[sensor],
                                                                         CapSense_rawFilterData2[sensor]);
                      CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
                      CapSense_rawFilterData1[sensor] = tempRaw;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)
                      filteredRawData = CapSense_IIR2Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)
                      filteredRawData = CapSense_IIR4Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                          
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)
                      filteredRawData = CapSense_JitterFilter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
                      filteredRawData = CapSense_IIR8Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
                      filteredRawData = CapSense_IIR16Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                      
                  #else
 409   1              /* No Raw filters */
 410   1          #endif  /* (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) */
 411   1          
 412   1          #if (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)
                      CapSense_CalculateThresholds(sensor);
                  #endif /* (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
 415   1      
 416   1      
 417   1          /* Baseline calculation */
 418   1          /* Calculate difference RawData[cur] - Baseline[prev] */
 419   1          if(filteredRawData >= CapSense_sensorBaseline[sensor])
 420   1          {
 421   2              tempRaw = filteredRawData - CapSense_sensorBaseline[sensor];
 422   2              widget = 1u;    /* Positive difference - Calculate the Signal */
 423   2          }
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 8   

 424   1          else
 425   1          {
 426   2              tempRaw = CapSense_sensorBaseline[sensor] - filteredRawData;
 427   2              widget = 0u;    /* Negative difference - Do NOT calculate the Signal */
 428   2          }
 429   1      
 430   1          if((widget == 0u) && (tempRaw > (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD))
 431   1          {
 432   2              if(CapSense_lowBaselineResetCnt[sensor] >= CapSense_LOW_BASELINE_RESET)
 433   2              {
 434   3                  CapSense_BaseInit(sensor);
 435   3                  CapSense_lowBaselineResetCnt[sensor] = 0u;
 436   3              }
 437   2              else
 438   2              {
 439   3                  CapSense_lowBaselineResetCnt[sensor]++;
 440   3              }
 441   2          }
 442   1          else
 443   1          {
 444   2              #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 445   2                  /* Update Baseline if lower that noiseThreshold */
 446   2                  if ( (tempRaw <= (uint16) noiseThreshold) || 
 447   2                       ((tempRaw < (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD)
 448   2                         && (widget == 0u)))
 449   2                  {
 450   3              #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 451   3                      /* Make full Baseline 23 bits */
 452   3                      calc = (uint32) CapSense_sensorBaseline[sensor] << 8u;
 453   3                      calc |= (uint32) CapSense_sensorBaselineLow[sensor];
 454   3      
 455   3                      /* Add Raw Data to Baseline */
 456   3                      calc += filteredRawData;
 457   3      
 458   3                      /* Sub the high Baseline */
 459   3                      calc -= CapSense_sensorBaseline[sensor];
 460   3      
 461   3                      /* Put Baseline and BaselineLow */
 462   3                      CapSense_sensorBaseline[sensor] = ((uint16) (calc >> 8u));
 463   3                      CapSense_sensorBaselineLow[sensor] = ((uint8) calc);
 464   3      
 465   3                      CapSense_lowBaselineResetCnt[sensor] = 0u;
 466   3              #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 467   3                  }
 468   2              #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 469   2          }
 470   1      
 471   1          /* Calculate Signal if possitive difference > noiseThreshold */
 472   1          if((tempRaw > (uint16) noiseThreshold) && (widget != 0u))
 473   1          {
 474   2              #if (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8)
 475   2                  /* Over flow defence for uint8 */
 476   2                  if (tempRaw > 0xFFu)
 477   2                  {
 478   3                      CapSense_sensorSignal[sensor] = 0xFFu;
 479   3                  }    
 480   2                  else 
 481   2                  {
 482   3                      CapSense_sensorSignal[sensor] = ((uint8) tempRaw);
 483   3                  }
 484   2              #else
                          CapSense_sensorSignal[sensor] = ((uint16) tempRaw);
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 9   

                      #endif  /* (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8) */
 487   2          }
 488   1          else
 489   1          {
 490   2              /* Signal is zero */
 491   2              CapSense_sensorSignal[sensor] = 0u;
 492   2          }
 493   1      
 494   1          #if (CapSense_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      }
                  #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 498   1      }
 499          
 500          
 501          /*******************************************************************************
 502          * Function Name: CapSense_UpdateEnabledBaselines
 503          ********************************************************************************
 504          *
 505          * Summary:
 506          *  Checks CapSense_sensorEnableMask[] array and calls the 
 507          *  CapSense_UpdateSensorBaseline function to update the baselines 
 508          *  for enabled sensors.
 509          *
 510          * Parameters:
 511          *  None
 512          *
 513          * Return:
 514          *  None
 515          *
 516          * Global Variables:
 517          *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 518          *  state.
 519          *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 520          *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 521          *  CapSense_sensorEnableMask[1] contains the masked bits for 
 522          *  sensors 8 through 15 (if needed), and so on.
 523          *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 524          *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 525          *
 526          * Reentrant:
 527          *  No
 528          *
 529          *******************************************************************************/
 530           void CapSense_UpdateEnabledBaselines(void)
 531                                           
 532          {
 533   1          uint8 i;
 534   1          uint8 pos;
 535   1          uint8 enMask;
 536   1          
 537   1          for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 538   1          {
 539   2              pos = (i >> 3u);
 540   2              enMask = (uint8)(0x01u << (i & 0x07u));
 541   2              if((CapSense_sensorEnableMask[pos] & enMask) != 0u)
 542   2              {
 543   3                  CapSense_UpdateSensorBaseline(i);
 544   3              }
 545   2          }
 546   1      }
 547          
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 10  

 548          
 549          /*******************************************************************************
 550          * Function Name: CapSense_CheckIsSensorActive
 551          ********************************************************************************
 552          *
 553          * Summary:
 554          *  Compares the CapSense_SensorSignal[sensor] array element to finger
 555          *  threshold of widget it belongs to. The hysteresis and debounce are taken into 
 556          *  account. The hysteresis is added or subtracted from the finger threshold 
 557          *  based on whether the sensor is currently active. 
 558          *  If the sensor is active, the threshold is lowered by the hysteresis amount.
 559          *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
 560          *  The debounce counter added to the sensor active transition.
 561          *  This function updates CapSense_SensorOnMask[] array element.
 562          *
 563          * Parameters:
 564          *  sensor:  Sensor number.
 565          *
 566          * Return:
 567          *  Returns sensor state 1 if active, 0 if not active.
 568          *
 569          * Global Variables:
 570          *  CapSense_sensorSignal[]      - used to store diffence between 
 571          *  current value of raw data and previous value of baseline.
 572          *  CapSense_debounceCounter[]   - used to store current debounce 
 573          *  counter of sensor. Widget which has this parameter are buttons, matrix 
 574          *  buttons, proximity, guard. All other widgets haven't debounce parameter
 575          *  and use the last element of this array with value 0 (it means no debounce).
 576          *  CapSense_sensorOnMask[] - used to store sensors on/off state.
 577          *  CapSense_sensorOnMask[0] contains the masked bits for sensors 
 578          *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 579          *  CapSense_sensorEnableMask[1] contains the masked bits for 
 580          *  sensors 8 through 15 (if needed), and so on.
 581          *  0 - sensor is inactive.
 582          *  1 - sensor is active.
 583          *
 584          * Reentrant:
 585          *  No
 586          *
 587          *******************************************************************************/
 588          uint8 CapSense_CheckIsSensorActive(uint8 sensor)
 589                                            
 590          {
 591   1          uint8 debounceIndex;
 592   1          /* Get On/Off mask */
 593   1          uint8 pos = (sensor >> 3u);
 594   1          uint8 onMask = 0x01u << (sensor & 0x07u);
 595   1          /* Prepare to find debounce counter index */
 596   1          uint8 widget = CapSense_widgetNumber[sensor];
 597   1          uint8 fingerThreshold = CapSense_fingerThreshold[widget];
 598   1          uint8 hysteresis = CapSense_hysteresis[widget];
 599   1          uint8 debounce = CapSense_debounce[widget];
 600   1          
 601   1          if (widget < CapSense_TOTAL_CENTROIDS_COUNT)
 602   1          {
 603   2              debounceIndex = CapSense_UNUSED_DEBOUNCE_COUNTER_INDEX;
 604   2              CapSense_debounceCounter[debounceIndex] = 1u;
 605   2          }
 606   1          else
 607   1          {
 608   2              debounceIndex = widget - (CapSense_END_OF_TOUCH_PAD_INDEX + 1);
 609   2          }
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 11  

 610   1      
 611   1          
 612   1          /* Was on */
 613   1          if (0u != (CapSense_sensorOnMask[pos] & onMask))
 614   1          {
 615   2              /* Hysteresis minus */
 616   2              if (CapSense_sensorSignal[sensor] < (fingerThreshold - hysteresis))
 617   2              {
 618   3                  CapSense_sensorOnMask[pos] &= (uint8)~onMask;
 619   3                  CapSense_debounceCounter[debounceIndex] = debounce; 
 620   3              }
 621   2          }
 622   1          else    /* Was off */
 623   1          {
 624   2              /* Hysteresis plus */
 625   2              if (CapSense_sensorSignal[sensor] > (fingerThreshold + hysteresis))
 626   2              {
 627   3                  /* Sensor active, decrement debounce counter */
 628   3                  if (CapSense_debounceCounter[debounceIndex] <= 1u)
 629   3                  {
 630   4                      CapSense_sensorOnMask[pos] |= onMask; 
 631   4                  }
 632   3                  CapSense_debounceCounter[debounceIndex]--;
 633   3              }
 634   2              else
 635   2              {
 636   3                  /* Sensor inactive - reset Debounce counter */
 637   3                  CapSense_debounceCounter[debounceIndex] = debounce;
 638   3              }
 639   2          }
 640   1          
 641   1          return (((CapSense_sensorOnMask[pos] & onMask) != 0u) ? 1u : 0u);
 642   1      }
 643          
 644          
 645          /*******************************************************************************
 646          * Function Name: CapSense_CheckIsWidgetActive
 647          ********************************************************************************
 648          *
 649          * Summary:
 650          *  Use function CapSense_CheckIsSensorActive() to update 
 651          *  CapSense_sensorOnMask[] for all sensors within the widget.
 652          *  If one of sensors within widget is active the function return that widget is 
 653          *  active.
 654          *  The touch pad and matrix buttons widgets need to have active sensor within 
 655          *  col and row to return widget active status.
 656          *
 657          * Parameters:
 658          *  widget:  widget number.
 659          *
 660          * Return:
 661          *  Returns widget sensor state 1 if one or more sensors within widget is/are 
 662          *  active, 0 if all sensors within widget are inactive.
 663          *
 664          * Reentrant:
 665          *  No
 666          *
 667          *******************************************************************************/
 668          uint8 CapSense_CheckIsWidgetActive(uint8 widget)
 669                                           
 670          {
 671   1          uint8 rawIndex = CapSense_rawDataIndex[widget];
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 12  

 672   1          uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 673   1          uint8 state = 0u;
 674   1      
 675   1          /* Check all sensors of the widget */
 676   1          do
 677   1          {
 678   2              if(CapSense_CheckIsSensorActive(rawIndex) != 0u)
 679   2              {
 680   3                  state = CapSense_SENSOR_1_IS_ACTIVE;
 681   3              }
 682   2              rawIndex++;
 683   2          }
 684   1          while(rawIndex < numberOfSensors);
 685   1          
 686   1      
 687   1          
 688   1          return (state);
 689   1      }
 690          
 691          
 692          /*******************************************************************************
 693          * Function Name: CapSense_CheckIsAnyWidgetActive
 694          ********************************************************************************
 695          *
 696          * Summary:
 697          *  Compares all sensors of the CapSense_signal[] array to their finger 
 698          *  threshold. Calls CapSense_CheckIsWidgetActive() for each widget so 
 699          *  the CapSense_SensorOnMask[] array is up to date after calling this 
 700          *  function.
 701          *
 702          * Parameters:
 703          *  widget:  widget number.
 704          *
 705          * Return:
 706          *  Returns 1 if any widget is active, 0 none of widgets are active.
 707          *
 708          * Reentrant:
 709          *  No
 710          *
 711          *******************************************************************************/
 712          uint8 CapSense_CheckIsAnyWidgetActive(void)
 713                                           
 714          {
 715   1          uint8 i;
 716   1          uint8 state = 0u;
 717   1          
 718   1          for(i = 0u; i < CapSense_TOTAL_WIDGET_COUNT; i++)
 719   1          {
 720   2              if (CapSense_CheckIsWidgetActive(i) != 0u)
 721   2              {
 722   3                  state = CapSense_WIDGET_IS_ACTIVE;
 723   3              }
 724   2          }
 725   1          
 726   1      
 727   1          return (state);
 728   1      }
 729          
 730          
 731          /*******************************************************************************
 732          * Function Name: CapSense_EnableWidget
 733          ********************************************************************************
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 13  

 734          *
 735          * Summary:
 736          *  Enable all widget elements (sensors) to scanning process.
 737          *
 738          * Parameters:
 739          *  widget:  widget number.
 740          *
 741          * Return:
 742          *  None
 743          *
 744          * Global Variables:
 745          *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 746          *  state.
 747          *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 748          *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 749          *  CapSense_sensorEnableMask[1] contains the masked bits for 
 750          *  sensors 8 through 15 (if needed), and so on.
 751          *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 752          *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 753          *
 754          * Reentrant:
 755          *  No
 756          *
 757          *******************************************************************************/
 758          void CapSense_EnableWidget(uint8 widget)
 759                                             
 760          {
 761   1          uint8 pos;
 762   1          uint8 enMask;
 763   1          uint8 rawIndex = CapSense_rawDataIndex[widget];
 764   1          uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 765   1          
 766   1          /* Enable all sensors of the widget */
 767   1          do
 768   1          {
 769   2              pos = (rawIndex >> 3u);
 770   2              enMask = 0x01u << (rawIndex & 0x07u);
 771   2              
 772   2              CapSense_sensorEnableMask[pos] |= enMask;
 773   2              rawIndex++;
 774   2          }
 775   1          while(rawIndex < numberOfSensors);
 776   1          
 777   1      
 778   1      }
 779          
 780          
 781          /*******************************************************************************
 782          * Function Name: CapSense_DisableWidget
 783          ********************************************************************************
 784          *
 785          * Summary:
 786          *  Disable all widget elements (sensors) from scanning process.
 787          *
 788          * Parameters:
 789          *  widget:  widget number.
 790          *
 791          * Return:
 792          *  None
 793          *
 794          * Global Variables:
 795          *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 14  

 796          *  state.
 797          *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 798          *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 799          *  CapSense_sensorEnableMask[1] contains the masked bits for 
 800          *  sensors 8 through 15 (if needed), and so on.
 801          *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 802          *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 803          *
 804          * Reentrant:
 805          *  No
 806          *
 807          *******************************************************************************/
 808          void CapSense_DisableWidget(uint8 widget)
 809                                              
 810          {
 811   1          uint8 pos;
 812   1          uint8 enMask;
 813   1          uint8 rawIndex = CapSense_rawDataIndex[widget];
 814   1          uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 815   1         
 816   1          /* Disable all sensors of the widget */
 817   1          do
 818   1          {
 819   2              pos = (rawIndex >> 3u);
 820   2              enMask = 0x01u << (rawIndex & 0x07u);
 821   2              
 822   2              CapSense_sensorEnableMask[pos] &= (uint8)~enMask;
 823   2              rawIndex++;
 824   2          }
 825   1          while(rawIndex < numberOfSensors);
 826   1          
 827   1      
 828   1      }
 829          #if(CapSense_TOTAL_CENTROIDS_COUNT)
 830              /*******************************************************************************
 831              * Function Name: CapSense_FindMaximum
 832              ********************************************************************************
 833              *
 834              * Summary:
 835              *  Finds index of maximum element within defined centroid. Checks 
 836              *  CapSense_SensorSignal[] within defined cenrtoid and 
 837              *  returns index of maximum element. The values below finger threshold are 
 838              *  ignored.
 839              *  The centrod defines by offset of first element and number of elements - count.
 840              *  The diplexed centroid requires at least consecutive two elements above
 841              *  FingerThreshold to find index of maximum element.
 842              * 
 843              * Parameters:
 844              *  offset:  Start index of cetroid in CapSense_sensorSignal[] array.
 845              *  count:   number of elements within centroid.
 846              *  fingerThreshold:  Finger threshould.
 847              *  diplex:   pointer to diplex table.
 848              * 
 849              * Return:
 850              *  Returns index of maximum element within defined centroid.
 851              *  If index of maximum element doesn't find the 0xFF returns.
 852              * 
 853              *******************************************************************************/
 854              #if (CapSense_IS_DIPLEX_SLIDER)
                      uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold, const uint8 CYCODE *d
             -iplex)
                                                             
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 15  

                  #else 
 858                  uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold)
 859                                                         
 860              #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 861              {
 862   1              uint8 i;
 863   1              #if (CapSense_IS_DIPLEX_SLIDER)        
                          uint8 curPos = 0u;
                          /* No centroid at the Start */
                          uint8 curCntrdSize = 0u;
                          uint8 curCtrdStartPos = 0xFFu;
                          /* The biggset centroid is zero */
                          uint8 biggestCtrdSize = 0u;
                          uint8 biggestCtrdStartPos = 0u;
                      #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 872   1              uint8 maximum = 0xFFu;
 873   1              uint8 temp = 0u;
 874   1              uint8 *startOfSlider = &CapSense_sensorSignal[offset]; 
 875   1      
 876   1              #if (CapSense_IS_DIPLEX_SLIDER)        
                          if(diplex != 0u)
                          {
                              /* Initialize */
                              i = 0u;
                              
                              /* Make slider x2 as Diplexed */
                              count <<= 1u;
                              while(1u)
                              { 
                                  if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
                                  {
                                      if (curCtrdStartPos == 0xFFu)
                                      {
                                          /* Start of centroid */
                                          curCtrdStartPos = i;
                                          curCntrdSize++;
                                      }
                                      else
                                      {
                                          curCntrdSize++;
                                      }
                                  }
                                  else   /* Select the bigest and indicate zero start */
                                  {          
                                      if(curCntrdSize > 0u)
                                      {
                                          /* We are in the end of current */
                                          if(curCntrdSize > biggestCtrdSize)
                                          {
                                              biggestCtrdSize = curCntrdSize;
                                              biggestCtrdStartPos = curCtrdStartPos;
                                          }
                                          
                                          curCntrdSize = 0u;
                                          curCtrdStartPos = 0xFFu;
                                      }
                                  }
                                  
                                  i++; 
                                  curPos = diplex[i];
                                  if(i == count)
                                  {
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 16  

                                      break;
                                  }            
                              }
                                  
                                  /* Find the biggest centroid if two are the same size, last one wins
                                     We are in the end of current */
                              if (curCntrdSize >= biggestCtrdSize) 
                              {
                                  biggestCtrdSize = curCntrdSize;
                                  biggestCtrdStartPos = curCtrdStartPos;
                              }
                          }
                          else
                          {
                              /* Without diplexing */ 
                              biggestCtrdSize = count;
                          }
                                      
              
                          /* Check centroid size */
                          #if (CapSense_IS_NON_DIPLEX_SLIDER)
                              if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
                          #else                    
                              if(biggestCtrdSize >= 2u)
                          #endif /* (CapSense_IS_NON_DIPLEX_SLIDER) */
                              {
                                  for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
                                  {
                                      #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)
                                          if (diplex == 0u)
                                          {
                                              curPos = i;
                                          }
                                          else
                                          {
                                              curPos = diplex[i];
                                          }                    
                                      #elif (CapSense_IS_DIPLEX_SLIDER)                    
                                          curPos = diplex[i];                    
                                      #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
                                      /* Looking for the grater element within centroid */
                                      if(startOfSlider[curPos] > fingerThreshold)
                                      {
                                          if(startOfSlider[curPos] > temp)
                                          {
                                              maximum = i;
                                              temp = startOfSlider[curPos];
                                          }
                                      }
                                  }
                              } 
                      #else
 971   1                  for (i = 0u; i < count; i++)
 972   1                  {                      
 973   2                      /* Looking for the grater element within centroid */
 974   2                      if(startOfSlider[i] > fingerThreshold)
 975   2                      {
 976   3                          if(startOfSlider[i] > temp)
 977   3                          {
 978   4                              maximum = i;
 979   4                              temp = startOfSlider[i];
 980   4                          }
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 17  

 981   3                      }
 982   2                  }    
 983   1              #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 984   1              return (maximum);
 985   1          }
 986              
 987              
 988              /*******************************************************************************
 989              * Function Name: CapSense_CalcCentroid
 990              ********************************************************************************
 991              *
 992              * Summary:
 993              *  Returns position value calculated accoring index of maximum element and API
 994              *  resolution.
 995              *
 996              * Parameters:
 997              *  type:  widget type.
 998              *  diplex:  pointer to diplex table.
 999              *  maximum:  Index of maximum element within centroid.
1000              *  offset:   Start index of cetroid in CapSense_SensorSignal[] array.
1001              *  count:    Number of elements within centroid.
1002              *  resolution:  multiplicator calculated according to centroid type and
1003              *  API resolution.
1004              *  noiseThreshold:  Noise threshould.
1005              * 
1006              * Return:
1007              *  Returns position value of the slider.
1008              * 
1009              *
1010              * Reentrant:
1011              *  No.
1012              *
1013              *******************************************************************************/
1014              uint8 CapSense_CalcCentroid(uint8 maximum, uint8 offset, 
1015                                                  uint8 count, uint16 resolution, uint8 noiseThreshold)
1016                                                      
1017              {
1018   1              #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u))
1019   1                  uint8 posPrev = 0u;
1020   1                  uint8 posNext = 0u;
1021   1              #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT>0u)) */
1022   1                     
1023   1              #if (CapSense_IS_DIPLEX_SLIDER)                
                          uint8 pos;
                      #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1026   1              
1027   1              /* Helps while centroid calulation */
1028   1              static uint8 CapSense_centroid[3u];
1029   1      
1030   1              uint8 position;
1031   1              uint32 numerator;
1032   1              int32 denominator;
1033   1              uint8 *startOfSlider = &CapSense_sensorSignal[offset];
1034   1                          
1035   1              #if (CapSense_ADD_SLIDER_TYPE)
                          if(type == CapSense_TYPE_RADIAL_SLIDER)
                          {
                      #endif /* (CapSense_ADD_SLIDER_TYPE) */
1039   1      
1040   1                  #if (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)                
                              /* Copy Signal for found centriod */
                              CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 18  

                               
                              /* Check borders for ROTARY Slider */
                              if (maximum == 0u)                   /* Start of centroid */
                              { 
                                  CapSense_centroid[CapSense_POS_PREV] = startOfSlider[count - 1u];
                                  CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[1u];
                              }
                              else if (maximum == (count - 1u))    /* End of centroid */
                              {
                                  CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
                                  CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[0u];
                              }
                              else                                /* Not first Not last */
                              {
                                  CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
                                  CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[maximum + 1u];
                              }
                          #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1061   1      
1062   1              #if (CapSense_ADD_SLIDER_TYPE)
                          }
                          else
                          {
                      #endif /* (CapSense_ADD_SLIDER_TYPE) */
1067   1      
1068   1                  #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u))
1069   1                      #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)                    
                                  /* Calculate next and previous near to maximum */
                                  if(diplex == 0u)
                                  {
                                      pos     = maximum;
                                      posPrev = maximum - 1u;
                                      posNext = maximum + 1u; 
                                  }
                                  else
                                  {
                                      pos     = diplex[maximum];
                                      posPrev = diplex[maximum - 1u];
                                      posNext = diplex[maximum + 1u];
                                      count <<= 1u;
                                  }                    
                              #elif (CapSense_IS_DIPLEX_SLIDER)
                                  /* Calculate next and previous near to maximum */
                                  pos     = diplex[maximum];
                                  posPrev = diplex[maximum - 1u];
                                  posNext = diplex[maximum + 1u];
                                  count <<= 1u;                    
                              #else                    
1091   1                          /* Calculate next and previous near to maximum */
1092   1                          if (maximum >= 1u)
1093   1                          {
1094   2                              posPrev = maximum - 1u;
1095   2                          }
1096   1                          posNext = maximum + 1u; 
1097   1                      #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
1098   1                              
1099   1                      /* Copy Signal for found centriod */
1100   1                      #if (CapSense_IS_DIPLEX_SLIDER)
                                  CapSense_centroid[CapSense_POS] = startOfSlider[pos];
                              #else
1103   1                          CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1104   1                      #endif /* (CapSense_IS_DIPLEX_SLIDER) */
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 19  

1105   1                          
1106   1                      /* Check borders for LINEAR Slider */
1107   1                      if (maximum == 0u)                   /* Start of centroid */
1108   1                      { 
1109   2                          CapSense_centroid[CapSense_POS_PREV] = 0u;
1110   2                          CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1111   2                      }
1112   1                      else if (maximum == ((count) - 1u)) /* End of centroid */
1113   1                      {
1114   2                          CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1115   2                          CapSense_centroid[CapSense_POS_NEXT] = 0u;
1116   2                      }
1117   1                      else                                /* Not first Not last */
1118   1                      {
1119   2                          CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1120   2                          CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1121   2                      }
1122   1                  #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u)||(CapSense_TOTAL_TOUCH_PADS_COUNT>0u))*/
1123   1      
1124   1              #if (CapSense_ADD_SLIDER_TYPE)
                          }
                      #endif /* (CapSense_ADD_SLIDER_TYPE) */
1127   1          
1128   1              /* Subtract noiseThreshold */
1129   1              if(CapSense_centroid[CapSense_POS_PREV] > noiseThreshold)
1130   1              {
1131   2                  CapSense_centroid[CapSense_POS_PREV] -= noiseThreshold;
1132   2              }
1133   1              else
1134   1              {
1135   2                  CapSense_centroid[CapSense_POS_PREV] = 0u;
1136   2              }
1137   1              
1138   1              /* Maximum always grater than fingerThreshold, so grate than noiseThreshold */
1139   1              CapSense_centroid[CapSense_POS] -= noiseThreshold;
1140   1              
1141   1              /* Subtract noiseThreshold */
1142   1              if(CapSense_centroid[CapSense_POS_NEXT] > noiseThreshold)
1143   1              {
1144   2                  CapSense_centroid[CapSense_POS_NEXT] -= noiseThreshold;
1145   2              }
1146   1              else
1147   1              {
1148   2                  CapSense_centroid[CapSense_POS_NEXT] = 0u;
1149   2              }
1150   1              
1151   1              
1152   1              /* Si+1 - Si-1 */
1153   1              numerator = (uint32) CapSense_centroid[CapSense_POS_NEXT] -
1154   1                          (uint32) CapSense_centroid[CapSense_POS_PREV];
1155   1      
1156   1              /* Si+1 + Si + Si-1 */
1157   1              denominator = (int32) CapSense_centroid[CapSense_POS_PREV] + 
1158   1                            (int32) CapSense_centroid[CapSense_POS] + 
1159   1                            (int32) CapSense_centroid[CapSense_POS_NEXT];
1160   1              
1161   1              /* (numerator/denominator) + maximum */
1162   1              denominator = (((int32)(uint32)((uint32)numerator << 8u)/denominator) + (int32)(uint32)((uint32) m
             -aximum << 8u));
1163   1      
1164   1              #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
                          /* Only required for RADIAL Slider */
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 20  

                          if(denominator < 0)
                          {
                              denominator += (int32)((uint16)((uint16) count << 8u));
                          }
                      #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1171   1      
1172   1              denominator *= (int16)resolution;
1173   1      
1174   1              /* Round the relust and put it to uint8 */
1175   1              position = ((uint8) HI16((uint32)denominator + CapSense_CENTROID_ROUND_VALUE));
1176   1      
1177   1              return (position);
1178   1          }    
1179          #endif /* (CapSense_TOTAL_CENTROIDS_COUNT) */
1180          
1181          
1182          #if(CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
1183              /*******************************************************************************
1184              * Function Name: CapSense_GetCentroidPos
1185              ********************************************************************************
1186              *
1187              * Summary:
1188              *  Checks the CapSense_Signal[ ] array for a centroid within
1189              *  slider specified range. The centroid position is calculated to the resolution
1190              *  specified in the CapSense customizer. The position filters are applied to the
1191              *  result if enabled.
1192              *
1193              * Parameters:
1194              *  widget:  Widget number.
1195              *  For every linear slider widget there are defines in this format:
1196              *  #define CapSense_LS__"widget_name"            5
1197              * 
1198              * Return:
1199              *  Returns position value of the linear slider.
1200              *
1201              * Side Effects:
1202              *  If any sensor within the slider widget is active, the function returns values
1203              *  from zero to the API resolution value set in the CapSense customizer. If no
1204              *  sensors are active, the function returns 0xFFFF. If an error occurs during
1205              *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1206              *  There are no checks of widget type argument provided to this function.
1207              *  The unproper widget type provided will cause unexpected position calculations.
1208              *
1209              * Note:
1210              *  If noise counts on the slider segments are greater than the noise
1211              *  threshold, this subroutine may generate a false centroid result. The noise
1212              *  threshold should be set carefully (high enough above the noise level) so
1213              *  that noise will not generate a false centroid.
1214              *
1215              * Reentrant:
1216              *  No.
1217              *
1218              *******************************************************************************/
1219              uint16 CapSense_GetCentroidPos(uint8 widget) 
1220              {
1221   1              #if (CapSense_IS_DIPLEX_SLIDER)
                          const uint8 CYCODE *diplex;
                      #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1224   1                      
1225   1              #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
                          uint8 posIndex;
                          uint8 firstTimeIndex = CapSense_posFiltersData[widget];
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 21  

                          uint8 posFiltersMask = CapSense_posFiltersMask[widget];  
                      #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1230   1      
1231   1              #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1232   1                   (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
                          uint8 tempPos;
                      #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
                             *   (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
                             */
1237   1      
1238   1              uint8 maximum;
1239   1              uint16 position;
1240   1              uint8 offset = CapSense_rawDataIndex[widget];
1241   1              uint8 count = CapSense_numberOfSensors[widget];
1242   1                              
1243   1              #if (CapSense_IS_DIPLEX_SLIDER)
                          if(widget < CapSense_TOTAL_DIPLEXED_SLIDERS_COUNT)
                          {
                              maximum = CapSense_diplexTable[widget];
                              diplex = &CapSense_diplexTable[maximum];
                          }
                          else
                          {
                              diplex = 0u;
                          }
                      #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1254   1      
1255   1              /* Find Maximum within centroid */      
1256   1              #if (CapSense_IS_DIPLEX_SLIDER)        
                          maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], diplex);
                      #else
1259   1                  maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1260   1              #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1261   1      
1262   1              if (maximum != 0xFFu)
1263   1              {
1264   2                  /* Calculate centroid */
1265   2                  position = (uint16) CapSense_CalcCentroid(maximum, 
1266   2                               offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widget]);
1267   2      
1268   2                  #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
                              /* Check if this linear slider has enabled filters */
                              if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
                              {
                                  /* Caluclate position to store filters data */
                                  posIndex  = firstTimeIndex + 1u;
                                  
                                  if (0u == CapSense_posFiltersData[firstTimeIndex])
                                  {
                                      /* Init filters */
                                      CapSense_posFiltersData[posIndex] = (uint8) position;
                                      #if ((0u != (CapSense_MEDIAN_FILTER & \
                                                   CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
                                           (0u != (CapSense_AVERAGING_FILTER & \
                                                   CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
              
                                          if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
                                               (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
                                          {
                                              CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
                                          }
                                      #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 22  

                                             *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
                                             *   (0u != (CapSense_AVERAGING_FILTER & \
                                             *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
                                             */
                                      
                                      CapSense_posFiltersData[firstTimeIndex] = 1u;
                                  }
                                  else
                                  {
                                      /* Do filtering */
                                      #if (0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_MedianFilter(position,
                                                                              (uint16)CapSense_posFiltersData[posIndex],
                                                                              (uint16)CapSense_posFiltersData[posIndex +
             - 1u]);
                                              CapSense_posFiltersData[posIndex + 1u] =
                                                                                           CapSense_posFiltersData[posIn
             -dex];
                                              CapSense_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif /*(0u != (CapSense_MEDIAN_FILTER &
                                             *         CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if(0u!=(CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) 
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_AveragingFilter(position,
                                                                              (uint16)CapSense_posFiltersData[posIndex],
                                                                              (uint16)CapSense_posFiltersData[posIndex +
             - 1u]);
                                              CapSense_posFiltersData[posIndex+1u]=CapSense_posFiltersData[posIndex];
                                              CapSense_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif /* (0u != (CapSense_AVERAGING_FILTER & \
                                             *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_IIR2_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) 
                                          if (0u != (posFiltersMask & CapSense_IIR2_FILTER)) 
                                          {
                                              position = CapSense_IIR2Filter(position,
                                                                                  (uint16)CapSense_posFiltersData[posInd
             -ex]);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif /* (0u != (CapSense_IIR2_FILTER & \
                                             *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_IIR4_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
                                          {
                                              position = CapSense_IIR4Filter(position,
                                                                                  (uint16)CapSense_posFiltersData[posInd
             -ex]);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }                                
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 23  

                                      #endif /* (0u != (CapSense_IIR4_FILTER & \
                                             *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_JITTER_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
                                          {
                                              position = CapSense_JitterFilter(position,
                                                                                  (uint16)CapSense_posFiltersData[posInd
             -ex]);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif /* (0u != (CapSense_JITTER_FILTER & \
                                             *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
                                  }
                              }
                          #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1364   2      
1365   2              }
1366   1              else
1367   1              {
1368   2                  /* The maximum wasn't found */
1369   2                  position = 0xFFFFu;
1370   2      
1371   2                  #if(0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
                              /* Reset the filters */
                              if(0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
                              {
                                  CapSense_posFiltersData[firstTimeIndex] = 0u;
                              }
                          #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1378   2              }
1379   1      
1380   1              
1381   1              return (position);
1382   1          }
1383          #endif /* (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) */
1384          
1385          
1386          #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
                  /*******************************************************************************
                  * Function Name: CapSense_GetRadialCentroidPos
                  ********************************************************************************
                  *
                  * Summary:
                  *  Checks the CapSense_Signal[ ] array for a centroid within
                  *  slider specified range. The centroid position is calculated to the resolution
                  *  specified in the CapSense customizer. The position filters are applied to the
                  *  result if enabled.
                  *
                  * Parameters:
                  *  widget:  Widget number.
                  *  For every radial slider widget there are defines in this format:
                  *  #define CapSense_RS_"widget_name"            5
                  * 
                  * Return:
                  *  Returns position value of the radial slider.
                  *
                  * Side Effects:
                  *  If any sensor within the slider widget is active, the function returns values
                  *  from zero to the API resolution value set in the CapSense customizer. If no
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 24  

                  *  sensors are active, the function returns 0xFFFF.
                  *  There are no checks of widget type argument provided to this function.
                  *  The unproper widget type provided will cause unexpected position calculations.
                  *
                  * Note:
                  *  If noise counts on the slider segments are greater than the noise
                  *  threshold, this subroutine may generate a false centroid result. The noise
                  *  threshold should be set carefully (high enough above the noise level) so 
                  *  that noise will not generate a false centroid.
                  *
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                   uint16 CapSense_GetRadialCentroidPos(uint8 widget)
                                                             
                  {
                      #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
                          uint8 posIndex;
                          uint8 firstTimeIndex = CapSense_posFiltersData[widget];
                          uint8 posFiltersMask = CapSense_posFiltersMask[widget]; 
                      #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
              
                      #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
                           (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
                          uint8 tempPos;
                      #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
                             *   (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
                             */
              
                      uint8 maximum;
                      uint16 position;
                      uint8 offset = CapSense_rawDataIndex[widget];
                      uint8 count = CapSense_numberOfSensors[widget];
                      
                      /* Find Maximum within centroid */        
                      #if (CapSense_IS_DIPLEX_SLIDER)
                          maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
                      #else
                          maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
                      #endif /* (CapSense_IS_DIPLEX_SLIDER) */
                      
                      if (maximum != 0xFFu)
                      {
                          /* Calculate centroid */
                          position = (uint16) CapSense_CalcCentroid(maximum, 
                                       offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widget]);
              
                          #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
                              /* Check if this Radial slider has enabled filters */
                              if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
                              {
                                  /* Caluclate position to store filters data */
                                  posIndex  = firstTimeIndex + 1u;
                                  
                                  if (0u == CapSense_posFiltersData[firstTimeIndex])
                                  {
                                      /* Init filters */
                                      CapSense_posFiltersData[posIndex] = (uint8) position;
                                      #if ((0u != (CapSense_MEDIAN_FILTER & \
                                                   CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 25  

                                           (0u != (CapSense_AVERAGING_FILTER & \
                                                   CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
              
                                          if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))  || 
                                               (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
                                          {
                                              CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
                                          }
                                      #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
                                             *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
                                             *   (0u != (CapSense_AVERAGING_FILTER & \
                                             *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
                                             */
                                      
                                      CapSense_posFiltersData[firstTimeIndex] = 1u;
                                  }
                                  else
                                  {
                                      /* Do filtering */
                                      #if (0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_MedianFilter(position,
                                                                                      CapSense_posFiltersData[posIndex],
                                                                                      CapSense_posFiltersData[posIndex +
             - 1u]);
                                              CapSense_posFiltersData[posIndex + 1u] = 
                                                                                            CapSense_posFiltersData[posI
             -ndex];
                                              CapSense_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif /* (0u != (CapSense_MEDIAN_FILTER & 
                                             *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_AVERAGING_FILTER & \
                                                  CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_AveragingFilter(position, 
                                                                                     CapSense_posFiltersData[posIndex],
                                                                                     CapSense_posFiltersData[posIndex + 
             -1u]);
                                              CapSense_posFiltersData[posIndex+1u]= CapSense_posFiltersData[posIndex];
                                              CapSense_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif /* (0u != (CapSense_AVERAGING_FILTER & \
                                             *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_IIR2_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
                                          {
                                              position = CapSense_IIR2Filter(position,
                                                                                  (uint16)CapSense_posFiltersData[posInd
             -ex]);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif /* (0u != (CapSense_IIR2_FILTER & 
                                             *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 26  

                                             */
              
                                      #if (0u != (CapSense_IIR4_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
                                          {
                                              position = CapSense_IIR4Filter(position,
                                                                                  (uint16)CapSense_posFiltersData[posInd
             -ex]);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif /* (0u != (CapSense_IIR4_FILTER & 
                                             *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_JITTER_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
                                          {
                                              position = CapSense_JitterFilter(position, 
                                                                                       CapSense_posFiltersData[posIndex]
             -);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif /* (0u != (CapSense_JITTER_FILTER &
                                             *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                             */
                                  }
                              }
                          #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
              
                      }
                      else
                      {
                          /* The maximum didn't find */
                          position = 0xFFFFu;
              
                          #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
                              /* Reset the filters */
                              if((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
                              {
                                  CapSense_posFiltersData[firstTimeIndex] = 0u;
                              }
                          #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
                      }
                      
                      return (position);
                  }
              #endif
1573          
1574          
1575          #if(CapSense_TOTAL_TOUCH_PADS_COUNT > 0u)
                  /*******************************************************************************
                  * Function Name: CapSense_GetTouchCentroidPos
                  ********************************************************************************
                  *
                  * Summary:
                  *  If a finger is present on touch pad, this function calculates the X and Y
                  *  position of the finger by calculating the centroids within touch pad specified
                  *  range. The X and Y positions are calculated to the API resolutions set in the
                  *  CapSense customizer. Returns a 1 if a finger is on the touchpad.
                  *  The position filter is applied to the result if enabled.
                  *  This function is available only if a touch pad is defined by the CapSense
                  *  customizer.
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 27  

                  *
                  * Parameters:
                  *  widget:  Widget number. 
                  *  For every touchpad widget there are defines in this format:
                  *  #define CapSense_TP_"widget_name"            5
                  *
                  *  pos:     Pointer to the array of two uint16 elements, where result
                  *  result of calculation of X and Y position are stored.
                  *  pos[0u]  - position of X
                  *  pos[1u]  - position of Y
                  *
                  * Return:
                  *  Returns a 1 if a finger is on the touch pad, 0 - if not.
                  *
                  * Side Effects:
                  *   There are no checks of widget type argument provided to this function.
                  *   The unproper widget type provided will cause unexpected position
                  *   calculations.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  uint8 CapSense_GetTouchCentroidPos(uint8 widget, uint16* pos)
                                                          
                  {
                      #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
                          uint8 posXIndex;
                          uint8 posYIndex;
                          uint8 firstTimeIndex = CapSense_posFiltersData[widget];
                          uint8 posFiltersMask = CapSense_posFiltersMask[widget];
                      #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
              
                      #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
                           (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
                          uint16 tempPos;
                      #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
                             *   (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
                             */
              
                      uint8 maxX;
                      uint8 maxY;
                      uint8 posX;
                      uint8 posY;
                      uint8 touch = 0u;
                      uint8 offset = CapSense_rawDataIndex[widget];
                      uint8 count = CapSense_numberOfSensors[widget];
                      
                      /* Find Maximum within X centroid */
                      #if (CapSense_IS_DIPLEX_SLIDER)
                          maxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
                      #else
                          maxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
                      #endif /* (CapSense_IS_DIPLEX_SLIDER) */
              
                      if (maxX != 0xFFu)
                      {
                          offset = CapSense_rawDataIndex[widget + 1u];
                          count = CapSense_numberOfSensors[widget + 1u];
              
                          /* Find Maximum within Y centroid */
                          #if (CapSense_IS_DIPLEX_SLIDER)
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 28  

                              maxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u], 0u);
                          #else
                              maxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u]);
                          #endif /* (CapSense_IS_DIPLEX_SLIDER) */
              
                          if (maxY != 0xFFu)
                          {
                              /* X and Y maximums are found = true touch */
                              touch = 1u;
                              
                              /* Calculate Y centroid */
                              posY = CapSense_CalcCentroid(maxY, offset, count, 
                                          CapSense_centroidMult[widget + 1u], CapSense_noiseThreshold[widget + 1u]);
                              
                              /* Calculate X centroid */
                              offset = CapSense_rawDataIndex[widget];
                              count = CapSense_numberOfSensors[widget];
                              
                              posX = CapSense_CalcCentroid(maxX, offset, count, 
                                          CapSense_centroidMult[widget],CapSense_noiseThreshold[widget]);
                  
                              #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
                                  /* Check if this TP has enabled filters */
                                  if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
                                  {
                                      /* Caluclate position to store filters data */
                                      posXIndex  = firstTimeIndex + 1u;
                                      posYIndex  = CapSense_posFiltersData[widget + 1u];
                                      
                                      if (0u == CapSense_posFiltersData[firstTimeIndex])
                                      {
                                          /* Init filters */
                                          CapSense_posFiltersData[posXIndex] = posX;
                                          CapSense_posFiltersData[posYIndex] = posY;
              
                                          #if((0u != (CapSense_MEDIAN_FILTER & \
                                                      CapSense_TOUCH_PADS_POS_FILTERS_MASK))|| \
                                              (0u != (CapSense_AVERAGING_FILTER & \
                                                      CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
              
                                              if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
                                                   (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
                                              {
                                                  CapSense_posFiltersData[posXIndex + 1u] = posX;
                                                  CapSense_posFiltersData[posYIndex + 1u] = posY;
                                              }
                                          #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
                                                 *           CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
                                                 *    (0u != (CapSense_AVERAGING_FILTER & \
                                                 *            CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
                                                 */
                                          
                                          CapSense_posFiltersData[firstTimeIndex] = 1u;
                                      }
                                      else
                                      {
                                          /* Do filtering */
                                          #if (0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
                                              {
                                                  tempPos = posX;
                                                  posX = (uint8) CapSense_MedianFilter(posX,
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 29  

                                                                                    CapSense_posFiltersData[posXIndex],
                                                                                    CapSense_posFiltersData[posXIndex + 
             -1u]);
                                                  CapSense_posFiltersData[posXIndex + 1u] = 
                                                                                           CapSense_posFiltersData[posXI
             -ndex];
                                                  CapSense_posFiltersData[posXIndex] = tempPos;
                                                  
                                                  tempPos = posY;
                                                  posY = (uint8) CapSense_MedianFilter(posY,
                                                                                     CapSense_posFiltersData[posYIndex],
             - 
                                                                                     CapSense_posFiltersData[posYIndex +
             - 1u]);
                                                  CapSense_posFiltersData[posYIndex + 1u] = 
                                                                                           CapSense_posFiltersData[posYI
             -ndex];
                                                  CapSense_posFiltersData[posYIndex] = tempPos;
                                              }
                                              
                                          #endif /* (0u != (CapSense_MEDIAN_FILTER & \
                                                 *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
              
                                          #if(0u !=(CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
                                              {
                                                  tempPos = posX;
                                                  posX = (uint8) CapSense_AveragingFilter(posX,
                                                                                     CapSense_posFiltersData[posXIndex],
             - 
                                                                                     CapSense_posFiltersData[posXIndex +
             - 1u]);
                                                  CapSense_posFiltersData[posXIndex + 1u] = 
                                                                                           CapSense_posFiltersData[posXI
             -ndex];
                                                  CapSense_posFiltersData[posXIndex] = tempPos;
                                                  
                                                  tempPos = posY;
                                                  posY = (uint8) CapSense_AveragingFilter(posY, 
                                                                                    CapSense_posFiltersData[posYIndex], 
                                                                                    CapSense_posFiltersData[posYIndex + 
             -1u]);
                                                  CapSense_posFiltersData[posYIndex + 1u] = 
                                                                                          CapSense_posFiltersData[posYIn
             -dex];
                                                  CapSense_posFiltersData[posYIndex] = tempPos;
                                              }
              
                                          #endif /* (0u != (CapSense_AVERAGING_FILTER & \
                                                 *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
              
                                          #if (0u != (CapSense_IIR2_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
                                              {
                                                  posX = (uint8) CapSense_IIR2Filter(posX, 
                                                                                         CapSense_posFiltersData[posXInd
             -ex]);
                                                  CapSense_posFiltersData[posXIndex] = posX;
                                                  
                                                  posY = (uint8) CapSense_IIR2Filter(posY, 
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 30  

                                                                                          CapSense_posFiltersData[posYIn
             -dex]);
                                                  CapSense_posFiltersData[posYIndex] = posY;
                                              }
                                              
                                          #endif /* (0u != (CapSense_IIR2_FILTER & \
                                                 *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
              
                                          #if (0u != (CapSense_IIR4_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
                                              {
                                                  posX = (uint8) CapSense_IIR4Filter((uint16)posX,
                                                                                  (uint16)CapSense_posFiltersData[posXIn
             -dex]);
                                                  CapSense_posFiltersData[posXIndex] = posX;
              
                                                  posY = (uint8) CapSense_IIR4Filter((uint16)posY,
                                                                                  (uint16)CapSense_posFiltersData[posYIn
             -dex]);
                                                  CapSense_posFiltersData[posYIndex] = posY;
                                              }
                                              
                                          #endif /* (0u != (CapSense_IIR4_FILTER & \
                                                 *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
              
                                          #if (0u != (CapSense_JITTER_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
                                                  {
                                                      posX = (uint8) CapSense_JitterFilter(posX, 
                                                                                          CapSense_posFiltersData[posXIn
             -dex]);
                                                      CapSense_posFiltersData[posXIndex] = posX;
                                                      
                                                      posY = (uint8) CapSense_JitterFilter(posY, 
                                                                                          CapSense_posFiltersData[posYIn
             -dex]);
                                                      CapSense_posFiltersData[posYIndex] = posY;
                                                  }
                                          #endif /* (0u != (CapSense_JITTER_FILTER & \
                                                 *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
                                      }
                                  }
                              #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
              
                              /* Save positions */
                              pos[0u] = posX;
                              pos[1u] = posY;
                          }
                      }
              
                      #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
                          if(touch == 0u)
                          {
                              /* Reset the filters */
                              if ((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
                              {
                                  CapSense_posFiltersData[firstTimeIndex] = 0u;
                              }
                          }
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 31  

                      #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
                      
                      return (touch);
                  }
              #endif /* (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u) */
1825          
1826          
1827          #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
1828                (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_MedianFilter
                  ********************************************************************************
                  *
                  * Summary:
                  *  Median filter function. 
                  *  The median filter looks at the three most recent samples and reports the 
                  *  median value.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *  x3:  Before previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
                                                       
                  {
                      uint16 tmp;
                      
                      if (x1 > x2)
                      {
                          tmp = x2;
                          x2 = x1;
                          x1 = tmp;
                      }
                      
                      if (x2 > x3)
                      {
                          x2 = x3;
                      }
                      
                      return ((x1 > x2) ? x1 : x2);
                  }
              #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
                     *    (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
                     */
1869          
1870          
1871          #if ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) | \
1872                (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_AveragingFilter
                  ********************************************************************************
                  *
                  * Summary:
                  *  Averaging filter function.
                  *  The averaging filter looks at the three most recent samples of position and
                  *  reports the averaging value.
                  *
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 32  

                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *  x3:  Before previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_AveragingFilter(uint16 x1, uint16 x2, uint16 x3)
                                                          
                  {
                      uint32 tmp = ((uint32)x1 + (uint32)x2 + (uint32)x3) / 3u;
                      
                      return ((uint16) tmp);
                  }
              #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) | \
                     *    (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
                     */
1901          
1902          
1903          #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) | \
1904                (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_IIR2Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/2 filter function. IIR1/2 = 1/2current + 1/2previous.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_IIR2Filter(uint16 x1, uint16 x2)
                                                     
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/2 Current Value+ 1/2 Previous Value */
                      tmp = (uint32)x1 + (uint32)x2;
                      tmp >>= 1u;
                  
                      return ((uint16) tmp);
                  }
              #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) | \
                     *    (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
                     */
1934          
1935          
1936          #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) | \
1937                (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_IIR4Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/4 filter function. IIR1/4 = 1/4current + 3/4previous.
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 33  

                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_IIR4Filter(uint16 x1, uint16 x2)
                                                     
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/4 Current Value + 3/4 Previous Value */
                      tmp = (uint32)x1 + (uint32)x2;
                      tmp += ((uint32)x2 << 1u);
                      tmp >>= 2u;
                      
                      return ((uint16) tmp);
                  }
              #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) | \
                     *    (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER) )
                     */
1968          
1969          
1970          #if ( (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) | \
1971                (CapSense_POS_FILTERS_MASK & CapSense_JITTER_FILTER) )
                  /*******************************************************************************
                  * Function Name: uint16 CapSense_JitterFilter
                  ********************************************************************************
                  *
                  * Summary:
                  *  Jitter filter function.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_JitterFilter(uint16 x1, uint16 x2)
                                                       
                  {
                      if (x1 > x2)
                      {
                          x1--;
                      }
                      else
                      {
                          if (x1 < x2)
                          {
                              x1++;
                          }
                      }
                  
                      return x1;
                  }
              #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) | \
                     *    (CapSense_POS_FILTERS_MASK & CapSense_JITTER_FILTER) )
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 34  

                     */
2007          
2008          
2009          #if (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
                  /*******************************************************************************
                  * Function Name: CapSense_IIR8Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/8 filter function. IIR1/8 = 1/8current + 7/8previous.
                  *  Only applies for raw data.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_IIR8Filter(uint16 x1, uint16 x2)
                                                     
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/8 Current Value + 7/8 Previous Value */
                      tmp = (uint32)x1;
                      tmp += (((uint32)x2 << 3u) - ((uint32)x2));
                      tmp >>= 3u;
                  
                      return ((uint16) tmp);
                  }
              #endif /* (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER) */
2039          
2040          
2041          #if (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
                  /*******************************************************************************
                  * Function Name: CapSense_IIR16Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/16 filter function. IIR1/16 = 1/16current + 15/16previous.
                  *  Only applies for raw data.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_IIR16Filter(uint16 x1, uint16 x2)
                                                      
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/16 Current Value + 15/16 Previous Value */
                      tmp = (uint32)x1;
                      tmp += (((uint32)x2 << 4u) - ((uint32)x2));
                      tmp >>= 4u;
                      
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 35  

                      return ((uint16) tmp);
                  }
              #endif /* (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER) */
2071          
2072          
2073          #if (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)
              
                  /*******************************************************************************
                  * Function Name: CapSense_GetMatrixButtonPos
                  ********************************************************************************
                  *
                  * Summary:
                  *  Function calculates and returns touch position (column and row) for matrix
                  *  button widget.
                  *
                  * Parameters:
                  *  widget:  widget number;
                  *  pos:     pointer to an array of two uint8, where touch postion will be 
                  *           stored:
                  *           pos[0] - column position;
                  *           pos[1] - raw position.
                  *
                  * Return:
                  *  Returns 1 if row and column sensors of matrix button are active, 0 - in other
                  *  cases.
                  *
                  * Reentrant:
                  *  No
                  *
                  *******************************************************************************/
                  uint8 CapSense_GetMatrixButtonPos(uint8 widget, uint8* pos)
                                                                
                  {
                      uint8 i;
                      uint8 retVal = 0u;
                      uint16 row_sig_max = 0u;
                      uint16 col_sig_max = 0u;
                      uint8 row_ind = 0u;
                      uint8 col_ind = 0u;
              
                      if (0u != CapSense_CheckIsWidgetActive(widget))
                      {
                          /* Find row number with maximal signal value */
                          for(i = CapSense_rawDataIndex[widget]; i < (CapSense_rawDataIndex[widget] + \
                               CapSense_numberOfSensors[widget]); i++)
                          {
                              if (CapSense_sensorSignal[i] > col_sig_max)
                              {
                                  col_ind = i;
                                  col_sig_max = CapSense_sensorSignal[i];
                              }
                          }
              
                          /* Find row number with maximal signal value */
                          for(i = CapSense_rawDataIndex[widget+1u]; i < (CapSense_rawDataIndex[widget+1u] + \
                               CapSense_numberOfSensors[widget+1u]); i++)
                          {
                              if (CapSense_sensorSignal[i] > row_sig_max)
                              {
                                  row_ind = i;
                                  row_sig_max = CapSense_sensorSignal[i];
                              }
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 36  

                          }
              
                          if((col_sig_max >= CapSense_fingerThreshold[widget]) && \
                             (row_sig_max >= CapSense_fingerThreshold[widget+1u]))
                          {
                              pos[0u] = col_ind - CapSense_rawDataIndex[widget];
                              pos[1u] = row_ind - CapSense_rawDataIndex[widget+1u];
                              retVal = 1u;
                          }
                      }
                      return (retVal);
                  }
              
              #endif /* (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) */
2144          
2145          /* [] END OF FILE */
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 37  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CapSense_BaseInit (BEGIN)
                                           ; SOURCE LINE # 129
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 133
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      E     MOV     DPTR,#CapSense_widgetNumber
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#widget
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
0015 900000      R     MOV     DPTR,#sensor
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 25E0              ADD     A,ACC
001D 2400        E     ADD     A,#LOW CapSense_sensorRaw
001F F582              MOV     DPL,A
0021 E4                CLR     A
0022 3400        E     ADDC    A,#HIGH CapSense_sensorRaw
0024 F583              MOV     DPH,A
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 900000      R     MOV     DPTR,#sensor
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 ED                MOV     A,R5
0031 25E0              ADD     A,ACC
0033 2400        R     ADD     A,#LOW CapSense_sensorBaseline
0035 F582              MOV     DPL,A
0037 E4                CLR     A
0038 3400        R     ADDC    A,#HIGH CapSense_sensorBaseline
003A F583              MOV     DPH,A
003C EE                MOV     A,R6
003D F0                MOVX    @DPTR,A
003E A3                INC     DPTR
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
0041 900000      R     MOV     DPTR,#sensor
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 7400        R     MOV     A,#LOW CapSense_sensorBaselineLow
0048 2F                ADD     A,R7
0049 F582              MOV     DPL,A
004B E4                CLR     A
004C 3400        R     ADDC    A,#HIGH CapSense_sensorBaselineLow
004E F583              MOV     DPH,A
0050 E4                CLR     A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 38  

0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
0052 900000      R     MOV     DPTR,#sensor
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 7400        R     MOV     A,#LOW CapSense_sensorSignal
0059 2F                ADD     A,R7
005A F582              MOV     DPL,A
005C E4                CLR     A
005D 3400        R     ADDC    A,#HIGH CapSense_sensorSignal
005F F583              MOV     DPH,A
0061 E4                CLR     A
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
0063 900000      R     MOV     DPTR,#widget
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 EF                MOV     A,R7
0069 D3                SETB    C
006A 9400              SUBB    A,#00H
006C 401C              JC      ?C0002
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
006E 900000      R     MOV     DPTR,#widget
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 EF                MOV     A,R7
0074 900000      R     MOV     DPTR,#CapSense_debounce
0077 93                MOVC    A,@A+DPTR
0078 FF                MOV     R7,A
0079 900000      R     MOV     DPTR,#widget
007C E0                MOVX    A,@DPTR
007D FE                MOV     R6,A
007E 7400        R     MOV     A,#LOW CapSense_debounceCounter+0FFFFH
0080 2E                ADD     A,R6
0081 F582              MOV     DPL,A
0083 E4                CLR     A
0084 3400        R     ADDC    A,#HIGH CapSense_debounceCounter+0FFFFH
0086 F583              MOV     DPH,A
0088 EF                MOV     A,R7
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 181
008A         ?C0002:
008A 22                RET     
             ; FUNCTION _CapSense_BaseInit (END)

             ; FUNCTION _CapSense_InitializeSensorBaseline (BEGIN)
                                           ; SOURCE LINE # 205
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 209
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 120000      E     LCALL   _CapSense_ScanSensor
000D         ?C0003:
                                           ; SOURCE LINE # 210
000D 120000      E     LCALL   CapSense_IsBusy
0010 EF                MOV     A,R7
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 39  

0011 70FA              JNZ     ?C0003
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 213
0013         ?C0004:
                                           ; SOURCE LINE # 217
0013 900000      R     MOV     DPTR,#sensor
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 120000      R     LCALL   _CapSense_BaseInit
                                           ; SOURCE LINE # 234
001B 22                RET     
             ; FUNCTION _CapSense_InitializeSensorBaseline (END)

             ; FUNCTION CapSense_InitializeAllBaselines (BEGIN)
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 263
0000 900000      R     MOV     DPTR,#i
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005         ?C0006:
0005 900000      R     MOV     DPTR,#i
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9407              SUBB    A,#07H
000E 5010              JNC     ?C0009
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
0010 900000      R     MOV     DPTR,#i
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 120000      R     LCALL   _CapSense_InitializeSensorBaseline
                                           ; SOURCE LINE # 266
0018 900000      R     MOV     DPTR,#i
001B E0                MOVX    A,@DPTR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
001E 80E5              SJMP    ?C0006
                                           ; SOURCE LINE # 267
0020         ?C0009:
0020 22                RET     
             ; FUNCTION CapSense_InitializeAllBaselines (END)

             ; FUNCTION CapSense_InitializeEnabledBaselines (BEGIN)
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 297
0000 120000      E     LCALL   CapSense_ScanEnabledWidgets
0003         ?C0010:
                                           ; SOURCE LINE # 298
0003 120000      E     LCALL   CapSense_IsBusy
0006 EF                MOV     A,R7
0007 70FA              JNZ     ?C0010
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 301
0009         ?C0011:
                                           ; SOURCE LINE # 303
0009 900000      R     MOV     DPTR,#i
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 40  

000E         ?C0012:
000E 900000      R     MOV     DPTR,#i
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 C3                CLR     C
0015 9407              SUBB    A,#07H
0017 506D              JNC     ?C0016
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
0019 900000      R     MOV     DPTR,#i
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F 13                RRC     A
0020 13                RRC     A
0021 13                RRC     A
0022 541F              ANL     A,#01FH
0024 FF                MOV     R7,A
0025 900000      R     MOV     DPTR,#pos
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
002A 900000      R     MOV     DPTR,#i
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 5407              ANL     A,#07H
0032 FF                MOV     R7,A
0033 7401              MOV     A,#01H
0035 A807              MOV     R0,AR7
0037 08                INC     R0
0038 8002              SJMP    ?C0084
003A         ?C0083:
003A C3                CLR     C
003B 33                RLC     A
003C         ?C0084:
003C D8FC              DJNZ    R0,?C0083
003E FF                MOV     R7,A
003F 900000      R     MOV     DPTR,#enMask
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
0044 900000      R     MOV     DPTR,#pos
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 7400        E     MOV     A,#LOW CapSense_sensorEnableMask
004B 2F                ADD     A,R7
004C F582              MOV     DPL,A
004E E4                CLR     A
004F 3400        E     ADDC    A,#HIGH CapSense_sensorEnableMask
0051 F583              MOV     DPH,A
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 900000      R     MOV     DPTR,#enMask
0058 E0                MOVX    A,@DPTR
0059 FE                MOV     R6,A
005A EF                MOV     A,R7
005B 5E                ANL     A,R6
005C FF                MOV     R7,A
005D EF                MOV     A,R7
005E 7016              JNZ     ?C0015
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 41  

                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
0060 900000      R     MOV     DPTR,#i
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 25E0              ADD     A,ACC
0068 2400        E     ADD     A,#LOW CapSense_sensorRaw
006A F582              MOV     DPL,A
006C E4                CLR     A
006D 3400        E     ADDC    A,#HIGH CapSense_sensorRaw
006F F583              MOV     DPH,A
0071 E4                CLR     A
0072 F0                MOVX    @DPTR,A
0073 A3                INC     DPTR
0074 E4                CLR     A
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
0076         ?C0015:
                                           ; SOURCE LINE # 315
0076 900000      R     MOV     DPTR,#i
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B 120000      R     LCALL   _CapSense_BaseInit
                                           ; SOURCE LINE # 316
007E 900000      R     MOV     DPTR,#i
0081 E0                MOVX    A,@DPTR
0082 04                INC     A
0083 F0                MOVX    @DPTR,A
0084 8088              SJMP    ?C0012
                                           ; SOURCE LINE # 317
0086         ?C0016:
0086 22                RET     
             ; FUNCTION CapSense_InitializeEnabledBaselines (END)

             ; FUNCTION _CapSense_UpdateSensorBaseline (BEGIN)
                                           ; SOURCE LINE # 357
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 363
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      E     MOV     DPTR,#CapSense_widgetNumber
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#widget
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_noiseThreshold
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#noiseThreshold
0023 EF                MOV     A,R7
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 42  

0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
0025 900000      R     MOV     DPTR,#sensor
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B 25E0              ADD     A,ACC
002D 2400        E     ADD     A,#LOW CapSense_sensorRaw
002F F582              MOV     DPL,A
0031 E4                CLR     A
0032 3400        E     ADDC    A,#HIGH CapSense_sensorRaw
0034 F583              MOV     DPH,A
0036 E0                MOVX    A,@DPTR
0037 FE                MOV     R6,A
0038 A3                INC     DPTR
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B 900000      R     MOV     DPTR,#filteredRawData
003E EE                MOV     A,R6
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
0043 900000      R     MOV     DPTR,#sensor
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
0049 25E0              ADD     A,ACC
004B 2400        R     ADD     A,#LOW CapSense_sensorBaseline
004D F582              MOV     DPL,A
004F E4                CLR     A
0050 3400        R     ADDC    A,#HIGH CapSense_sensorBaseline
0052 F583              MOV     DPH,A
0054 E0                MOVX    A,@DPTR
0055 FE                MOV     R6,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 900000      R     MOV     DPTR,#filteredRawData
005C E0                MOVX    A,@DPTR
005D FC                MOV     R4,A
005E A3                INC     DPTR
005F E0                MOVX    A,@DPTR
0060 FD                MOV     R5,A
0061 C3                CLR     C
0062 ED                MOV     A,R5
0063 9F                SUBB    A,R7
0064 EC                MOV     A,R4
0065 9E                SUBB    A,R6
0066 4035              JC      ?C0017
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
0068 900000      R     MOV     DPTR,#sensor
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D EF                MOV     A,R7
006E 25E0              ADD     A,ACC
0070 2400        R     ADD     A,#LOW CapSense_sensorBaseline
0072 F582              MOV     DPL,A
0074 E4                CLR     A
0075 3400        R     ADDC    A,#HIGH CapSense_sensorBaseline
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 43  

0077 F583              MOV     DPH,A
0079 E0                MOVX    A,@DPTR
007A FE                MOV     R6,A
007B A3                INC     DPTR
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E 900000      R     MOV     DPTR,#filteredRawData
0081 E0                MOVX    A,@DPTR
0082 FC                MOV     R4,A
0083 A3                INC     DPTR
0084 E0                MOVX    A,@DPTR
0085 FD                MOV     R5,A
0086 C3                CLR     C
0087 ED                MOV     A,R5
0088 9F                SUBB    A,R7
0089 FF                MOV     R7,A
008A EC                MOV     A,R4
008B 9E                SUBB    A,R6
008C FE                MOV     R6,A
008D 900000      R     MOV     DPTR,#tempRaw
0090 EE                MOV     A,R6
0091 F0                MOVX    @DPTR,A
0092 A3                INC     DPTR
0093 EF                MOV     A,R7
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 422
0095 900000      R     MOV     DPTR,#widget
0098 7401              MOV     A,#01H
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
009B 8032              SJMP    ?C0018
009D         ?C0017:
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
009D 900000      R     MOV     DPTR,#sensor
00A0 E0                MOVX    A,@DPTR
00A1 FF                MOV     R7,A
00A2 EF                MOV     A,R7
00A3 25E0              ADD     A,ACC
00A5 2400        R     ADD     A,#LOW CapSense_sensorBaseline
00A7 F582              MOV     DPL,A
00A9 E4                CLR     A
00AA 3400        R     ADDC    A,#HIGH CapSense_sensorBaseline
00AC F583              MOV     DPH,A
00AE E0                MOVX    A,@DPTR
00AF FE                MOV     R6,A
00B0 A3                INC     DPTR
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 900000      R     MOV     DPTR,#filteredRawData
00B6 E0                MOVX    A,@DPTR
00B7 FC                MOV     R4,A
00B8 A3                INC     DPTR
00B9 E0                MOVX    A,@DPTR
00BA FD                MOV     R5,A
00BB C3                CLR     C
00BC EF                MOV     A,R7
00BD 9D                SUBB    A,R5
00BE FF                MOV     R7,A
00BF EE                MOV     A,R6
00C0 9C                SUBB    A,R4
00C1 FE                MOV     R6,A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 44  

00C2 900000      R     MOV     DPTR,#tempRaw
00C5 EE                MOV     A,R6
00C6 F0                MOVX    @DPTR,A
00C7 A3                INC     DPTR
00C8 EF                MOV     A,R7
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
00CA 900000      R     MOV     DPTR,#widget
00CD E4                CLR     A
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
00CF         ?C0018:
                                           ; SOURCE LINE # 430
00CF 900000      R     MOV     DPTR,#widget
00D2 E0                MOVX    A,@DPTR
00D3 FF                MOV     R7,A
00D4 EF                MOV     A,R7
00D5 7059              JNZ     ?C0019
00D7 900000      R     MOV     DPTR,#tempRaw
00DA E0                MOVX    A,@DPTR
00DB FE                MOV     R6,A
00DC A3                INC     DPTR
00DD E0                MOVX    A,@DPTR
00DE FF                MOV     R7,A
00DF D3                SETB    C
00E0 EF                MOV     A,R7
00E1 9414              SUBB    A,#014H
00E3 EE                MOV     A,R6
00E4 9400              SUBB    A,#00H
00E6 4048              JC      ?C0019
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 432
00E8 900000      R     MOV     DPTR,#sensor
00EB E0                MOVX    A,@DPTR
00EC FF                MOV     R7,A
00ED 7400        R     MOV     A,#LOW CapSense_lowBaselineResetCnt
00EF 2F                ADD     A,R7
00F0 F582              MOV     DPL,A
00F2 E4                CLR     A
00F3 3400        R     ADDC    A,#HIGH CapSense_lowBaselineResetCnt
00F5 F583              MOV     DPH,A
00F7 E0                MOVX    A,@DPTR
00F8 FF                MOV     R7,A
00F9 EF                MOV     A,R7
00FA C3                CLR     C
00FB 9405              SUBB    A,#05H
00FD 401C              JC      ?C0020
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 434
00FF 900000      R     MOV     DPTR,#sensor
0102 E0                MOVX    A,@DPTR
0103 FF                MOV     R7,A
0104 120000      R     LCALL   _CapSense_BaseInit
                                           ; SOURCE LINE # 435
0107 900000      R     MOV     DPTR,#sensor
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C 7400        R     MOV     A,#LOW CapSense_lowBaselineResetCnt
010E 2F                ADD     A,R7
010F F582              MOV     DPL,A
0111 E4                CLR     A
0112 3400        R     ADDC    A,#HIGH CapSense_lowBaselineResetCnt
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 45  

0114 F583              MOV     DPH,A
0116 E4                CLR     A
0117 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 436
0118 020000      R     LJMP    ?C0022
011B         ?C0020:
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
011B 900000      R     MOV     DPTR,#sensor
011E E0                MOVX    A,@DPTR
011F FF                MOV     R7,A
0120 7400        R     MOV     A,#LOW CapSense_lowBaselineResetCnt
0122 2F                ADD     A,R7
0123 F582              MOV     DPL,A
0125 E4                CLR     A
0126 3400        R     ADDC    A,#HIGH CapSense_lowBaselineResetCnt
0128 F583              MOV     DPH,A
012A E0                MOVX    A,@DPTR
012B 04                INC     A
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
                                           ; SOURCE LINE # 441
012D 020000      R     LJMP    ?C0022
0130         ?C0019:
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 447
0130 900000      R     MOV     DPTR,#noiseThreshold
0133 E0                MOVX    A,@DPTR
0134 FF                MOV     R7,A
0135 7E00              MOV     R6,#00H
0137 900000      R     MOV     DPTR,#tempRaw
013A E0                MOVX    A,@DPTR
013B FC                MOV     R4,A
013C A3                INC     DPTR
013D E0                MOVX    A,@DPTR
013E FD                MOV     R5,A
013F D3                SETB    C
0140 ED                MOV     A,R5
0141 9F                SUBB    A,R7
0142 EC                MOV     A,R4
0143 9E                SUBB    A,R6
0144 401F              JC      ?C0024
0146 900000      R     MOV     DPTR,#tempRaw
0149 E0                MOVX    A,@DPTR
014A FE                MOV     R6,A
014B A3                INC     DPTR
014C E0                MOVX    A,@DPTR
014D FF                MOV     R7,A
014E C3                CLR     C
014F EF                MOV     A,R7
0150 9414              SUBB    A,#014H
0152 EE                MOV     A,R6
0153 9400              SUBB    A,#00H
0155 4003              JC      $ + 5H
0157 020000      R     LJMP    ?C0022
015A 900000      R     MOV     DPTR,#widget
015D E0                MOVX    A,@DPTR
015E FF                MOV     R7,A
015F EF                MOV     A,R7
0160 6003              JZ      $ + 5H
0162 020000      R     LJMP    ?C0022
0165         ?C0024:
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 46  

                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 452
0165 900000      R     MOV     DPTR,#sensor
0168 E0                MOVX    A,@DPTR
0169 FF                MOV     R7,A
016A EF                MOV     A,R7
016B 25E0              ADD     A,ACC
016D 2400        R     ADD     A,#LOW CapSense_sensorBaseline
016F F582              MOV     DPL,A
0171 E4                CLR     A
0172 3400        R     ADDC    A,#HIGH CapSense_sensorBaseline
0174 F583              MOV     DPH,A
0176 E0                MOVX    A,@DPTR
0177 FE                MOV     R6,A
0178 A3                INC     DPTR
0179 E0                MOVX    A,@DPTR
017A FF                MOV     R7,A
017B E4                CLR     A
017C FC                MOV     R4,A
017D FD                MOV     R5,A
017E 7808              MOV     R0,#08H
0180 120000      E     LCALL   ?C?LSHL
0183 900000      R     MOV     DPTR,#calc
0186 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 453
0189 900000      R     MOV     DPTR,#calc
018C 120000      E     LCALL   ?C?LLDXDATA0
018F 900000      R     MOV     DPTR,#sensor
0192 E0                MOVX    A,@DPTR
0193 FF                MOV     R7,A
0194 7400        R     MOV     A,#LOW CapSense_sensorBaselineLow
0196 2F                ADD     A,R7
0197 F582              MOV     DPL,A
0199 E4                CLR     A
019A 3400        R     ADDC    A,#HIGH CapSense_sensorBaselineLow
019C F583              MOV     DPH,A
019E E0                MOVX    A,@DPTR
019F FF                MOV     R7,A
01A0 E4                CLR     A
01A1 FC                MOV     R4,A
01A2 FD                MOV     R5,A
01A3 FE                MOV     R6,A
01A4 120000      E     LCALL   ?C?LOR
01A7 900000      R     MOV     DPTR,#calc
01AA 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 456
01AD 900000      R     MOV     DPTR,#calc
01B0 120000      E     LCALL   ?C?LLDXDATA0
01B3 900000      R     MOV     DPTR,#filteredRawData
01B6 E0                MOVX    A,@DPTR
01B7 FE                MOV     R6,A
01B8 A3                INC     DPTR
01B9 E0                MOVX    A,@DPTR
01BA FF                MOV     R7,A
01BB E4                CLR     A
01BC FC                MOV     R4,A
01BD FD                MOV     R5,A
01BE 120000      E     LCALL   ?C?LADD
01C1 900000      R     MOV     DPTR,#calc
01C4 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 459
01C7 900000      R     MOV     DPTR,#calc
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 47  

01CA 120000      E     LCALL   ?C?LLDXDATA
01CD C004              PUSH    AR4
01CF C005              PUSH    AR5
01D1 C006              PUSH    AR6
01D3 C007              PUSH    AR7
01D5 900000      R     MOV     DPTR,#sensor
01D8 E0                MOVX    A,@DPTR
01D9 FF                MOV     R7,A
01DA EF                MOV     A,R7
01DB 25E0              ADD     A,ACC
01DD 2400        R     ADD     A,#LOW CapSense_sensorBaseline
01DF F582              MOV     DPL,A
01E1 E4                CLR     A
01E2 3400        R     ADDC    A,#HIGH CapSense_sensorBaseline
01E4 F583              MOV     DPH,A
01E6 E0                MOVX    A,@DPTR
01E7 FE                MOV     R6,A
01E8 A3                INC     DPTR
01E9 E0                MOVX    A,@DPTR
01EA FF                MOV     R7,A
01EB AB07              MOV     R3,AR7
01ED AA06              MOV     R2,AR6
01EF E4                CLR     A
01F0 F9                MOV     R1,A
01F1 F8                MOV     R0,A
01F2 D007              POP     AR7
01F4 D006              POP     AR6
01F6 D005              POP     AR5
01F8 D004              POP     AR4
01FA 120000      E     LCALL   ?C?LSUB
01FD 900000      R     MOV     DPTR,#calc
0200 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 462
0203 900000      R     MOV     DPTR,#calc
0206 120000      E     LCALL   ?C?LLDXDATA
0209 7808              MOV     R0,#08H
020B 120000      E     LCALL   ?C?ULSHR
020E 900000      R     MOV     DPTR,#sensor
0211 E0                MOVX    A,@DPTR
0212 FD                MOV     R5,A
0213 ED                MOV     A,R5
0214 25E0              ADD     A,ACC
0216 2400        R     ADD     A,#LOW CapSense_sensorBaseline
0218 F582              MOV     DPL,A
021A E4                CLR     A
021B 3400        R     ADDC    A,#HIGH CapSense_sensorBaseline
021D F583              MOV     DPH,A
021F EE                MOV     A,R6
0220 F0                MOVX    @DPTR,A
0221 A3                INC     DPTR
0222 EF                MOV     A,R7
0223 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
0224 900000      R     MOV     DPTR,#calc
0227 120000      E     LCALL   ?C?LLDXDATA
022A 900000      R     MOV     DPTR,#sensor
022D E0                MOVX    A,@DPTR
022E FE                MOV     R6,A
022F 7400        R     MOV     A,#LOW CapSense_sensorBaselineLow
0231 2E                ADD     A,R6
0232 F582              MOV     DPL,A
0234 E4                CLR     A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 48  

0235 3400        R     ADDC    A,#HIGH CapSense_sensorBaselineLow
0237 F583              MOV     DPH,A
0239 EF                MOV     A,R7
023A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
023B 900000      R     MOV     DPTR,#sensor
023E E0                MOVX    A,@DPTR
023F FF                MOV     R7,A
0240 7400        R     MOV     A,#LOW CapSense_lowBaselineResetCnt
0242 2F                ADD     A,R7
0243 F582              MOV     DPL,A
0245 E4                CLR     A
0246 3400        R     ADDC    A,#HIGH CapSense_lowBaselineResetCnt
0248 F583              MOV     DPH,A
024A E4                CLR     A
024B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 469
024C         ?C0022:
                                           ; SOURCE LINE # 472
024C 900000      R     MOV     DPTR,#noiseThreshold
024F E0                MOVX    A,@DPTR
0250 FF                MOV     R7,A
0251 7E00              MOV     R6,#00H
0253 900000      R     MOV     DPTR,#tempRaw
0256 E0                MOVX    A,@DPTR
0257 FC                MOV     R4,A
0258 A3                INC     DPTR
0259 E0                MOVX    A,@DPTR
025A FD                MOV     R5,A
025B D3                SETB    C
025C ED                MOV     A,R5
025D 9F                SUBB    A,R7
025E EC                MOV     A,R4
025F 9E                SUBB    A,R6
0260 4046              JC      ?C0025
0262 900000      R     MOV     DPTR,#widget
0265 E0                MOVX    A,@DPTR
0266 FF                MOV     R7,A
0267 EF                MOV     A,R7
0268 603E              JZ      ?C0025
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 476
026A 900000      R     MOV     DPTR,#tempRaw
026D E0                MOVX    A,@DPTR
026E FE                MOV     R6,A
026F A3                INC     DPTR
0270 E0                MOVX    A,@DPTR
0271 FF                MOV     R7,A
0272 D3                SETB    C
0273 EF                MOV     A,R7
0274 94FF              SUBB    A,#0FFH
0276 EE                MOV     A,R6
0277 9400              SUBB    A,#00H
0279 4013              JC      ?C0026
                                           ; SOURCE LINE # 477
                                           ; SOURCE LINE # 478
027B 900000      R     MOV     DPTR,#sensor
027E E0                MOVX    A,@DPTR
027F FF                MOV     R7,A
0280 7400        R     MOV     A,#LOW CapSense_sensorSignal
0282 2F                ADD     A,R7
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 49  

0283 F582              MOV     DPL,A
0285 E4                CLR     A
0286 3400        R     ADDC    A,#HIGH CapSense_sensorSignal
0288 F583              MOV     DPH,A
028A 74FF              MOV     A,#0FFH
028C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 479
028D 22                RET     
028E         ?C0026:
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
028E 900000      R     MOV     DPTR,#tempRaw
0291 E0                MOVX    A,@DPTR
0292 FE                MOV     R6,A
0293 A3                INC     DPTR
0294 E0                MOVX    A,@DPTR
0295 FF                MOV     R7,A
0296 900000      R     MOV     DPTR,#sensor
0299 E0                MOVX    A,@DPTR
029A FE                MOV     R6,A
029B 7400        R     MOV     A,#LOW CapSense_sensorSignal
029D 2E                ADD     A,R6
029E F582              MOV     DPL,A
02A0 E4                CLR     A
02A1 3400        R     ADDC    A,#HIGH CapSense_sensorSignal
02A3 F583              MOV     DPH,A
02A5 EF                MOV     A,R7
02A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 487
02A7 22                RET     
02A8         ?C0025:
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 491
02A8 900000      R     MOV     DPTR,#sensor
02AB E0                MOVX    A,@DPTR
02AC FF                MOV     R7,A
02AD 7400        R     MOV     A,#LOW CapSense_sensorSignal
02AF 2F                ADD     A,R7
02B0 F582              MOV     DPL,A
02B2 E4                CLR     A
02B3 3400        R     ADDC    A,#HIGH CapSense_sensorSignal
02B5 F583              MOV     DPH,A
02B7 E4                CLR     A
02B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 498
02B9         ?C0029:
02B9 22                RET     
             ; FUNCTION _CapSense_UpdateSensorBaseline (END)

             ; FUNCTION CapSense_UpdateEnabledBaselines (BEGIN)
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 537
0000 900000      R     MOV     DPTR,#i
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005         ?C0030:
0005 900000      R     MOV     DPTR,#i
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 50  

000A EF                MOV     A,R7
000B C3                CLR     C
000C 9407              SUBB    A,#07H
000E 5057              JNC     ?C0034
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
0010 900000      R     MOV     DPTR,#i
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 13                RRC     A
0017 13                RRC     A
0018 13                RRC     A
0019 541F              ANL     A,#01FH
001B FF                MOV     R7,A
001C 900000      R     MOV     DPTR,#pos
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 540
0021 900000      R     MOV     DPTR,#i
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 5407              ANL     A,#07H
0029 FF                MOV     R7,A
002A 7401              MOV     A,#01H
002C A807              MOV     R0,AR7
002E 08                INC     R0
002F 8002              SJMP    ?C0086
0031         ?C0085:
0031 C3                CLR     C
0032 33                RLC     A
0033         ?C0086:
0033 D8FC              DJNZ    R0,?C0085
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#enMask
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
003B 900000      R     MOV     DPTR,#pos
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 7400        E     MOV     A,#LOW CapSense_sensorEnableMask
0042 2F                ADD     A,R7
0043 F582              MOV     DPL,A
0045 E4                CLR     A
0046 3400        E     ADDC    A,#HIGH CapSense_sensorEnableMask
0048 F583              MOV     DPH,A
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C 900000      R     MOV     DPTR,#enMask
004F E0                MOVX    A,@DPTR
0050 FE                MOV     R6,A
0051 EF                MOV     A,R7
0052 5E                ANL     A,R6
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 6008              JZ      ?C0032
                                           ; SOURCE LINE # 542
                                           ; SOURCE LINE # 543
0057 900000      R     MOV     DPTR,#i
005A E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 51  

005B FF                MOV     R7,A
005C 120000      R     LCALL   _CapSense_UpdateSensorBaseline
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 545
005F         ?C0032:
005F 900000      R     MOV     DPTR,#i
0062 E0                MOVX    A,@DPTR
0063 04                INC     A
0064 F0                MOVX    @DPTR,A
0065 809E              SJMP    ?C0030
                                           ; SOURCE LINE # 546
0067         ?C0034:
0067 22                RET     
             ; FUNCTION CapSense_UpdateEnabledBaselines (END)

             ; FUNCTION _CapSense_CheckIsSensorActive (BEGIN)
                                           ; SOURCE LINE # 588
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 593
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 13                RRC     A
000C 13                RRC     A
000D 13                RRC     A
000E 541F              ANL     A,#01FH
0010 FF                MOV     R7,A
0011 900000      R     MOV     DPTR,#pos
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 594
0016 900000      R     MOV     DPTR,#sensor
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 5407              ANL     A,#07H
001E FF                MOV     R7,A
001F 7401              MOV     A,#01H
0021 A807              MOV     R0,AR7
0023 08                INC     R0
0024 8002              SJMP    ?C0088
0026         ?C0087:
0026 C3                CLR     C
0027 33                RLC     A
0028         ?C0088:
0028 D8FC              DJNZ    R0,?C0087
002A FF                MOV     R7,A
002B 900000      R     MOV     DPTR,#onMask
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 596
0030 900000      R     MOV     DPTR,#sensor
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 900000      E     MOV     DPTR,#CapSense_widgetNumber
0039 93                MOVC    A,@A+DPTR
003A FF                MOV     R7,A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 52  

003B 900000      R     MOV     DPTR,#widget
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 597
0040 900000      R     MOV     DPTR,#widget
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 900000      R     MOV     DPTR,#CapSense_fingerThreshold
0049 93                MOVC    A,@A+DPTR
004A FF                MOV     R7,A
004B 900000      R     MOV     DPTR,#fingerThreshold
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 598
0050 900000      R     MOV     DPTR,#widget
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 EF                MOV     A,R7
0056 900000      R     MOV     DPTR,#CapSense_hysteresis
0059 93                MOVC    A,@A+DPTR
005A FF                MOV     R7,A
005B 900000      R     MOV     DPTR,#hysteresis
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 599
0060 900000      R     MOV     DPTR,#widget
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 900000      R     MOV     DPTR,#CapSense_debounce
0069 93                MOVC    A,@A+DPTR
006A FF                MOV     R7,A
006B 900000      R     MOV     DPTR,#debounce
006E EF                MOV     A,R7
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 601
0070 900000      R     MOV     DPTR,#widget
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 EF                MOV     A,R7
0076 C3                CLR     C
0077 9401              SUBB    A,#01H
0079 501A              JNC     ?C0035
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 603
007B 900000      R     MOV     DPTR,#debounceIndex
007E 7402              MOV     A,#02H
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
0081 900000      R     MOV     DPTR,#debounceIndex
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 7400        R     MOV     A,#LOW CapSense_debounceCounter
0088 2F                ADD     A,R7
0089 F582              MOV     DPL,A
008B E4                CLR     A
008C 3400        R     ADDC    A,#HIGH CapSense_debounceCounter
008E F583              MOV     DPH,A
0090 7401              MOV     A,#01H
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 605
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 53  

0093 800D              SJMP    ?C0036
0095         ?C0035:
                                           ; SOURCE LINE # 607
                                           ; SOURCE LINE # 608
0095 900000      R     MOV     DPTR,#widget
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
009A EF                MOV     A,R7
009B 14                DEC     A
009C FF                MOV     R7,A
009D 900000      R     MOV     DPTR,#debounceIndex
00A0 EF                MOV     A,R7
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 609
00A2         ?C0036:
                                           ; SOURCE LINE # 613
00A2 900000      R     MOV     DPTR,#pos
00A5 E0                MOVX    A,@DPTR
00A6 FF                MOV     R7,A
00A7 7400        R     MOV     A,#LOW CapSense_sensorOnMask
00A9 2F                ADD     A,R7
00AA F582              MOV     DPL,A
00AC E4                CLR     A
00AD 3400        R     ADDC    A,#HIGH CapSense_sensorOnMask
00AF F583              MOV     DPH,A
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 900000      R     MOV     DPTR,#onMask
00B6 E0                MOVX    A,@DPTR
00B7 FE                MOV     R6,A
00B8 EF                MOV     A,R7
00B9 5E                ANL     A,R6
00BA FF                MOV     R7,A
00BB EF                MOV     A,R7
00BC 6066              JZ      ?C0037
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 616
00BE 900000      R     MOV     DPTR,#hysteresis
00C1 E0                MOVX    A,@DPTR
00C2 FF                MOV     R7,A
00C3 900000      R     MOV     DPTR,#fingerThreshold
00C6 E0                MOVX    A,@DPTR
00C7 FE                MOV     R6,A
00C8 C3                CLR     C
00C9 EE                MOV     A,R6
00CA 9F                SUBB    A,R7
00CB FF                MOV     R7,A
00CC 900000      R     MOV     DPTR,#sensor
00CF E0                MOVX    A,@DPTR
00D0 FE                MOV     R6,A
00D1 7400        R     MOV     A,#LOW CapSense_sensorSignal
00D3 2E                ADD     A,R6
00D4 F582              MOV     DPL,A
00D6 E4                CLR     A
00D7 3400        R     ADDC    A,#HIGH CapSense_sensorSignal
00D9 F583              MOV     DPH,A
00DB E0                MOVX    A,@DPTR
00DC FE                MOV     R6,A
00DD EE                MOV     A,R6
00DE C3                CLR     C
00DF 9F                SUBB    A,R7
00E0 4003              JC      $ + 5H
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 54  

00E2 020000      R     LJMP    ?C0039
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 618
00E5 900000      R     MOV     DPTR,#pos
00E8 E0                MOVX    A,@DPTR
00E9 FF                MOV     R7,A
00EA 7400        R     MOV     A,#LOW CapSense_sensorOnMask
00EC 2F                ADD     A,R7
00ED F582              MOV     DPL,A
00EF E4                CLR     A
00F0 3400        R     ADDC    A,#HIGH CapSense_sensorOnMask
00F2 F583              MOV     DPH,A
00F4 C083              PUSH    DPH
00F6 C082              PUSH    DPL
00F8 E0                MOVX    A,@DPTR
00F9 FF                MOV     R7,A
00FA 900000      R     MOV     DPTR,#onMask
00FD E0                MOVX    A,@DPTR
00FE FE                MOV     R6,A
00FF EE                MOV     A,R6
0100 F4                CPL     A
0101 FE                MOV     R6,A
0102 EF                MOV     A,R7
0103 5E                ANL     A,R6
0104 FF                MOV     R7,A
0105 D082              POP     DPL
0107 D083              POP     DPH
0109 EF                MOV     A,R7
010A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
010B 900000      R     MOV     DPTR,#debounce
010E E0                MOVX    A,@DPTR
010F FF                MOV     R7,A
0110 900000      R     MOV     DPTR,#debounceIndex
0113 E0                MOVX    A,@DPTR
0114 FE                MOV     R6,A
0115 7400        R     MOV     A,#LOW CapSense_debounceCounter
0117 2E                ADD     A,R6
0118 F582              MOV     DPL,A
011A E4                CLR     A
011B 3400        R     ADDC    A,#HIGH CapSense_debounceCounter
011D F583              MOV     DPH,A
011F EF                MOV     A,R7
0120 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 620
                                           ; SOURCE LINE # 621
0121 020000      R     LJMP    ?C0039
0124         ?C0037:
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 625
0124 900000      R     MOV     DPTR,#hysteresis
0127 E0                MOVX    A,@DPTR
0128 FF                MOV     R7,A
0129 900000      R     MOV     DPTR,#fingerThreshold
012C E0                MOVX    A,@DPTR
012D FE                MOV     R6,A
012E EE                MOV     A,R6
012F 2F                ADD     A,R7
0130 FF                MOV     R7,A
0131 900000      R     MOV     DPTR,#sensor
0134 E0                MOVX    A,@DPTR
0135 FE                MOV     R6,A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 55  

0136 7400        R     MOV     A,#LOW CapSense_sensorSignal
0138 2E                ADD     A,R6
0139 F582              MOV     DPL,A
013B E4                CLR     A
013C 3400        R     ADDC    A,#HIGH CapSense_sensorSignal
013E F583              MOV     DPH,A
0140 E0                MOVX    A,@DPTR
0141 FE                MOV     R6,A
0142 EE                MOV     A,R6
0143 D3                SETB    C
0144 9F                SUBB    A,R7
0145 404E              JC      ?C0040
                                           ; SOURCE LINE # 626
                                           ; SOURCE LINE # 628
0147 900000      R     MOV     DPTR,#debounceIndex
014A E0                MOVX    A,@DPTR
014B FF                MOV     R7,A
014C 7400        R     MOV     A,#LOW CapSense_debounceCounter
014E 2F                ADD     A,R7
014F F582              MOV     DPL,A
0151 E4                CLR     A
0152 3400        R     ADDC    A,#HIGH CapSense_debounceCounter
0154 F583              MOV     DPH,A
0156 E0                MOVX    A,@DPTR
0157 FF                MOV     R7,A
0158 EF                MOV     A,R7
0159 D3                SETB    C
015A 9401              SUBB    A,#01H
015C 5023              JNC     ?C0041
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 630
015E 900000      R     MOV     DPTR,#pos
0161 E0                MOVX    A,@DPTR
0162 FF                MOV     R7,A
0163 7400        R     MOV     A,#LOW CapSense_sensorOnMask
0165 2F                ADD     A,R7
0166 F582              MOV     DPL,A
0168 E4                CLR     A
0169 3400        R     ADDC    A,#HIGH CapSense_sensorOnMask
016B F583              MOV     DPH,A
016D C083              PUSH    DPH
016F C082              PUSH    DPL
0171 E0                MOVX    A,@DPTR
0172 FF                MOV     R7,A
0173 900000      R     MOV     DPTR,#onMask
0176 E0                MOVX    A,@DPTR
0177 FE                MOV     R6,A
0178 EF                MOV     A,R7
0179 4E                ORL     A,R6
017A FF                MOV     R7,A
017B D082              POP     DPL
017D D083              POP     DPH
017F EF                MOV     A,R7
0180 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 631
0181         ?C0041:
                                           ; SOURCE LINE # 632
0181 900000      R     MOV     DPTR,#debounceIndex
0184 E0                MOVX    A,@DPTR
0185 FF                MOV     R7,A
0186 7400        R     MOV     A,#LOW CapSense_debounceCounter
0188 2F                ADD     A,R7
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 56  

0189 F582              MOV     DPL,A
018B E4                CLR     A
018C 3400        R     ADDC    A,#HIGH CapSense_debounceCounter
018E F583              MOV     DPH,A
0190 E0                MOVX    A,@DPTR
0191 14                DEC     A
0192 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 633
0193 8016              SJMP    ?C0039
0195         ?C0040:
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 637
0195 900000      R     MOV     DPTR,#debounce
0198 E0                MOVX    A,@DPTR
0199 FF                MOV     R7,A
019A 900000      R     MOV     DPTR,#debounceIndex
019D E0                MOVX    A,@DPTR
019E FE                MOV     R6,A
019F 7400        R     MOV     A,#LOW CapSense_debounceCounter
01A1 2E                ADD     A,R6
01A2 F582              MOV     DPL,A
01A4 E4                CLR     A
01A5 3400        R     ADDC    A,#HIGH CapSense_debounceCounter
01A7 F583              MOV     DPH,A
01A9 EF                MOV     A,R7
01AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 638
                                           ; SOURCE LINE # 639
01AB         ?C0039:
                                           ; SOURCE LINE # 641
01AB 900000      R     MOV     DPTR,#pos
01AE E0                MOVX    A,@DPTR
01AF FF                MOV     R7,A
01B0 7400        R     MOV     A,#LOW CapSense_sensorOnMask
01B2 2F                ADD     A,R7
01B3 F582              MOV     DPL,A
01B5 E4                CLR     A
01B6 3400        R     ADDC    A,#HIGH CapSense_sensorOnMask
01B8 F583              MOV     DPH,A
01BA E0                MOVX    A,@DPTR
01BB FF                MOV     R7,A
01BC 900000      R     MOV     DPTR,#onMask
01BF E0                MOVX    A,@DPTR
01C0 FE                MOV     R6,A
01C1 EF                MOV     A,R7
01C2 5E                ANL     A,R6
01C3 FF                MOV     R7,A
01C4 EF                MOV     A,R7
01C5 6004              JZ      ?C0043
01C7 7F01              MOV     R7,#01H
01C9 8002              SJMP    ?C0044
01CB         ?C0043:
01CB 7F00              MOV     R7,#00H
01CD         ?C0044:
                                           ; SOURCE LINE # 642
01CD         ?C0045:
01CD 22                RET     
             ; FUNCTION _CapSense_CheckIsSensorActive (END)

             ; FUNCTION _CapSense_CheckIsWidgetActive (BEGIN)
                                           ; SOURCE LINE # 668
0000 900000      R     MOV     DPTR,#widget
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 57  

0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 671
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rawIndex
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 672
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#rawIndex
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 2E                ADD     A,R6
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#numberOfSensors
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 673
002D 900000      R     MOV     DPTR,#state
0030 E4                CLR     A
0031 F0                MOVX    @DPTR,A
0032         ?C0048:
                                           ; SOURCE LINE # 677
                                           ; SOURCE LINE # 678
0032 900000      R     MOV     DPTR,#rawIndex
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 120000      R     LCALL   _CapSense_CheckIsSensorActive
003A EF                MOV     A,R7
003B 6006              JZ      ?C0049
                                           ; SOURCE LINE # 679
                                           ; SOURCE LINE # 680
003D 900000      R     MOV     DPTR,#state
0040 7401              MOV     A,#01H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
0043         ?C0049:
                                           ; SOURCE LINE # 682
0043 900000      R     MOV     DPTR,#rawIndex
0046 E0                MOVX    A,@DPTR
0047 04                INC     A
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 683
                                           ; SOURCE LINE # 684
0049 900000      R     MOV     DPTR,#numberOfSensors
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 900000      R     MOV     DPTR,#rawIndex
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 58  

0051 E0                MOVX    A,@DPTR
0052 FE                MOV     R6,A
0053 EE                MOV     A,R6
0054 C3                CLR     C
0055 9F                SUBB    A,R7
0056 40DA              JC      ?C0048
                                           ; SOURCE LINE # 688
0058 900000      R     MOV     DPTR,#state
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
                                           ; SOURCE LINE # 689
005D         ?C0050:
005D 22                RET     
             ; FUNCTION _CapSense_CheckIsWidgetActive (END)

             ; FUNCTION CapSense_CheckIsAnyWidgetActive (BEGIN)
                                           ; SOURCE LINE # 712
                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 716
0000 900000      R     MOV     DPTR,#state
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 718
0005 900000      R     MOV     DPTR,#i
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
000A         ?C0051:
000A 900000      R     MOV     DPTR,#i
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 C3                CLR     C
0011 9403              SUBB    A,#03H
0013 5019              JNC     ?C0052
                                           ; SOURCE LINE # 719
                                           ; SOURCE LINE # 720
0015 900000      R     MOV     DPTR,#i
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 120000      R     LCALL   _CapSense_CheckIsWidgetActive
001D EF                MOV     A,R7
001E 6006              JZ      ?C0053
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 722
0020 900000      R     MOV     DPTR,#state
0023 7401              MOV     A,#01H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 723
                                           ; SOURCE LINE # 724
0026         ?C0053:
0026 900000      R     MOV     DPTR,#i
0029 E0                MOVX    A,@DPTR
002A 04                INC     A
002B F0                MOVX    @DPTR,A
002C 80DC              SJMP    ?C0051
002E         ?C0052:
                                           ; SOURCE LINE # 727
002E 900000      R     MOV     DPTR,#state
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
                                           ; SOURCE LINE # 728
0033         ?C0055:
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 59  

0033 22                RET     
             ; FUNCTION CapSense_CheckIsAnyWidgetActive (END)

             ; FUNCTION _CapSense_EnableWidget (BEGIN)
                                           ; SOURCE LINE # 758
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 760
                                           ; SOURCE LINE # 763
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rawIndex
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 764
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#rawIndex
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 2E                ADD     A,R6
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#numberOfSensors
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
002D         ?C0058:
                                           ; SOURCE LINE # 768
                                           ; SOURCE LINE # 769
002D 900000      R     MOV     DPTR,#rawIndex
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 13                RRC     A
0034 13                RRC     A
0035 13                RRC     A
0036 541F              ANL     A,#01FH
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#pos
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 770
003E 900000      R     MOV     DPTR,#rawIndex
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 5407              ANL     A,#07H
0046 FF                MOV     R7,A
0047 7401              MOV     A,#01H
0049 A807              MOV     R0,AR7
004B 08                INC     R0
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 60  

004C 8002              SJMP    ?C0090
004E         ?C0089:
004E C3                CLR     C
004F 33                RLC     A
0050         ?C0090:
0050 D8FC              DJNZ    R0,?C0089
0052 FF                MOV     R7,A
0053 900000      R     MOV     DPTR,#enMask
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 772
0058 900000      R     MOV     DPTR,#pos
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 7400        E     MOV     A,#LOW CapSense_sensorEnableMask
005F 2F                ADD     A,R7
0060 F582              MOV     DPL,A
0062 E4                CLR     A
0063 3400        E     ADDC    A,#HIGH CapSense_sensorEnableMask
0065 F583              MOV     DPH,A
0067 C083              PUSH    DPH
0069 C082              PUSH    DPL
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D 900000      R     MOV     DPTR,#enMask
0070 E0                MOVX    A,@DPTR
0071 FE                MOV     R6,A
0072 EF                MOV     A,R7
0073 4E                ORL     A,R6
0074 FF                MOV     R7,A
0075 D082              POP     DPL
0077 D083              POP     DPH
0079 EF                MOV     A,R7
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
007B 900000      R     MOV     DPTR,#rawIndex
007E E0                MOVX    A,@DPTR
007F 04                INC     A
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 774
                                           ; SOURCE LINE # 775
0081 900000      R     MOV     DPTR,#numberOfSensors
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 900000      R     MOV     DPTR,#rawIndex
0089 E0                MOVX    A,@DPTR
008A FE                MOV     R6,A
008B EE                MOV     A,R6
008C C3                CLR     C
008D 9F                SUBB    A,R7
008E 409D              JC      ?C0058
                                           ; SOURCE LINE # 778
0090 22                RET     
             ; FUNCTION _CapSense_EnableWidget (END)

             ; FUNCTION _CapSense_DisableWidget (BEGIN)
                                           ; SOURCE LINE # 808
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 813
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 61  

0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rawIndex
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 814
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#rawIndex
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 2E                ADD     A,R6
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#numberOfSensors
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
002D         ?C0062:
                                           ; SOURCE LINE # 818
                                           ; SOURCE LINE # 819
002D 900000      R     MOV     DPTR,#rawIndex
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 13                RRC     A
0034 13                RRC     A
0035 13                RRC     A
0036 541F              ANL     A,#01FH
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#pos
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 820
003E 900000      R     MOV     DPTR,#rawIndex
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 5407              ANL     A,#07H
0046 FF                MOV     R7,A
0047 7401              MOV     A,#01H
0049 A807              MOV     R0,AR7
004B 08                INC     R0
004C 8002              SJMP    ?C0092
004E         ?C0091:
004E C3                CLR     C
004F 33                RLC     A
0050         ?C0092:
0050 D8FC              DJNZ    R0,?C0091
0052 FF                MOV     R7,A
0053 900000      R     MOV     DPTR,#enMask
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 62  

                                           ; SOURCE LINE # 822
0058 900000      R     MOV     DPTR,#pos
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 7400        E     MOV     A,#LOW CapSense_sensorEnableMask
005F 2F                ADD     A,R7
0060 F582              MOV     DPL,A
0062 E4                CLR     A
0063 3400        E     ADDC    A,#HIGH CapSense_sensorEnableMask
0065 F583              MOV     DPH,A
0067 C083              PUSH    DPH
0069 C082              PUSH    DPL
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D 900000      R     MOV     DPTR,#enMask
0070 E0                MOVX    A,@DPTR
0071 FE                MOV     R6,A
0072 EE                MOV     A,R6
0073 F4                CPL     A
0074 FE                MOV     R6,A
0075 EF                MOV     A,R7
0076 5E                ANL     A,R6
0077 FF                MOV     R7,A
0078 D082              POP     DPL
007A D083              POP     DPH
007C EF                MOV     A,R7
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 823
007E 900000      R     MOV     DPTR,#rawIndex
0081 E0                MOVX    A,@DPTR
0082 04                INC     A
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 824
                                           ; SOURCE LINE # 825
0084 900000      R     MOV     DPTR,#numberOfSensors
0087 E0                MOVX    A,@DPTR
0088 FF                MOV     R7,A
0089 900000      R     MOV     DPTR,#rawIndex
008C E0                MOVX    A,@DPTR
008D FE                MOV     R6,A
008E EE                MOV     A,R6
008F C3                CLR     C
0090 9F                SUBB    A,R7
0091 409A              JC      ?C0062
                                           ; SOURCE LINE # 828
0093 22                RET     
             ; FUNCTION _CapSense_DisableWidget (END)

             ; FUNCTION _CapSense_FindMaximum (BEGIN)
                                           ; SOURCE LINE # 858
0000 900000      R     MOV     DPTR,#offset
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#count
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#fingerThreshold
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 861
                                           ; SOURCE LINE # 872
000F 900000      R     MOV     DPTR,#maximum
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 63  

0012 74FF              MOV     A,#0FFH
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 873
0015 900000      R     MOV     DPTR,#temp
0018 E4                CLR     A
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 874
001A 900000      R     MOV     DPTR,#offset
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 7400        R     MOV     A,#LOW CapSense_sensorSignal
0021 2F                ADD     A,R7
0022 F9                MOV     R1,A
0023 E4                CLR     A
0024 3400        R     ADDC    A,#HIGH CapSense_sensorSignal
0026 FA                MOV     R2,A
0027 7B01              MOV     R3,#01H
0029 900000      R     MOV     DPTR,#startOfSlider
002C 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 971
002F 900000      R     MOV     DPTR,#i
0032 E4                CLR     A
0033 F0                MOVX    @DPTR,A
0034         ?C0064:
0034 900000      R     MOV     DPTR,#count
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#i
003C E0                MOVX    A,@DPTR
003D FE                MOV     R6,A
003E EE                MOV     A,R6
003F C3                CLR     C
0040 9F                SUBB    A,R7
0041 506A              JNC     ?C0065
                                           ; SOURCE LINE # 972
                                           ; SOURCE LINE # 974
0043 900000      R     MOV     DPTR,#startOfSlider
0046 120000      E     LCALL   ?C?PLDXDATA
0049 900000      R     MOV     DPTR,#i
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E E9                MOV     A,R1
004F 2F                ADD     A,R7
0050 F9                MOV     R1,A
0051 E4                CLR     A
0052 3A                ADDC    A,R2
0053 FA                MOV     R2,A
0054 120000      E     LCALL   ?C?CLDPTR
0057 FF                MOV     R7,A
0058 900000      R     MOV     DPTR,#fingerThreshold
005B E0                MOVX    A,@DPTR
005C FE                MOV     R6,A
005D EF                MOV     A,R7
005E D3                SETB    C
005F 9E                SUBB    A,R6
0060 4043              JC      ?C0066
                                           ; SOURCE LINE # 975
                                           ; SOURCE LINE # 976
0062 900000      R     MOV     DPTR,#startOfSlider
0065 120000      E     LCALL   ?C?PLDXDATA
0068 900000      R     MOV     DPTR,#i
006B E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 64  

006C FF                MOV     R7,A
006D E9                MOV     A,R1
006E 2F                ADD     A,R7
006F F9                MOV     R1,A
0070 E4                CLR     A
0071 3A                ADDC    A,R2
0072 FA                MOV     R2,A
0073 120000      E     LCALL   ?C?CLDPTR
0076 FF                MOV     R7,A
0077 900000      R     MOV     DPTR,#temp
007A E0                MOVX    A,@DPTR
007B FE                MOV     R6,A
007C EF                MOV     A,R7
007D D3                SETB    C
007E 9E                SUBB    A,R6
007F 4024              JC      ?C0066
                                           ; SOURCE LINE # 977
                                           ; SOURCE LINE # 978
0081 900000      R     MOV     DPTR,#i
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 900000      R     MOV     DPTR,#maximum
0089 EF                MOV     A,R7
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 979
008B 900000      R     MOV     DPTR,#startOfSlider
008E 120000      E     LCALL   ?C?PLDXDATA
0091 900000      R     MOV     DPTR,#i
0094 E0                MOVX    A,@DPTR
0095 FF                MOV     R7,A
0096 E9                MOV     A,R1
0097 2F                ADD     A,R7
0098 F9                MOV     R1,A
0099 E4                CLR     A
009A 3A                ADDC    A,R2
009B FA                MOV     R2,A
009C 120000      E     LCALL   ?C?CLDPTR
009F FF                MOV     R7,A
00A0 900000      R     MOV     DPTR,#temp
00A3 EF                MOV     A,R7
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 980
                                           ; SOURCE LINE # 981
                                           ; SOURCE LINE # 982
00A5         ?C0066:
00A5 900000      R     MOV     DPTR,#i
00A8 E0                MOVX    A,@DPTR
00A9 04                INC     A
00AA F0                MOVX    @DPTR,A
00AB 8087              SJMP    ?C0064
00AD         ?C0065:
                                           ; SOURCE LINE # 984
00AD 900000      R     MOV     DPTR,#maximum
00B0 E0                MOVX    A,@DPTR
00B1 FF                MOV     R7,A
                                           ; SOURCE LINE # 985
00B2         ?C0069:
00B2 22                RET     
             ; FUNCTION _CapSense_FindMaximum (END)

             ; FUNCTION _CapSense_CalcCentroid (BEGIN)
                                           ; SOURCE LINE # 1014
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 65  

0000 900000      R     MOV     DPTR,#maximum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#offset
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#count
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1017
                                           ; SOURCE LINE # 1019
000F 900000      R     MOV     DPTR,#posPrev
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1020
0014 900000      R     MOV     DPTR,#posNext
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1033
0019 900000      R     MOV     DPTR,#offset
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 7400        R     MOV     A,#LOW CapSense_sensorSignal
0020 2F                ADD     A,R7
0021 F9                MOV     R1,A
0022 E4                CLR     A
0023 3400        R     ADDC    A,#HIGH CapSense_sensorSignal
0025 FA                MOV     R2,A
0026 7B01              MOV     R3,#01H
0028 900000      R     MOV     DPTR,#startOfSlider
002B 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1092
002E 900000      R     MOV     DPTR,#maximum
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 EF                MOV     A,R7
0034 C3                CLR     C
0035 9401              SUBB    A,#01H
0037 400D              JC      ?C0070
                                           ; SOURCE LINE # 1093
                                           ; SOURCE LINE # 1094
0039 900000      R     MOV     DPTR,#maximum
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F 14                DEC     A
0040 FF                MOV     R7,A
0041 900000      R     MOV     DPTR,#posPrev
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1095
0046         ?C0070:
                                           ; SOURCE LINE # 1096
0046 900000      R     MOV     DPTR,#maximum
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C 04                INC     A
004D FF                MOV     R7,A
004E 900000      R     MOV     DPTR,#posNext
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 66  

                                           ; SOURCE LINE # 1103
0053 900000      R     MOV     DPTR,#startOfSlider
0056 120000      E     LCALL   ?C?PLDXDATA
0059 900000      R     MOV     DPTR,#maximum
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E E9                MOV     A,R1
005F 2F                ADD     A,R7
0060 F9                MOV     R1,A
0061 E4                CLR     A
0062 3A                ADDC    A,R2
0063 FA                MOV     R2,A
0064 120000      E     LCALL   ?C?CLDPTR
0067 FF                MOV     R7,A
0068 900000      R     MOV     DPTR,#CapSense_centroid+01H
006B EF                MOV     A,R7
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1107
006D 900000      R     MOV     DPTR,#maximum
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
0072 EF                MOV     A,R7
0073 7021              JNZ     ?C0071
                                           ; SOURCE LINE # 1108
                                           ; SOURCE LINE # 1109
0075 900000      R     MOV     DPTR,#CapSense_centroid
0078 E4                CLR     A
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1110
007A 900000      R     MOV     DPTR,#startOfSlider
007D 120000      E     LCALL   ?C?PLDXDATA
0080 900000      R     MOV     DPTR,#posNext
0083 E0                MOVX    A,@DPTR
0084 FF                MOV     R7,A
0085 E9                MOV     A,R1
0086 2F                ADD     A,R7
0087 F9                MOV     R1,A
0088 E4                CLR     A
0089 3A                ADDC    A,R2
008A FA                MOV     R2,A
008B 120000      E     LCALL   ?C?CLDPTR
008E FF                MOV     R7,A
008F 900000      R     MOV     DPTR,#CapSense_centroid+02H
0092 EF                MOV     A,R7
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1111
0094 8073              SJMP    ?C0072
0096         ?C0071:
                                           ; SOURCE LINE # 1112
0096 900000      R     MOV     DPTR,#count
0099 E0                MOVX    A,@DPTR
009A FF                MOV     R7,A
009B 7E00              MOV     R6,#00H
009D EF                MOV     A,R7
009E 24FF              ADD     A,#0FFH
00A0 FF                MOV     R7,A
00A1 EE                MOV     A,R6
00A2 34FF              ADDC    A,#0FFH
00A4 FE                MOV     R6,A
00A5 900000      R     MOV     DPTR,#maximum
00A8 E0                MOVX    A,@DPTR
00A9 FD                MOV     R5,A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 67  

00AA 7C00              MOV     R4,#00H
00AC EF                MOV     A,R7
00AD B50525            CJNE    A,AR5,?C0073
00B0 EE                MOV     A,R6
00B1 B50421            CJNE    A,AR4,?C0073
                                           ; SOURCE LINE # 1113
                                           ; SOURCE LINE # 1114
00B4 900000      R     MOV     DPTR,#startOfSlider
00B7 120000      E     LCALL   ?C?PLDXDATA
00BA 900000      R     MOV     DPTR,#posPrev
00BD E0                MOVX    A,@DPTR
00BE FF                MOV     R7,A
00BF E9                MOV     A,R1
00C0 2F                ADD     A,R7
00C1 F9                MOV     R1,A
00C2 E4                CLR     A
00C3 3A                ADDC    A,R2
00C4 FA                MOV     R2,A
00C5 120000      E     LCALL   ?C?CLDPTR
00C8 FF                MOV     R7,A
00C9 900000      R     MOV     DPTR,#CapSense_centroid
00CC EF                MOV     A,R7
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1115
00CE 900000      R     MOV     DPTR,#CapSense_centroid+02H
00D1 E4                CLR     A
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1116
00D3 8034              SJMP    ?C0072
00D5         ?C0073:
                                           ; SOURCE LINE # 1118
                                           ; SOURCE LINE # 1119
00D5 900000      R     MOV     DPTR,#startOfSlider
00D8 120000      E     LCALL   ?C?PLDXDATA
00DB 900000      R     MOV     DPTR,#posPrev
00DE E0                MOVX    A,@DPTR
00DF FF                MOV     R7,A
00E0 E9                MOV     A,R1
00E1 2F                ADD     A,R7
00E2 F9                MOV     R1,A
00E3 E4                CLR     A
00E4 3A                ADDC    A,R2
00E5 FA                MOV     R2,A
00E6 120000      E     LCALL   ?C?CLDPTR
00E9 FF                MOV     R7,A
00EA 900000      R     MOV     DPTR,#CapSense_centroid
00ED EF                MOV     A,R7
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1120
00EF 900000      R     MOV     DPTR,#startOfSlider
00F2 120000      E     LCALL   ?C?PLDXDATA
00F5 900000      R     MOV     DPTR,#posNext
00F8 E0                MOVX    A,@DPTR
00F9 FF                MOV     R7,A
00FA E9                MOV     A,R1
00FB 2F                ADD     A,R7
00FC F9                MOV     R1,A
00FD E4                CLR     A
00FE 3A                ADDC    A,R2
00FF FA                MOV     R2,A
0100 120000      E     LCALL   ?C?CLDPTR
0103 FF                MOV     R7,A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 68  

0104 900000      R     MOV     DPTR,#CapSense_centroid+02H
0107 EF                MOV     A,R7
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1121
0109         ?C0072:
                                           ; SOURCE LINE # 1129
0109 900000      R     MOV     DPTR,#noiseThreshold
010C E0                MOVX    A,@DPTR
010D FF                MOV     R7,A
010E 900000      R     MOV     DPTR,#CapSense_centroid
0111 E0                MOVX    A,@DPTR
0112 FE                MOV     R6,A
0113 EE                MOV     A,R6
0114 D3                SETB    C
0115 9F                SUBB    A,R7
0116 4015              JC      ?C0075
                                           ; SOURCE LINE # 1130
                                           ; SOURCE LINE # 1131
0118 900000      R     MOV     DPTR,#CapSense_centroid
011B E0                MOVX    A,@DPTR
011C FF                MOV     R7,A
011D 900000      R     MOV     DPTR,#noiseThreshold
0120 E0                MOVX    A,@DPTR
0121 FE                MOV     R6,A
0122 C3                CLR     C
0123 EF                MOV     A,R7
0124 9E                SUBB    A,R6
0125 FF                MOV     R7,A
0126 900000      R     MOV     DPTR,#CapSense_centroid
0129 EF                MOV     A,R7
012A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1132
012B 8005              SJMP    ?C0076
012D         ?C0075:
                                           ; SOURCE LINE # 1134
                                           ; SOURCE LINE # 1135
012D 900000      R     MOV     DPTR,#CapSense_centroid
0130 E4                CLR     A
0131 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1136
0132         ?C0076:
                                           ; SOURCE LINE # 1139
0132 900000      R     MOV     DPTR,#CapSense_centroid+01H
0135 E0                MOVX    A,@DPTR
0136 FF                MOV     R7,A
0137 900000      R     MOV     DPTR,#noiseThreshold
013A E0                MOVX    A,@DPTR
013B FE                MOV     R6,A
013C C3                CLR     C
013D EF                MOV     A,R7
013E 9E                SUBB    A,R6
013F FF                MOV     R7,A
0140 900000      R     MOV     DPTR,#CapSense_centroid+01H
0143 EF                MOV     A,R7
0144 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1142
0145 900000      R     MOV     DPTR,#noiseThreshold
0148 E0                MOVX    A,@DPTR
0149 FF                MOV     R7,A
014A 900000      R     MOV     DPTR,#CapSense_centroid+02H
014D E0                MOVX    A,@DPTR
014E FE                MOV     R6,A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 69  

014F EE                MOV     A,R6
0150 D3                SETB    C
0151 9F                SUBB    A,R7
0152 4015              JC      ?C0077
                                           ; SOURCE LINE # 1143
                                           ; SOURCE LINE # 1144
0154 900000      R     MOV     DPTR,#CapSense_centroid+02H
0157 E0                MOVX    A,@DPTR
0158 FF                MOV     R7,A
0159 900000      R     MOV     DPTR,#noiseThreshold
015C E0                MOVX    A,@DPTR
015D FE                MOV     R6,A
015E C3                CLR     C
015F EF                MOV     A,R7
0160 9E                SUBB    A,R6
0161 FF                MOV     R7,A
0162 900000      R     MOV     DPTR,#CapSense_centroid+02H
0165 EF                MOV     A,R7
0166 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1145
0167 8005              SJMP    ?C0078
0169         ?C0077:
                                           ; SOURCE LINE # 1147
                                           ; SOURCE LINE # 1148
0169 900000      R     MOV     DPTR,#CapSense_centroid+02H
016C E4                CLR     A
016D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1149
016E         ?C0078:
                                           ; SOURCE LINE # 1154
016E 900000      R     MOV     DPTR,#CapSense_centroid
0171 E0                MOVX    A,@DPTR
0172 FF                MOV     R7,A
0173 AB07              MOV     R3,AR7
0175 E4                CLR     A
0176 FA                MOV     R2,A
0177 F9                MOV     R1,A
0178 F8                MOV     R0,A
0179 900000      R     MOV     DPTR,#CapSense_centroid+02H
017C E0                MOVX    A,@DPTR
017D FF                MOV     R7,A
017E E4                CLR     A
017F FC                MOV     R4,A
0180 FD                MOV     R5,A
0181 FE                MOV     R6,A
0182 120000      E     LCALL   ?C?LSUB
0185 900000      R     MOV     DPTR,#numerator
0188 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1159
018B 900000      R     MOV     DPTR,#CapSense_centroid+01H
018E E0                MOVX    A,@DPTR
018F FF                MOV     R7,A
0190 AB07              MOV     R3,AR7
0192 E4                CLR     A
0193 FA                MOV     R2,A
0194 F9                MOV     R1,A
0195 F8                MOV     R0,A
0196 900000      R     MOV     DPTR,#CapSense_centroid
0199 E0                MOVX    A,@DPTR
019A FF                MOV     R7,A
019B E4                CLR     A
019C FC                MOV     R4,A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 70  

019D FD                MOV     R5,A
019E FE                MOV     R6,A
019F 120000      E     LCALL   ?C?LADD
01A2 A804              MOV     R0,AR4
01A4 A905              MOV     R1,AR5
01A6 AA06              MOV     R2,AR6
01A8 AB07              MOV     R3,AR7
01AA 900000      R     MOV     DPTR,#CapSense_centroid+02H
01AD E0                MOVX    A,@DPTR
01AE FF                MOV     R7,A
01AF E4                CLR     A
01B0 FC                MOV     R4,A
01B1 FD                MOV     R5,A
01B2 FE                MOV     R6,A
01B3 120000      E     LCALL   ?C?LADD
01B6 900000      R     MOV     DPTR,#denominator
01B9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1162
01BC 900000      R     MOV     DPTR,#numerator
01BF 120000      E     LCALL   ?C?LLDXDATA
01C2 7808              MOV     R0,#08H
01C4 120000      E     LCALL   ?C?LSHL
01C7 900000      R     MOV     DPTR,#denominator
01CA 120000      E     LCALL   ?C?LLDXDATA0
01CD 120000      E     LCALL   ?C?SLDIV
01D0 C004              PUSH    AR4
01D2 C005              PUSH    AR5
01D4 C006              PUSH    AR6
01D6 C007              PUSH    AR7
01D8 900000      R     MOV     DPTR,#maximum
01DB E0                MOVX    A,@DPTR
01DC FF                MOV     R7,A
01DD E4                CLR     A
01DE FC                MOV     R4,A
01DF FD                MOV     R5,A
01E0 FE                MOV     R6,A
01E1 7808              MOV     R0,#08H
01E3 120000      E     LCALL   ?C?LSHL
01E6 AB07              MOV     R3,AR7
01E8 AA06              MOV     R2,AR6
01EA A905              MOV     R1,AR5
01EC A804              MOV     R0,AR4
01EE A804              MOV     R0,AR4
01F0 A905              MOV     R1,AR5
01F2 AA06              MOV     R2,AR6
01F4 AB07              MOV     R3,AR7
01F6 D007              POP     AR7
01F8 D006              POP     AR6
01FA D005              POP     AR5
01FC D004              POP     AR4
01FE 120000      E     LCALL   ?C?LADD
0201 900000      R     MOV     DPTR,#denominator
0204 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1172
0207 900000      R     MOV     DPTR,#denominator
020A 120000      E     LCALL   ?C?LLDXDATA0
020D 900000      R     MOV     DPTR,#resolution
0210 E0                MOVX    A,@DPTR
0211 FE                MOV     R6,A
0212 A3                INC     DPTR
0213 E0                MOVX    A,@DPTR
0214 FF                MOV     R7,A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 71  

0215 EE                MOV     A,R6
0216 33                RLC     A
0217 95E0              SUBB    A,ACC
0219 FD                MOV     R5,A
021A FC                MOV     R4,A
021B 120000      E     LCALL   ?C?LMUL
021E 900000      R     MOV     DPTR,#denominator
0221 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1175
0224 900000      R     MOV     DPTR,#denominator
0227 120000      E     LCALL   ?C?LLDXDATA
022A EF                MOV     A,R7
022B 2400              ADD     A,#00H
022D FF                MOV     R7,A
022E EE                MOV     A,R6
022F 347F              ADDC    A,#07FH
0231 FE                MOV     R6,A
0232 ED                MOV     A,R5
0233 3400              ADDC    A,#00H
0235 FD                MOV     R5,A
0236 EC                MOV     A,R4
0237 3400              ADDC    A,#00H
0239 FC                MOV     R4,A
023A 7810              MOV     R0,#010H
023C 120000      E     LCALL   ?C?ULSHR
023F 900000      R     MOV     DPTR,#position
0242 EF                MOV     A,R7
0243 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1177
0244 900000      R     MOV     DPTR,#position
0247 E0                MOVX    A,@DPTR
0248 FF                MOV     R7,A
                                           ; SOURCE LINE # 1178
0249         ?C0079:
0249 22                RET     
             ; FUNCTION _CapSense_CalcCentroid (END)

             ; FUNCTION _CapSense_GetCentroidPos (BEGIN)
                                           ; SOURCE LINE # 1219
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1220
                                           ; SOURCE LINE # 1240
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#offset
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1241
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 72  

0020 900000      R     MOV     DPTR,#count
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1259
0025 900000      R     MOV     DPTR,#offset
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A 900000      R     MOV     DPTR,#count
002D E0                MOVX    A,@DPTR
002E FD                MOV     R5,A
002F 900000      R     MOV     DPTR,#widget
0032 E0                MOVX    A,@DPTR
0033 FE                MOV     R6,A
0034 EE                MOV     A,R6
0035 900000      R     MOV     DPTR,#CapSense_fingerThreshold
0038 93                MOVC    A,@A+DPTR
0039 FB                MOV     R3,A
003A 120000      R     LCALL   _CapSense_FindMaximum
003D 900000      R     MOV     DPTR,#maximum
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1262
0042 900000      R     MOV     DPTR,#maximum
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 64FF              XRL     A,#0FFH
004A 604E              JZ      ?C0080
                                           ; SOURCE LINE # 1263
                                           ; SOURCE LINE # 1265
004C 900000      R     MOV     DPTR,#widget
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 25E0              ADD     A,ACC
0054 2400        R     ADD     A,#LOW CapSense_centroidMult
0056 F582              MOV     DPL,A
0058 E4                CLR     A
0059 3400        R     ADDC    A,#HIGH CapSense_centroidMult
005B F583              MOV     DPH,A
005D E4                CLR     A
005E 93                MOVC    A,@A+DPTR
005F FE                MOV     R6,A
0060 7401              MOV     A,#01H
0062 93                MOVC    A,@A+DPTR
0063 FF                MOV     R7,A
0064 900000      R     MOV     DPTR,#?_CapSense_CalcCentroid?BYTE+03H
0067 EE                MOV     A,R6
0068 F0                MOVX    @DPTR,A
0069 A3                INC     DPTR
006A EF                MOV     A,R7
006B F0                MOVX    @DPTR,A
006C 900000      R     MOV     DPTR,#maximum
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 900000      R     MOV     DPTR,#offset
0074 E0                MOVX    A,@DPTR
0075 FD                MOV     R5,A
0076 900000      R     MOV     DPTR,#count
0079 E0                MOVX    A,@DPTR
007A FB                MOV     R3,A
007B 900000      R     MOV     DPTR,#widget
C51 COMPILER V9.51   CAPSENSE_CSHL                                                         11/29/2022 16:00:58 PAGE 73  

007E E0                MOVX    A,@DPTR
007F FE                MOV     R6,A
0080 EE                MOV     A,R6
0081 900000      R     MOV     DPTR,#CapSense_noiseThreshold
0084 93                MOVC    A,@A+DPTR
0085 FE                MOV     R6,A
0086 900000      R     MOV     DPTR,#?_CapSense_CalcCentroid?BYTE+05H
0089 EE                MOV     A,R6
008A F0                MOVX    @DPTR,A
008B 120000      R     LCALL   _CapSense_CalcCentroid
008E 7E00              MOV     R6,#00H
0090 900000      R     MOV     DPTR,#position
0093 EE                MOV     A,R6
0094 F0                MOVX    @DPTR,A
0095 A3                INC     DPTR
0096 EF                MOV     A,R7
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1365
0098 800A              SJMP    ?C0081
009A         ?C0080:
                                           ; SOURCE LINE # 1367
                                           ; SOURCE LINE # 1369
009A 900000      R     MOV     DPTR,#position
009D 74FF              MOV     A,#0FFH
009F F0                MOVX    @DPTR,A
00A0 A3                INC     DPTR
00A1 74FF              MOV     A,#0FFH
00A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1378
00A4         ?C0081:
                                           ; SOURCE LINE # 1381
00A4 900000      R     MOV     DPTR,#position
00A7 E0                MOVX    A,@DPTR
00A8 FE                MOV     R6,A
00A9 A3                INC     DPTR
00AA E0                MOVX    A,@DPTR
00AB FF                MOV     R7,A
                                           ; SOURCE LINE # 1382
00AC         ?C0082:
00AC 22                RET     
             ; FUNCTION _CapSense_GetCentroidPos (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2976    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =     42      80
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
