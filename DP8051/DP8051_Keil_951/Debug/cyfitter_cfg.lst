C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.4\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEB
                    -UG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/cyfitter_cfg.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\cyfitter_c
                    -fg.obj)

line level    source

   1          
   2          /*******************************************************************************
   3          * File Name: cyfitter_cfg.c
   4          * 
   5          * PSoC Creator  4.4
   6          *
   7          * Description:
   8          * This file contains device initialization code.
   9          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
  10          * This file is automatically generated by PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright (c) 2007-2020 Cypress Semiconductor.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions, 
  15          * disclaimers, and limitations in the end user license agreement accompanying 
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include <string.h>
  20          #include "cytypes.h"
  21          #include "cydevice_trm.h"
  22          #include "cyfitter.h"
  23          #include "CyLib.h"
  24          #include "cyfitter_cfg.h"
  25          #include "cyapicallbacks.h"
  26          
  27          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  28          
  29          
  30          #if defined(__C51__) || defined(__CX51__)
  31                  #define CYPACKED
  32                  #define CYPACKED_ATTR
  33                  #define CYALIGNED
  34                  
  35              #define CY_CFG_UNUSED
  36                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  37          
  38          
  39          
  40                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  41                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  42                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  43          #else
                      #error Unsupported toolchain
              #endif
  46          
  47          
  48          
  49          
  50          /* Clock startup error codes                                                   */
  51          #define CYCLOCKSTART_NO_ERROR    0u
  52          #define CYCLOCKSTART_XTAL_ERROR  1u
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 2   

  53          #define CYCLOCKSTART_32KHZ_ERROR 2u
  54          #define CYCLOCKSTART_PLL_ERROR   3u
  55          #define CYCLOCKSTART_FLL_ERROR   4u
  56          #define CYCLOCKSTART_WCO_ERROR   5u
  57          
  58          
  59          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  60          /*******************************************************************************
  61          * Function Name: CyClockStartupError
  62          ********************************************************************************
  63          * Summary:
  64          *  If an error is encountered during clock configuration (crystal startup error,
  65          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  66          *  the customer, this function will stop in an infinite loop.
  67          *
  68          * Parameters:
  69          *   void
  70          *
  71          * Return:
  72          *   void
  73          *
  74          *******************************************************************************/
  75          CY_CFG_UNUSED
  76          static void CyClockStartupError(uint8 errorCode);
  77          CY_CFG_UNUSED
  78          static void CyClockStartupError(uint8 errorCode)
  79          {
  80   1          /* To remove the compiler warning if errorCode not used.                */
  81   1          errorCode = errorCode;
  82   1      
  83   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  84   1          /* we will end up here to allow the customer to implement something to  */
  85   1          /* deal with the clock condition.                                       */
  86   1      
  87   1      #ifdef CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK
                  CY_CFG_Clock_Startup_ErrorCallback();
              #else
  90   1          /*  If not using CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK, place your clock startup code here. */
  91   1          /* `#START CyClockStartupError` */
  92   1      
  93   1      
  94   1      
  95   1          /* `#END` */
  96   1      
  97   1          while(1) {}
  98   1      #endif /* CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK */
  99   1      }
 100          #endif
 101          
 102          #define cfg_byte_table ((const void CYFAR *)0x080000u)
 103          /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
 104          #define BS_IOPINS0_1_VAL ((const uint8 CYFAR *)0x000802E4u)
 105          
 106          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 107          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x000802ECu)
 108          
 109          /* IOPINS0_5 Address: CYREG_PRT5_DM0 Size (bytes): 8 */
 110          #define BS_IOPINS0_5_VAL ((const uint8 CYFAR *)0x000802F4u)
 111          
 112          /* IOPINS0_6 Address: CYREG_PRT6_DM0 Size (bytes): 8 */
 113          #define BS_IOPINS0_6_VAL ((const uint8 CYFAR *)0x000802FCu)
 114          
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 3   

 115          
 116          /*******************************************************************************
 117          * Function Name: ClockSetup
 118          ********************************************************************************
 119          *
 120          * Summary:
 121          *  Performs the initialization of all of the clocks in the device based on the
 122          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 123          *  clocks and setting the necessary dividers to produce the desired frequency. 
 124          *
 125          * Parameters:
 126          *  void
 127          *
 128          * Return:
 129          *  void
 130          *
 131          *******************************************************************************/
 132          static void ClockSetup(void);
 133          static void ClockSetup(void)
 134          {
 135   1              uint32 timeout;
 136   1              uint8 pllLock;
 137   1      
 138   1      
 139   1              /* Configure Digital Clocks based on settings from Clock DWR */
 140   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x0001u);
 141   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x18u);
 142   1      
 143   1              /* Configure ILO based on settings from Clock DWR */
 144   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 145   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 146   1      
 147   1              /* Configure IMO based on settings from Clock DWR */
 148   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 149   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 150   1      
 151   1              /* Configure PLL based on settings from Clock DWR */
 152   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008u);
 153   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 154   1              /* Wait up to 250us for the PLL to lock */
 155   1              pllLock = 0u;
 156   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 157   1              { 
 158   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 159   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 160   2              }
 161   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 162   1              if (timeout == 0u)
 163   1              {
 164   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 165   2              }
 166   1      
 167   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 168   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 169   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 170   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 171   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 172   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 173   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 174   1      
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 4   

 175   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x01u
             -)));
 176   1      }
 177          
 178          
 179          /* Analog API Functions */
 180          
 181          
 182          /*******************************************************************************
 183          * Function Name: AnalogSetDefault
 184          ********************************************************************************
 185          *
 186          * Summary:
 187          *  Sets up the analog portions of the chip to default values based on chip
 188          *  configuration options from the project.
 189          *
 190          * Parameters:
 191          *  void
 192          *
 193          * Return:
 194          *  void
 195          *
 196          *******************************************************************************/
 197          static void AnalogSetDefault(void);
 198          static void AnalogSetDefault(void)
 199          {
 200   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 201   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 202   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 203   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT6_AG, 0x10u);
 204   1              CY_SET_REG8((void CYXDATA *)CYREG_CAPSL_CFG0, 0x00u);
 205   1              CY_SET_REG8((void CYXDATA *)CYREG_CMP0_SW3, 0x20u);
 206   1              CY_SET_REG8((void CYXDATA *)CYREG_BUS_SW3, 0x01u);
 207   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 208   1      }
 209          
 210          
 211          /*******************************************************************************
 212          * Function Name: SetAnalogRoutingPumps
 213          ********************************************************************************
 214          *
 215          * Summary:
 216          * Enables or disables the analog pumps feeding analog routing switches.
 217          * Intended to be called at startup, based on the Vdda system configuration;
 218          * may be called during operation when the user informs us that the Vdda voltage
 219          * crossed the pump threshold.
 220          *
 221          * Parameters:
 222          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 223          *
 224          * Return:
 225          *  void
 226          *
 227          *******************************************************************************/
 228          void SetAnalogRoutingPumps(uint8 enabled)
 229          {
 230   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 231   1              if (enabled != 0u)
 232   1              {
 233   2                      regValue |= 0x22u;
 234   2              }
 235   1              else
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 5   

 236   1              {
 237   2                      regValue &= (uint8)~0x22u;
 238   2              }
 239   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 240   1      }
 241          
 242          
 243          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 244          /* This is an implementation detail of the AMux. Code that depends on it may be
 245             incompatible with other versions of PSoC Creator. */
 246          uint8 CYXDATA * const CYCODE CapSense_AMuxCH0__addrTable[10] = {
 247                  (uint8 CYXDATA *)CYREG_PRT5_AMUX, 
 248                  (uint8 CYXDATA *)CYREG_PRT5_AMUX, 
 249                  (uint8 CYXDATA *)CYREG_PRT5_AMUX, 
 250                  (uint8 CYXDATA *)CYREG_PRT5_AMUX, 
 251                  (uint8 CYXDATA *)CYREG_PRT5_AMUX, 
 252                  (uint8 CYXDATA *)CYREG_PRT5_AMUX, 
 253                  (uint8 CYXDATA *)CYREG_PRT5_AMUX, 
 254                  (uint8 CYXDATA *)CYREG_PRT6_AMUX, 
 255                  (uint8 CYXDATA *)CYREG_CMP0_SW3, 
 256                  (uint8 CYXDATA *)CYREG_DAC1_SW3, 
 257          };
 258          
 259          /* This is an implementation detail of the AMux. Code that depends on it may be
 260             incompatible with other versions of PSoC Creator. */
 261          const uint8 CYCODE CapSense_AMuxCH0__maskTable[10] = {
 262                  0x01u, 
 263                  0x02u, 
 264                  0x04u, 
 265                  0x08u, 
 266                  0x10u, 
 267                  0x20u, 
 268                  0x40u, 
 269                  0x10u, 
 270                  0x01u, 
 271                  0x10u, 
 272          };
 273          
 274          /*******************************************************************************
 275          * Function Name: CapSense_AMuxCH0_Set
 276          ********************************************************************************
 277          * Summary:
 278          *  This function is used to set a particular channel as active on the AMux.
 279          *
 280          * Parameters:  
 281          *   channel - The mux channel input to set as active
 282          *
 283          * Return:
 284          *   void
 285          *
 286          *******************************************************************************/
 287          void CapSense_AMuxCH0_Set(uint8 channel)
 288          {
 289   1              if (channel < 10)
 290   1              {
 291   2                      *CapSense_AMuxCH0__addrTable[channel] |= CapSense_AMuxCH0__maskTable[channel];
 292   2              }
 293   1      }
 294          
 295          /*******************************************************************************
 296          * Function Name: CapSense_AMuxCH0_Unset
 297          ********************************************************************************
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 6   

 298          * Summary:
 299          *  This function is used to clear a particular channel from being active on the
 300          *  AMux.
 301          *
 302          * Parameters:  
 303          *   channel - The mux channel input to mark inactive
 304          *
 305          * Return:
 306          *   void
 307          *
 308          *******************************************************************************/
 309          void CapSense_AMuxCH0_Unset(uint8 channel)
 310          {
 311   1              if (channel < 10)
 312   1              {
 313   2                      *CapSense_AMuxCH0__addrTable[channel] &= (uint8)~CapSense_AMuxCH0__maskTable[channel];
 314   2              }
 315   1      }
 316          
 317          
 318          
 319          /*******************************************************************************
 320          * Function Name: cyfitter_cfg
 321          ********************************************************************************
 322          * Summary:
 323          *  This function is called by the start-up code for the selected device. It
 324          *  performs all of the necessary device configuration based on the design
 325          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 326          *  as Clocks and Pins as well as any component configuration that is necessary.
 327          *
 328          * Parameters:
 329          *   void
 330          *
 331          * Return:
 332          *   void
 333          *
 334          *******************************************************************************/
 335          
 336          void cyfitter_cfg(void)
 337          {
 338   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 339   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 340   1      
 341   1              {
 342   2      
 343   2                      CYPACKED typedef struct {
 344   2                              void CYFAR *address;
 345   2                              uint16 size;
 346   2                      } CYPACKED_ATTR cfg_memset_t;
 347   2      
 348   2                      static const cfg_memset_t CYCODE cfg_memset_list[] = {
 349   2                              /* address, size */
 350   2                              {(void CYFAR *)(CYREG_PRT0_DR), 16u},
 351   2                              {(void CYFAR *)(CYREG_PRT3_DR), 32u},
 352   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 353   2                              {(void CYFAR *)(CYREG_PRT15_DR), 16u},
 354   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 355   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 356   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 357   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 358   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 7   

 359   2                      };
 360   2      
 361   2                      uint8 CYDATA i;
 362   2      
 363   2                      /* Zero out critical memory blocks before beginning configuration */
 364   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 365   2                      {
 366   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 367   3                              CYMEMZERO(ms->address, ms->size);
 368   3                      }
 369   2      
 370   2                      cfg_write_bytes(cfg_byte_table);
 371   2      
 372   2                      /* Perform normal device configuration. Order is not critical for these items. */
 373   2                      CY_SET_XTND_REG16((void CYFAR *)(CYREG_CAPSR_CFG0), 0x0300u);
 374   2                      CY_SET_XTND_REG16((void CYFAR *)(CYREG_LUT0_CR), 0x0003u);
 375   2      
 376   2                      /* B0_P5_U1_CFG24 Starting address: CYDEV_UCFG_B0_P5_U1_CFG24 */
 377   2                      CY_SET_XTND_REG32((void CYFAR *)(CYREG_B0_P5_U1_CFG24), 0xC4040000u);
 378   2      
 379   2                      /* Enable digital routing */
 380   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 381   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 382   2      
 383   2                      /* Enable UDB array */
 384   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 385   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 386   2              }
 387   1      
 388   1      
 389   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 390   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT1_DM0), (const void CYFAR *)(BS_IOPINS0_1_VAL), 8u);
 391   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 392   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT5_DM0), (const void CYFAR *)(BS_IOPINS0_5_VAL), 8u);
 393   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT6_DM0), (const void CYFAR *)(BS_IOPINS0_6_VAL), 8u);
 394   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 395   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 396   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 397   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 398   1              {
 399   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 400   2              }
 401   1      
 402   1      
 403   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 404   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0x31u : 0x00u));
 405   1              /* Setup clocks based on selections from Clock DWR */
 406   1              ClockSetup();
 407   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 408   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 409   1      
 410   1              /* Perform basic analog initialization to defaults */
 411   1              AnalogSetDefault();
 412   1      
 413   1              /* Configure alternate active mode */
 414   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 415   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 8   

 416   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 78
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 81
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 97
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 140
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7D01              MOV     R5,#01H
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 141
000D 904082            MOV     DPTR,#04082H
0010 7418              MOV     A,#018H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0013 904300            MOV     DPTR,#04300H
0016 7402              MOV     A,#02H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 145
0019 904000            MOV     DPTR,#04000H
001C 7408              MOV     A,#08H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
001F 904200            MOV     DPTR,#04200H
0022 7403              MOV     A,#03H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
0025 7B0C              MOV     R3,#0CH
0027 7A01              MOV     R2,#01H
0029 7908              MOV     R1,#08H
002B 120000      E     LCALL   _cyread8
002E 9046A1            MOV     DPTR,#046A1H
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
0033 7B00              MOV     R3,#00H
0035 7A42              MOV     R2,#042H
0037 7922              MOV     R1,#022H
0039 7D08              MOV     R5,#08H
003B 7C00              MOV     R4,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 10  

003D 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 153
0040 7B00              MOV     R3,#00H
0042 7A42              MOV     R2,#042H
0044 7920              MOV     R1,#020H
0046 7D51              MOV     R5,#051H
0048 7C12              MOV     R4,#012H
004A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 155
004D 900000      R     MOV     DPTR,#pllLock
0050 E4                CLR     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
0052 7F19              MOV     R7,#019H
0054 7E00              MOV     R6,#00H
0056 7D00              MOV     R5,#00H
0058 7C00              MOV     R4,#00H
005A 900000      R     MOV     DPTR,#timeout
005D 120000      E     LCALL   ?C?LSTXDATA
0060         ?C0004:
0060 900000      R     MOV     DPTR,#timeout
0063 120000      E     LCALL   ?C?LLDXDATA
0066 D3                SETB    C
0067 EF                MOV     A,R7
0068 9400              SUBB    A,#00H
006A EE                MOV     A,R6
006B 9400              SUBB    A,#00H
006D 404E              JC      ?C0005
006F 900000      R     MOV     DPTR,#pllLock
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 EF                MOV     A,R7
0075 6403              XRL     A,#03H
0077 6044              JZ      ?C0005
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
0079 904225            MOV     DPTR,#04225H
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E EF                MOV     A,R7
007F 5401              ANL     A,#01H
0081 FF                MOV     R7,A
0082 7E00              MOV     R6,#00H
0084 900000      R     MOV     DPTR,#pllLock
0087 E0                MOVX    A,@DPTR
0088 FE                MOV     R6,A
0089 EE                MOV     A,R6
008A 25E0              ADD     A,ACC
008C FE                MOV     R6,A
008D EE                MOV     A,R6
008E 4F                ORL     A,R7
008F FF                MOV     R7,A
0090 EF                MOV     A,R7
0091 5403              ANL     A,#03H
0093 FF                MOV     R7,A
0094 900000      R     MOV     DPTR,#pllLock
0097 EF                MOV     A,R7
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
0099 7FE0              MOV     R7,#0E0H
009B 7E01              MOV     R6,#01H
009D 7D00              MOV     R5,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 11  

009F 7C00              MOV     R4,#00H
00A1 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 160
00A4 900000      R     MOV     DPTR,#timeout
00A7 120000      E     LCALL   ?C?LLDXDATA
00AA 7BFF              MOV     R3,#0FFH
00AC 7AFF              MOV     R2,#0FFH
00AE 79FF              MOV     R1,#0FFH
00B0 78FF              MOV     R0,#0FFH
00B2 120000      E     LCALL   ?C?LADD
00B5 900000      R     MOV     DPTR,#timeout
00B8 120000      E     LCALL   ?C?LSTXDATA
00BB 80A3              SJMP    ?C0004
00BD         ?C0005:
                                           ; SOURCE LINE # 162
00BD 900000      R     MOV     DPTR,#timeout
00C0 120000      E     LCALL   ?C?LLDXDATA
00C3 EF                MOV     A,R7
00C4 4E                ORL     A,R6
00C5 7005              JNZ     ?C0007
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
00C7 7F03              MOV     R7,#03H
00C9 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 165
00CC         ?C0007:
                                           ; SOURCE LINE # 168
00CC 7B00              MOV     R3,#00H
00CE 7A40              MOV     R2,#040H
00D0 7904              MOV     R1,#04H
00D2 7D00              MOV     R5,#00H
00D4 7C01              MOV     R4,#01H
00D6 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 169
00D9 904004            MOV     DPTR,#04004H
00DC 7407              MOV     A,#07H
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
00DF 904006            MOV     DPTR,#04006H
00E2 E4                CLR     A
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
00E4 904008            MOV     DPTR,#04008H
00E7 7448              MOV     A,#048H
00E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
00EA 904004            MOV     DPTR,#04004H
00ED E4                CLR     A
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
00EF 904001            MOV     DPTR,#04001H
00F2 7402              MOV     A,#02H
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
00F5 9043A2            MOV     DPTR,#043A2H
00F8 E0                MOVX    A,@DPTR
00F9 FF                MOV     R7,A
00FA EF                MOV     A,R7
00FB 4401              ORL     A,#01H
00FD FF                MOV     R7,A
00FE 9043A2            MOV     DPTR,#043A2H
0101 EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 12  

0102 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
0103 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
002F 90516D            MOV     DPTR,#0516DH
0032 7410              MOV     A,#010H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0035 905870            MOV     DPTR,#05870H
0038 E4                CLR     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
003A 905AC3            MOV     DPTR,#05AC3H
003D 7420              MOV     A,#020H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
0040 905B5B            MOV     DPTR,#05B5BH
0043 7401              MOV     A,#01H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
0046 905876            MOV     DPTR,#05876H
0049 7444              MOV     A,#044H
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
004C 22                RET     
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 13  

             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 228
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0010
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4422              ORL     A,#022H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
0025 800E              SJMP    ?C0011
0027         ?C0010:
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54DD              ANL     A,#0DDH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 238
0035         ?C0011:
                                           ; SOURCE LINE # 239
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION _CapSense_AMuxCH0_Set (BEGIN)
                                           ; SOURCE LINE # 287
0000 900000      R     MOV     DPTR,#channel
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 14  

0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
0005 900000      R     MOV     DPTR,#channel
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 940A              SUBB    A,#0AH
000E 5036              JNC     ?C0014
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
0010 900000      R     MOV     DPTR,#channel
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 25E0              ADD     A,ACC
0018 2400        R     ADD     A,#LOW CapSense_AMuxCH0__addrTable
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH CapSense_AMuxCH0__addrTable
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FE                MOV     R6,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 8F82              MOV     DPL,R7
002A 8E83              MOV     DPH,R6
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#channel
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 900000      R     MOV     DPTR,#CapSense_AMuxCH0__maskTable
003B 93                MOVC    A,@A+DPTR
003C FE                MOV     R6,A
003D EF                MOV     A,R7
003E 4E                ORL     A,R6
003F FF                MOV     R7,A
0040 D082              POP     DPL
0042 D083              POP     DPH
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
0046         ?C0014:
0046 22                RET     
             ; FUNCTION _CapSense_AMuxCH0_Set (END)

             ; FUNCTION _CapSense_AMuxCH0_Unset (BEGIN)
                                           ; SOURCE LINE # 309
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 15  

0005 900000      R     MOV     DPTR,#channel
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 940A              SUBB    A,#0AH
000E 5039              JNC     ?C0016
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
0010 900000      R     MOV     DPTR,#channel
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 25E0              ADD     A,ACC
0018 2400        R     ADD     A,#LOW CapSense_AMuxCH0__addrTable
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH CapSense_AMuxCH0__addrTable
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FE                MOV     R6,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 8F82              MOV     DPL,R7
002A 8E83              MOV     DPH,R6
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#channel
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 900000      R     MOV     DPTR,#CapSense_AMuxCH0__maskTable
003B 93                MOVC    A,@A+DPTR
003C FE                MOV     R6,A
003D EE                MOV     A,R6
003E F4                CPL     A
003F FE                MOV     R6,A
0040 EF                MOV     A,R7
0041 5E                ANL     A,R6
0042 FF                MOV     R7,A
0043 D082              POP     DPL
0045 D083              POP     DPH
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
0049         ?C0016:
0049 22                RET     
             ; FUNCTION _CapSense_AMuxCH0_Unset (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 339
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 16  

0009 EF                MOV     A,R7
000A 4405              ORL     A,#05H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 364
0016 750000      R     MOV     i,#00H
0019         ?C0017:
0019 E500        R     MOV     A,i
001B C3                CLR     C
001C 9409              SUBB    A,#09H
001E 503A              JNC     ?C0018
                                           ; SOURCE LINE # 365
                                           ; SOURCE LINE # 366
0020 AF00        R     MOV     R7,i
0022 EF                MOV     A,R7
0023 75F005            MOV     B,#05H
0026 A4                MUL     AB
0027 2400        R     ADD     A,#LOW cfg_memset_list
0029 F582              MOV     DPL,A
002B E4                CLR     A
002C 3400        R     ADDC    A,#HIGH cfg_memset_list
002E F583              MOV     DPH,A
0030 AF82              MOV     R7,DPL
0032 AE83              MOV     R6,DPH
0034 8E00        R     MOV     ms,R6
0036 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 367
0038 AE00        R     MOV     R6,ms
003A AF00        R     MOV     R7,ms+01H
003C 8F82              MOV     DPL,R7
003E 8E83              MOV     DPH,R6
0040 120000      E     LCALL   ?C?PLDCODE
0043 AE00        R     MOV     R6,ms
0045 AF00        R     MOV     R7,ms+01H
0047 8F82              MOV     DPL,R7
0049 8E83              MOV     DPH,R6
004B 7403              MOV     A,#03H
004D 93                MOVC    A,@A+DPTR
004E FC                MOV     R4,A
004F 7404              MOV     A,#04H
0051 93                MOVC    A,@A+DPTR
0052 FD                MOV     R5,A
0053 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 368
0056 0500        R     INC     i
0058 80BF              SJMP    ?C0017
005A         ?C0018:
                                           ; SOURCE LINE # 370
005A 7B08              MOV     R3,#08H
005C 7A00              MOV     R2,#00H
005E 7900              MOV     R1,#00H
0060 120000      E     LCALL   _cfg_write_bytes
                                           ; SOURCE LINE # 373
0063 7B00              MOV     R3,#00H
0065 7A58              MOV     R2,#058H
0067 7972              MOV     R1,#072H
0069 7D00              MOV     R5,#00H
006B 7C03              MOV     R4,#03H
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 17  

006D 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 374
0070 7B00              MOV     R3,#00H
0072 7A58              MOV     R2,#058H
0074 7948              MOV     R1,#048H
0076 7D03              MOV     R5,#03H
0078 7C00              MOV     R4,#00H
007A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 377
007D 7B01              MOV     R3,#01H
007F 7A0A              MOV     R2,#0AH
0081 79D8              MOV     R1,#0D8H
0083 7F00              MOV     R7,#00H
0085 7E00              MOV     R6,#00H
0087 7D04              MOV     R5,#04H
0089 7CC4              MOV     R4,#0C4H
008B 120000      E     LCALL   _cywrite32
                                           ; SOURCE LINE # 380
008E 7B01              MOV     R3,#01H
0090 7A50              MOV     R2,#050H
0092 7903              MOV     R1,#03H
0094 120000      E     LCALL   _cyread8
0097 EF                MOV     A,R7
0098 4402              ORL     A,#02H
009A FD                MOV     R5,A
009B 7B01              MOV     R3,#01H
009D 7A50              MOV     R2,#050H
009F 7903              MOV     R1,#03H
00A1 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 381
00A4 7B01              MOV     R3,#01H
00A6 7A50              MOV     R2,#050H
00A8 7913              MOV     R1,#013H
00AA 120000      E     LCALL   _cyread8
00AD EF                MOV     A,R7
00AE 4402              ORL     A,#02H
00B0 FD                MOV     R5,A
00B1 7B01              MOV     R3,#01H
00B3 7A50              MOV     R2,#050H
00B5 7913              MOV     R1,#013H
00B7 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 384
00BA 9043A0            MOV     DPTR,#043A0H
00BD E0                MOVX    A,@DPTR
00BE FF                MOV     R7,A
00BF EF                MOV     A,R7
00C0 4440              ORL     A,#040H
00C2 FF                MOV     R7,A
00C3 9043A0            MOV     DPTR,#043A0H
00C6 EF                MOV     A,R7
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 385
00C8 9043C2            MOV     DPTR,#043C2H
00CB E0                MOVX    A,@DPTR
00CC FF                MOV     R7,A
00CD EF                MOV     A,R7
00CE 4410              ORL     A,#010H
00D0 FF                MOV     R7,A
00D1 9043C2            MOV     DPTR,#043C2H
00D4 EF                MOV     A,R7
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 18  

                                           ; SOURCE LINE # 390
00D6 7B08              MOV     R3,#08H
00D8 7A02              MOV     R2,#02H
00DA 79E4              MOV     R1,#0E4H
00DC C003              PUSH    AR3
00DE C002              PUSH    AR2
00E0 C001              PUSH    AR1
00E2 7B00              MOV     R3,#00H
00E4 7A51              MOV     R2,#051H
00E6 7912              MOV     R1,#012H
00E8 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00EB 120000      E     LCALL   ?C?PSTXDATA
00EE D001              POP     AR1
00F0 D002              POP     AR2
00F2 D003              POP     AR3
00F4 7F08              MOV     R7,#08H
00F6 7E00              MOV     R6,#00H
00F8 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 391
00FB 7B08              MOV     R3,#08H
00FD 7A02              MOV     R2,#02H
00FF 79EC              MOV     R1,#0ECH
0101 C003              PUSH    AR3
0103 C002              PUSH    AR2
0105 C001              PUSH    AR1
0107 7B00              MOV     R3,#00H
0109 7A51              MOV     R2,#051H
010B 7922              MOV     R1,#022H
010D 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0110 120000      E     LCALL   ?C?PSTXDATA
0113 D001              POP     AR1
0115 D002              POP     AR2
0117 D003              POP     AR3
0119 7F08              MOV     R7,#08H
011B 7E00              MOV     R6,#00H
011D 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 392
0120 7B08              MOV     R3,#08H
0122 7A02              MOV     R2,#02H
0124 79F4              MOV     R1,#0F4H
0126 C003              PUSH    AR3
0128 C002              PUSH    AR2
012A C001              PUSH    AR1
012C 7B00              MOV     R3,#00H
012E 7A51              MOV     R2,#051H
0130 7952              MOV     R1,#052H
0132 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0135 120000      E     LCALL   ?C?PSTXDATA
0138 D001              POP     AR1
013A D002              POP     AR2
013C D003              POP     AR3
013E 7F08              MOV     R7,#08H
0140 7E00              MOV     R6,#00H
0142 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 393
0145 7B08              MOV     R3,#08H
0147 7A02              MOV     R2,#02H
0149 79FC              MOV     R1,#0FCH
014B C003              PUSH    AR3
014D C002              PUSH    AR2
014F C001              PUSH    AR1
0151 7B00              MOV     R3,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 19  

0153 7A51              MOV     R2,#051H
0155 7962              MOV     R1,#062H
0157 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
015A 120000      E     LCALL   ?C?PSTXDATA
015D D001              POP     AR1
015F D002              POP     AR2
0161 D003              POP     AR3
0163 7F08              MOV     R7,#08H
0165 7E00              MOV     R6,#00H
0167 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 394
016A 9044F4            MOV     DPTR,#044F4H
016D 7401              MOV     A,#01H
016F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 396
0170 904322            MOV     DPTR,#04322H
0173 E0                MOVX    A,@DPTR
0174 FF                MOV     R7,A
0175 EF                MOV     A,R7
0176 4408              ORL     A,#08H
0178 FF                MOV     R7,A
0179 904322            MOV     DPTR,#04322H
017C EF                MOV     A,R7
017D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 397
017E 9046EC            MOV     DPTR,#046ECH
0181 E0                MOVX    A,@DPTR
0182 FF                MOV     R7,A
0183 EF                MOV     A,R7
0184 C3                CLR     C
0185 9405              SUBB    A,#05H
0187 5006              JNC     ?C0020
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
0189 904689            MOV     DPTR,#04689H
018C 743A              MOV     A,#03AH
018E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
018F         ?C0020:
                                           ; SOURCE LINE # 404
018F 904800            MOV     DPTR,#04800H
0192 7431              MOV     A,#031H
0194 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 406
0195 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 408
0198 904800            MOV     DPTR,#04800H
019B 74B1              MOV     A,#0B1H
019D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 411
019E 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 414
01A1 7B00              MOV     R3,#00H
01A3 7A43              MOV     R2,#043H
01A5 79A0              MOV     R1,#0A0H
01A7 C003              PUSH    AR3
01A9 C002              PUSH    AR2
01AB C001              PUSH    AR1
01AD 7B00              MOV     R3,#00H
01AF 7A43              MOV     R2,#043H
01B1 79B0              MOV     R1,#0B0H
01B3 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/29/2022 16:00:55 PAGE 20  

01B6 120000      E     LCALL   ?C?PSTXDATA
01B9 D001              POP     AR1
01BB D002              POP     AR2
01BD D003              POP     AR3
01BF 7F0E              MOV     R7,#0EH
01C1 7E00              MOV     R6,#00H
01C3 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 415
01C6 9043B0            MOV     DPTR,#043B0H
01C9 E0                MOVX    A,@DPTR
01CA FF                MOV     R7,A
01CB EF                MOV     A,R7
01CC 54FD              ANL     A,#0FDH
01CE FF                MOV     R7,A
01CF EF                MOV     A,R7
01D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
01D1 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1030    ----
   CONSTANT SIZE    =     75    ----
   XDATA SIZE       =   ----      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
