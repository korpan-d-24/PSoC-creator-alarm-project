C51 COMPILER V9.51   LCD_BARGRAPH                                                          11/29/2022 16:00:56 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE LCD_BARGRAPH
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\LCD_BarGraph.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.4\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\LCD_BarGraph.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEB
                    -UG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/LCD_BarGraph.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\LCD_BarGra
                    -ph.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: LCD_BarGraph.c
   3          * Version 2.20
   4          *
   5          * Description:
   6          *  This file provides the custom character data and API for creating and using
   7          *  bar graphs with the Character LCD component.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "LCD.h"
  19          
  20          
  21          uint8 const CYCODE LCD_customFonts[] = \
  22          {
  23              /* Character LCD_CUSTOM_0   */
  24              0x00u,    0x00u,    0x00u,    0x00u,    0x00u,    0x00u,    0x00u,    0x00u, \
  25              /* Character LCD_CUSTOM_1   */
  26              0x10u,    0x10u,    0x10u,    0x10u,    0x10u,    0x10u,    0x10u,    0x10u, \
  27              /* Character LCD_CUSTOM_2   */
  28              0x18u,    0x18u,    0x18u,    0x18u,    0x18u,    0x18u,    0x18u,    0x18u, \
  29              /* Character LCD_CUSTOM_3   */
  30              0x1Cu,    0x1Cu,    0x1Cu,    0x1Cu,    0x1Cu,    0x1Cu,    0x1Cu,    0x1Cu, \
  31              /* Character LCD_CUSTOM_4   */
  32              0x1Eu,    0x1Eu,    0x1Eu,    0x1Eu,    0x1Eu,    0x1Eu,    0x1Eu,    0x1Eu, \
  33              /* Character LCD_CUSTOM_5   */
  34              0x1Fu,    0x1Fu,    0x1Fu,    0x1Fu,    0x1Fu,    0x1Fu,    0x1Fu,    0x1Fu, \
  35              /* Character LCD_CUSTOM_6   */
  36              0x00u,    0x00u,    0x00u,    0x00u,    0x00u,    0x00u,    0x00u,    0x00u, \
  37              /* Character LCD_CUSTOM_7   */
  38              0x00u,    0x00u,    0x00u,    0x00u,    0x00u,    0x00u,    0x00u,    0x00u \
  39          };
  40          
  41          
  42          /*******************************************************************************
  43          * Function Name: LCD_LoadCustomFonts
  44          ********************************************************************************
  45          *
  46          * Summary:
  47          *  Loads 8 custom font characters into the LCD Module for use.  Cannot use
  48          *  characters from two different font sets at once, but font sets can be
  49          *  switched out during runtime.
  50          *
  51          * Parameters:
  52          *  customData:  pointer to a constant array of 64 bytes representing 8 custom
C51 COMPILER V9.51   LCD_BARGRAPH                                                          11/29/2022 16:00:56 PAGE 2   

  53          *               font characters.
  54          * Return:
  55          *  None.
  56          *
  57          * Theory:
  58          *  Prior to using this function user need to import the pointer to custom
  59          *  font array to your project by writting the following in the source code file
  60          *  where custom font will be used:
  61          *       extern uint8 const CYCODE LCD_Char_customFonts[];
  62          *  This function is not automatically called by the Start() routine and must be
  63          *  called manually by the user.
  64          *******************************************************************************/
  65          void LCD_LoadCustomFonts(uint8 const customData[]) 
  66          {
  67   1          uint8 indexU8;
  68   1      
  69   1          LCD_IsReady();
  70   1          /* Set starting address in the LCD Module */
  71   1          /* Optionally: Read the current address to restore at a later time */
  72   1          LCD_WriteControl(LCD_CGRAM_0);
  73   1      
  74   1          /* Load in the 64 bytes of CustomChar Data */
  75   1          for(indexU8 = 0u; indexU8 < LCD_CUSTOM_CHAR_SET_LEN; indexU8++)
  76   1          {
  77   2              /* Delay between each write */
  78   2              LCD_WriteData(customData[indexU8]);
  79   2          }
  80   1      
  81   1          LCD_IsReady();
  82   1          LCD_WriteControl(LCD_DDRAM_0);
  83   1      }
  84          
  85          
  86          #if (LCD_CUSTOM_CHAR_SET == LCD_HORIZONTAL_BG)
  87          
  88              /*******************************************************************************
  89              * Function Name: LCD_DrawHorizontalBG
  90              ********************************************************************************
  91              *
  92              * Summary:
  93              *  Draws the horizontal bargraph.
  94              *
  95              * Parameters:
  96              *  row:            The row in which the bar graph starts.
  97              *  column:         The column in which the bar graph starts.
  98              *  maxCharacters:  The max length of the graph in whole characters.
  99              *  value:          The current length or height of the graph in pixels.
 100              *
 101              * Return:
 102              *  void.
 103              *
 104              *******************************************************************************/
 105              void LCD_DrawHorizontalBG(uint8 row, uint8 column, uint8 maxCharacters, uint8 value) \
 106                                                                      
 107              {
 108   1              /* 8-bit Counter */
 109   1              uint8 count8;
 110   1              uint8 fullChars;
 111   1              uint8 remainingPixels;
 112   1      
 113   1              /* Number of full characters to draw */
 114   1              fullChars = value / LCD_CHARACTER_WIDTH;
C51 COMPILER V9.51   LCD_BARGRAPH                                                          11/29/2022 16:00:56 PAGE 3   

 115   1      
 116   1              /* Number of remaining pixels to draw */
 117   1              remainingPixels = value % LCD_CHARACTER_WIDTH;
 118   1      
 119   1              /* Ensure that the maximum character limit is followed. */
 120   1              if(fullChars >= maxCharacters)
 121   1              {
 122   2                  fullChars = maxCharacters;
 123   2              }
 124   1      
 125   1              /* Put Cursor at start position */
 126   1              LCD_Position(row, column);
 127   1      
 128   1              /* Write full characters */
 129   1              for(count8 = 0u; count8 < fullChars; count8++)
 130   1              {
 131   2                  LCD_WriteData(LCD_CUSTOM_5);
 132   2              }
 133   1      
 134   1              if(fullChars < maxCharacters)
 135   1              {
 136   2                  /* Write remaining pixels */
 137   2                  LCD_WriteData(remainingPixels);
 138   2      
 139   2                  if(fullChars < (maxCharacters - 1u))
 140   2                  {
 141   3                      /* Fill with whitespace to end of bar graph */
 142   3                      for(count8 = 0u; count8 < (maxCharacters - fullChars - 1u); count8++)
 143   3                      {
 144   4                          LCD_WriteData(LCD_CUSTOM_0);
 145   4                      }
 146   3                  }
 147   2              }
 148   1          }
 149          
 150          #endif /* LCD_CUSTOM_CHAR_SET == LCD_HORIZONTAL_BG */
 151          
 152          
 153          #if (LCD_CUSTOM_CHAR_SET == LCD_VERTICAL_BG)
              
                  /*******************************************************************************
                  *  Function Name: LCD_DrawVerticalBG
                  ********************************************************************************
                  *
                  * Summary:
                  *  Draws the vertical bargraph.
                  *
                  * Parameters:
                  *  row:            The row in which the bar graph starts.
                  *  column:         The column in which the bar graph starts.
                  *  maxCharacters:  The max height of the graph in whole characters.
                  *  value:          The current length or height of the graph in pixels.
                  *
                  * Return:
                  *  void.
                  *
                  *******************************************************************************/
                  void LCD_DrawVerticalBG(uint8 row, uint8 column, uint8 maxCharacters, uint8 value) \
                                                                          
                  {
                      /* 8-bit Counter */
                      uint8 count8 = 0u;
C51 COMPILER V9.51   LCD_BARGRAPH                                                          11/29/2022 16:00:56 PAGE 4   

                      /* Current Row Tracker */
                      int8 currentRow;
                      uint8 fullChars;
                      uint8 remainingPixels;
              
                      /* Number of full characters to draw */
                      fullChars = value / LCD_CHARACTER_HEIGHT;
              
                      /* Number of remaining pixels to draw */
                      remainingPixels = value % LCD_CHARACTER_HEIGHT;
              
                      /* Put Cursor at start position */
                      LCD_Position(row, column);
              
                      /* Make sure the bar graph fits inside the space allotted */
                      if(fullChars >= maxCharacters)
                      {
                          fullChars = maxCharacters;
                      }
              
                      /*  Write full characters */
                      while(count8 < fullChars)
                      {
                          LCD_WriteData(LCD_CUSTOM_7);
              
                          count8++;
              
                          /* Each pass through, move one row higher */
                          if((((int8) row) - ((int8) count8)) >= 0)
                          {
                              LCD_Position(row - count8, column);
                          }
                          else
                          {
                              break;
                          }
                      }
              
                      if(((((int8) row) - ((int8) count8)) >= 0) && (fullChars < maxCharacters))
                      {
                          /* Write remaining pixels */
                          if(remainingPixels == 0u)
                          {
                              LCD_WriteData((uint8) ' ');
                          }
                          else
                          {
                              LCD_WriteData(remainingPixels - 1u);
                          }
              
                          currentRow = ((int8) row) - ((int8) count8) - 1;
              
                          if(currentRow >= 0)
                          {
                              /* Move up one row and fill with whitespace till top of bar graph */
                              for(count8 = 0u; count8 < (maxCharacters - fullChars - 1u); count8++)
                              {
                                  LCD_Position((uint8)currentRow, column);
                                  LCD_WriteData((uint8) ' ');
                                  currentRow --;
                              }
                          }
C51 COMPILER V9.51   LCD_BARGRAPH                                                          11/29/2022 16:00:56 PAGE 5   

                      }
                  }
              
              #endif /* LCD_CUSTOM_CHAR_SET == LCD_VERTICAL_BG */
 243          
 244          
 245          /* [] END OF FILE */
C51 COMPILER V9.51   LCD_BARGRAPH                                                          11/29/2022 16:00:56 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _LCD_LoadCustomFonts (BEGIN)
                                           ; SOURCE LINE # 65
0000 900000      R     MOV     DPTR,#customData
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 69
0006 120000      E     LCALL   LCD_IsReady
                                           ; SOURCE LINE # 72
0009 7F40              MOV     R7,#040H
000B 120000      E     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 75
000E 900000      R     MOV     DPTR,#indexU8
0011 E4                CLR     A
0012 F0                MOVX    @DPTR,A
0013         ?C0001:
0013 900000      R     MOV     DPTR,#indexU8
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 C3                CLR     C
001A 9440              SUBB    A,#040H
001C 5020              JNC     ?C0002
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 78
001E 900000      R     MOV     DPTR,#customData
0021 120000      E     LCALL   ?C?PLDXDATA
0024 900000      R     MOV     DPTR,#indexU8
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 E9                MOV     A,R1
002A 2F                ADD     A,R7
002B F9                MOV     R1,A
002C E4                CLR     A
002D 3A                ADDC    A,R2
002E FA                MOV     R2,A
002F 120000      E     LCALL   ?C?CLDPTR
0032 FF                MOV     R7,A
0033 120000      E     LCALL   _LCD_WriteData
                                           ; SOURCE LINE # 79
0036 900000      R     MOV     DPTR,#indexU8
0039 E0                MOVX    A,@DPTR
003A 04                INC     A
003B F0                MOVX    @DPTR,A
003C 80D5              SJMP    ?C0001
003E         ?C0002:
                                           ; SOURCE LINE # 81
003E 120000      E     LCALL   LCD_IsReady
                                           ; SOURCE LINE # 82
0041 7F80              MOV     R7,#080H
0043 120000      E     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 83
0046 22                RET     
             ; FUNCTION _LCD_LoadCustomFonts (END)

             ; FUNCTION _LCD_DrawHorizontalBG (BEGIN)
                                           ; SOURCE LINE # 105
0000 900000      R     MOV     DPTR,#row
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   LCD_BARGRAPH                                                          11/29/2022 16:00:56 PAGE 7   

0005 900000      R     MOV     DPTR,#column
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#maxCharacters
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 114
000F 900000      R     MOV     DPTR,#value
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 7E00              MOV     R6,#00H
0016 7C00              MOV     R4,#00H
0018 7D05              MOV     R5,#05H
001A 120000      E     LCALL   ?C?UIDIV
001D 900000      R     MOV     DPTR,#fullChars
0020 EF                MOV     A,R7
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 117
0022 900000      R     MOV     DPTR,#value
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 7E00              MOV     R6,#00H
0029 7C00              MOV     R4,#00H
002B 7D05              MOV     R5,#05H
002D 120000      E     LCALL   ?C?UIDIV
0030 AF05              MOV     R7,AR5
0032 900000      R     MOV     DPTR,#remainingPixels
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
0037 900000      R     MOV     DPTR,#maxCharacters
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#fullChars
003F E0                MOVX    A,@DPTR
0040 FE                MOV     R6,A
0041 EE                MOV     A,R6
0042 C3                CLR     C
0043 9F                SUBB    A,R7
0044 400A              JC      ?C0005
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
0046 900000      R     MOV     DPTR,#maxCharacters
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B 900000      R     MOV     DPTR,#fullChars
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
0050         ?C0005:
                                           ; SOURCE LINE # 126
0050 900000      R     MOV     DPTR,#row
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 900000      R     MOV     DPTR,#column
0058 E0                MOVX    A,@DPTR
0059 FD                MOV     R5,A
005A 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 129
005D 900000      R     MOV     DPTR,#count8
0060 E4                CLR     A
C51 COMPILER V9.51   LCD_BARGRAPH                                                          11/29/2022 16:00:56 PAGE 8   

0061 F0                MOVX    @DPTR,A
0062         ?C0006:
0062 900000      R     MOV     DPTR,#fullChars
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 900000      R     MOV     DPTR,#count8
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
006C EE                MOV     A,R6
006D C3                CLR     C
006E 9F                SUBB    A,R7
006F 500D              JNC     ?C0007
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
0071 7F05              MOV     R7,#05H
0073 120000      E     LCALL   _LCD_WriteData
                                           ; SOURCE LINE # 132
0076 900000      R     MOV     DPTR,#count8
0079 E0                MOVX    A,@DPTR
007A 04                INC     A
007B F0                MOVX    @DPTR,A
007C 80E4              SJMP    ?C0006
007E         ?C0007:
                                           ; SOURCE LINE # 134
007E 900000      R     MOV     DPTR,#maxCharacters
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 900000      R     MOV     DPTR,#fullChars
0086 E0                MOVX    A,@DPTR
0087 FE                MOV     R6,A
0088 EE                MOV     A,R6
0089 C3                CLR     C
008A 9F                SUBB    A,R7
008B 505D              JNC     ?C0014
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 137
008D 900000      R     MOV     DPTR,#remainingPixels
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 120000      E     LCALL   _LCD_WriteData
                                           ; SOURCE LINE # 139
0095 900000      R     MOV     DPTR,#maxCharacters
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
009A 7E00              MOV     R6,#00H
009C EF                MOV     A,R7
009D 24FF              ADD     A,#0FFH
009F FF                MOV     R7,A
00A0 EE                MOV     A,R6
00A1 34FF              ADDC    A,#0FFH
00A3 FE                MOV     R6,A
00A4 900000      R     MOV     DPTR,#fullChars
00A7 E0                MOVX    A,@DPTR
00A8 FD                MOV     R5,A
00A9 7C00              MOV     R4,#00H
00AB C3                CLR     C
00AC ED                MOV     A,R5
00AD 9F                SUBB    A,R7
00AE EC                MOV     A,R4
00AF 9E                SUBB    A,R6
00B0 5038              JNC     ?C0014
                                           ; SOURCE LINE # 140
C51 COMPILER V9.51   LCD_BARGRAPH                                                          11/29/2022 16:00:56 PAGE 9   

                                           ; SOURCE LINE # 142
00B2 900000      R     MOV     DPTR,#count8
00B5 E4                CLR     A
00B6 F0                MOVX    @DPTR,A
00B7         ?C0011:
00B7 900000      R     MOV     DPTR,#fullChars
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC 900000      R     MOV     DPTR,#maxCharacters
00BF E0                MOVX    A,@DPTR
00C0 FE                MOV     R6,A
00C1 C3                CLR     C
00C2 EE                MOV     A,R6
00C3 9F                SUBB    A,R7
00C4 FF                MOV     R7,A
00C5 7E00              MOV     R6,#00H
00C7 EF                MOV     A,R7
00C8 24FF              ADD     A,#0FFH
00CA FF                MOV     R7,A
00CB EE                MOV     A,R6
00CC 34FF              ADDC    A,#0FFH
00CE FE                MOV     R6,A
00CF 900000      R     MOV     DPTR,#count8
00D2 E0                MOVX    A,@DPTR
00D3 FD                MOV     R5,A
00D4 7C00              MOV     R4,#00H
00D6 C3                CLR     C
00D7 ED                MOV     A,R5
00D8 9F                SUBB    A,R7
00D9 EC                MOV     A,R4
00DA 9E                SUBB    A,R6
00DB 500D              JNC     ?C0014
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
00DD 7F00              MOV     R7,#00H
00DF 120000      E     LCALL   _LCD_WriteData
                                           ; SOURCE LINE # 145
00E2 900000      R     MOV     DPTR,#count8
00E5 E0                MOVX    A,@DPTR
00E6 04                INC     A
00E7 F0                MOVX    @DPTR,A
00E8 80CD              SJMP    ?C0011
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
00EA         ?C0014:
00EA 22                RET     
             ; FUNCTION _LCD_DrawHorizontalBG (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    306    ----
   CONSTANT SIZE    =     64    ----
   XDATA SIZE       =   ----      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
C51 COMPILER V9.51   LCD_BARGRAPH                                                          11/29/2022 16:00:56 PAGE 10  

   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
